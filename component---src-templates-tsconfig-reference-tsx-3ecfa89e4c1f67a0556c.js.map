{"version":3,"sources":["webpack://typescriptlang-org/../node_modules/babel-loader/lib/node_modules/shiki-twoslash/dist/dom.js","webpack://typescriptlang-org/./src/templates/tsconfigReference.tsx"],"names":["exports","resetHover","globalPopover","document","getElementById","style","display","getRootRect","element","nodeName","toLowerCase","getBoundingClientRect","parentElement","hover","event","hovered","target","bodyRect","elemRect","message","getAttribute","position","body","top","left","tooltip","createElement","id","appendChild","txt","innerHTML","textContent","value","rootRect","relativeLeft","x","maxWidth","width","blocks","querySelectorAll","forEach","code","addEventListener","removeEventListener","TSConfigReferenceTemplateComponent","props","i","createInternational","useIntl","post","data","markdownRemark","console","log","JSON","stringify","useEffect","subnavLinks","link","preventDefault","querySelector","scrollIntoView","behavior","block","updateSidebar","currentPossibleAnchor","fromTop","window","scrollY","section","hash","offsetTop","classList","add","remove","passive","capture","setupTwoslashHovers","anchor","sectionName","prefixes","showCategories","categories","className","href","map","c","aria-labelledby","options","o","opt","index","indexOf","length","pageContext","root","filter","watch","typeAcq","skip","compilerOpts","includes","useState","openInfo","setOpenInfo","title","description","lang","locale","onClick","height","viewBox","fill","xmlns","d","stroke","intro","header","preview","dangerouslySetInnerHTML","__html","html"],"mappings":"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","file":"component---src-templates-tsconfig-reference-tsx-3ecfa89e4c1f67a0556c.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.setupTwoslashHovers = void 0; // Gets the position of an element relative to the whole page\n\nvar getAbsoluteElementPos = function getAbsoluteElementPos(element) {\n  var bodyRect = document.body.getBoundingClientRect();\n  var elemRect = element.getBoundingClientRect();\n  var top = elemRect.top - bodyRect.top;\n  var left = elemRect.left - bodyRect.left;\n  return {\n    top: top,\n    left: left\n  };\n}; // Hide it\n\n\nvar resetHover = function resetHover() {\n  var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n  if (globalPopover) globalPopover.style.display = \"none\";\n}; // Get it\n\n\nvar findOrCreateTooltip = function findOrCreateTooltip() {\n  var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n\n  if (!globalPopover) {\n    globalPopover = document.createElement(\"div\");\n    globalPopover.style.position = \"absolute\";\n    globalPopover.id = \"twoslash-mouse-hover-info\";\n    document.body.appendChild(globalPopover);\n  }\n\n  return globalPopover;\n};\n\nvar getRootRect = function getRootRect(element) {\n  if (element.nodeName.toLowerCase() === \"pre\") {\n    return element.getBoundingClientRect();\n  }\n\n  return getRootRect(element.parentElement);\n}; // Gets triggered on the spans inside the codeblocks\n\n\nvar hover = function hover(event) {\n  var hovered = event.target;\n  if (hovered.nodeName !== \"DATA-LSP\") return resetHover();\n  var message = hovered.getAttribute(\"lsp\");\n  var position = getAbsoluteElementPos(hovered); // Create or re-use the current hover div\n\n  var tooltip = findOrCreateTooltip(); // Use a textarea to un-htmlencode for presenting to the user\n\n  var txt = document.createElement(\"textarea\");\n  txt.innerHTML = message;\n  tooltip.textContent = txt.value; // Offset it a bit from the mouse and present it at an absolute position\n\n  var yOffset = 20;\n  tooltip.style.display = \"block\";\n  tooltip.style.top = position.top + yOffset + \"px\";\n  tooltip.style.left = position.left + \"px\"; // limit the width of the tooltip to the outer container (pre)\n\n  var rootRect = getRootRect(hovered);\n  var relativeLeft = position.left - rootRect.x;\n  tooltip.style.maxWidth = rootRect.width - relativeLeft + \"px\";\n};\n/**\n * Creates the main mouse over popup for LSP info using the DOM API.\n * It is expected to be run inside a `useEffect` block inside your main\n * exported component in Gatsby.\n *\n * @example\n * import React, { useEffect } from \"react\"\n * import { setupTwoslashHovers } from \"shiki-twoslash/dom\";\n *\n * export default () => {\n *   // Add a the hovers\n *   useEffect(setupTwoslashHovers)\n *\n *   // Normal JSX\n *   return </>\n * }\n *\n */\n\n\nvar setupTwoslashHovers = function setupTwoslashHovers() {\n  var blocks = document.querySelectorAll(\".shiki.lsp .code-container code\");\n  blocks.forEach(function (code) {\n    code.addEventListener(\"mouseover\", hover);\n    code.addEventListener(\"mouseout\", resetHover);\n  });\n  return function () {\n    blocks.forEach(function (code) {\n      code.removeEventListener(\"mouseover\", hover);\n      code.removeEventListener(\"mouseout\", resetHover);\n    });\n  };\n};\n\nexports.setupTwoslashHovers = setupTwoslashHovers;","import React, { useEffect, useState } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./tsconfig.scss\"\n\nimport { setupTwoslashHovers } from \"shiki-twoslash/dist/dom\"\n\ntype Category = { anchor: string, display: string, options: Array<{ anchor: string, name: string }> }\n\ntype Props = {\n  pageContext: {\n    categories: Category[],\n    tsconfigMDPath: string,\n    intro: {\n      html: string\n      header: string\n      preview: string\n    },\n    locale: string\n  },\n  data: GatsbyTypes.TSConfigReferenceTemplateQuery,\n  path: string\n}\n\nconst TSConfigReferenceTemplateComponent = (props: Props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    // Overrides the anchor behavior to smooth scroll instead\n    // Came from https://css-tricks.com/sticky-smooth-active-nav/\n    const subnavLinks = document.querySelectorAll<HTMLAnchorElement>(\".tsconfig .tsconfig-quick-nav-category li a\");\n\n    subnavLinks.forEach(link => {\n      link.addEventListener(\"click\", event => {\n        event.preventDefault();\n\n        let target = document.querySelector(event.target![\"hash\"]) as HTMLElement;\n        if (target) target.parentElement!.parentElement!.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n      })\n    })\n\n    // Sets the current selection\n    const updateSidebar = () => {\n      const fromTop = window.scrollY;\n      let currentPossibleAnchor: HTMLAnchorElement | undefined\n\n      // Scroll down to find the highest anchor on the screen\n      subnavLinks.forEach(link => {\n        const section = document.querySelector<HTMLDivElement>(link.hash);\n        if (!section) { return }\n        const isBelow = section.offsetTop - 100 <= fromTop\n        if (isBelow) currentPossibleAnchor = link\n      });\n\n      // Then set the active tag\n      subnavLinks.forEach(link => {\n        if (link === currentPossibleAnchor) {\n          link.classList.add(\"current\");\n        } else {\n          link.classList.remove(\"current\");\n        }\n      })\n    }\n\n    // Handles setting the scroll \n    window.addEventListener(\"scroll\", updateSidebar, { passive: true, capture: true });\n    updateSidebar()\n    setupTwoslashHovers()\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateSidebar)\n    }\n  }, [])\n\n  const joiner = (options: any[], opt: any) => {\n    const index = options.indexOf(opt)\n    if (index === options.length - 1) return null\n    return (index === options.length - 2) ? (<span> and </span>) : <span>, </span>\n  }\n\n  const anchor = (sectionName: string | undefined, anchor: string) => {\n    const prefixes = {\n      \"watchOptions\": \"watch\",\n      \"typeAcquisition\": \"type\"\n    }\n    if (!sectionName || !prefixes[sectionName]) return \"#\" + anchor\n    return `#${prefixes[sectionName]}-${anchor}`\n  }\n\n  const showCategories = (categories: Category[], sectionName?: string) => {\n    return <div className={sectionName ? \"tsconfig-quick-nav grouped\" : \"tsconfig-quick-nav\"}>\n      {sectionName ? <h4><code><a href={`#${sectionName}`}>\"{sectionName}\"</a></code></h4> : <div />}\n      {\n        categories.map(c => <div className=\"tsconfig-quick-nav-category\">\n          <h5 id={`quick-nav-${c.anchor}`}>{c.display}</h5>\n          <ol aria-labelledby={`quick-nav-${c.anchor}`}>\n            {c.options.map(o => <li><code><a href={anchor(sectionName, o.anchor)}>{o.anchor}</a>{joiner(c.options, o)}</code></li>)}\n          </ol>\n        </div>)\n      }\n    </div >\n  }\n  const categories = props.pageContext.categories\n\n  const root = categories.filter(c => c.anchor === \"Top Level\")\n  const watch = categories.filter(c => c.anchor === \"watchOptions\")\n  const typeAcq = categories.filter(c => c.anchor === \"typeAcquisition\")\n  const skip = [\"Top Level\", \"watchOptions\", \"typeAcquisition\"]\n  const compilerOpts = categories.filter(c => !skip.includes(c.anchor))\n\n  const [openInfo, setOpenInfo] = useState(false)\n  const toggleInfoState = () => setOpenInfo(!openInfo)\n\n\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n\n      <div className={`tsconfig raised main-content-block markdown button ${openInfo ? \"open\" : \"closed\"}`} >\n        <a href=\"#\" onClick={toggleInfoState}>\n          <h2>\n            <svg width=\"22\" height=\"13\" viewBox=\"0 0 22 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M0.5 1L11 11.5L21.5 1\" stroke=\"black\" />\n            </svg>\n            {props.pageContext.intro.header}</h2>\n          {!openInfo && <div className=\"preview\">{props.pageContext.intro.preview}</div>}\n        </a>\n\n        {openInfo && <div className=\"content\">  <div dangerouslySetInnerHTML={{ __html: props.pageContext.intro.html }} /></div>}\n      </div>\n\n      <div className=\"tsconfig main-content-block\">\n        <h2>Compiler Options</h2>\n        {showCategories(root)}\n        {showCategories(compilerOpts, \"compilerOptions\")}\n        {showCategories(watch, \"watchOptions\")}\n        {showCategories(typeAcq, \"typeAcquisition\")}\n      </div>\n\n\n      <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n\n    </Layout >\n  )\n}\n\n\nexport const pageQuery = graphql`\nquery TSConfigReferenceTemplate($tsconfigMDPath: String!) {\n\n  markdownRemark(fileAbsolutePath: {eq: $tsconfigMDPath} ) {\n    id\n    html\n    frontmatter {\n      permalink\n    }\n  }\n}\n`\n\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><TSConfigReferenceTemplateComponent {...props} /></Intl>\n"],"sourceRoot":""}