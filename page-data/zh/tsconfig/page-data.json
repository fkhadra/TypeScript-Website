{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/zh/tsconfig","result":{"data":{"markdownRemark":{"id":"06da8c02-f697-5d8b-9c46-cb0839724735","html":"<div class=\"tsconfig raised main-content-block markdown\"><article id='Top Level'>\n<h3 id=\"root-fields\" style=\"position:relative;\"><a href=\"#root-fields\" aria-label=\"root fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Fields</h3>\n<p>Starting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" id='files' href='#files' name='files' aria-labelledby=\"files-config\">#</a> Files - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an allowlist of files to include in the program. An error occurs if any of the files can’t be found.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {},\n  \"files\": [\n    \"core.ts\",\n    \"sys.ts\",\n    \"types.ts\",\n    \"scanner.ts\",\n    \"parser.ts\",\n    \"utilities.ts\",\n    \"binder.ts\",\n    \"checker.ts\",\n    \"tsc.ts\"\n  ]\n}\n</code></pre>\n<p>This is useful when you only have a small number of files and don’t need to use a glob to reference many files.\nIf you need that then use <a href=\"#include\"><code>include</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" id='extends' href='#extends' name='extends' aria-labelledby=\"extends-config\">#</a> Extends - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The value of <code>extends</code> is a string which contains a path to another configuration file to inherit from.\nThe path may use Node.js style resolution.</p>\n<p>The configuration from the base file are loaded first, then overridden by those in the inheriting config file. All relative paths found in the configuration file will be resolved relative to the configuration file they originated in.</p>\n<p>It’s worth noting that <code>files</code>, <code>include</code> and <code>exclude</code> from the inheriting config file <em>overwrite</em> those from the\nbase config file, and that circularity between configuration files is not allowed.</p>\n<p>Currently, the only top-level property that is excluded from inheritance is <a href=\"#references\"><code>references</code></a>.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p><code>configs/base.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true\n  }\n}\n</code></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"extends\": \"./configs/base\",\n  \"files\": [\"main.ts\", \"supplemental.ts\"]\n}\n</code></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"extends\": \"./tsconfig\",\n  \"compilerOptions\": {\n    \"strictNullChecks\": false\n  }\n}\n</code></pre>\n<p>Properties with relative paths found in the configuration file, which aren’t excluded from inheritance, will be resolved relative to the configuration file they originated in.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" id='include' href='#include' name='include' aria-labelledby=\"include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns to include in the program.\nThese filenames are resolved relative to the directory containing the <code>tsconfig.json</code> file.</p>\n<pre><code class=\"language-json\">{\n  \"include\": [\"src/**/*\", \"tests/**/*\"]\n}\n</code></pre>\n<p>Which would include:</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre><code>.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock\n</code></pre>\n<p><code>include</code> and <code>exclude</code> support wildcard characters to make glob patterns:</p>\n<ul>\n<li><code>*</code> matches zero or more characters (excluding directory separators)</li>\n<li><code>?</code> matches any one character (excluding directory separators)</li>\n<li><code>**/</code> matches any directory nested to any level</li>\n</ul>\n<p>If a glob pattern doesn’t include a file extension, then only files with supported extensions are included (e.g. <code>.ts</code>, <code>.tsx</code>, and <code>.d.ts</code> by default, with <code>.js</code> and <code>.jsx</code> if <code>allowJs</code> is set to true).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> <code>[]</code> if <code>files</code> is specified, otherwise <code>[\"**/*\"]</code></p>\n</li>\n<li><span>Related:</span><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='exclude' href='#exclude' name='exclude' aria-labelledby=\"exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns that should be skipped when resolving <code>include</code>.</p>\n<p><strong>Important</strong>: <code>exclude</code> <em>only</em> changes which files are included as a result of the <code>include</code> setting.\nA file specified by <code>exclude</code> can still become part of your codebase due to an <code>import</code> statement in your code, a <code>types</code> inclusion, a <code>/// &#x3C;reference</code> directive, or being specified in the <code>files</code> list.</p>\n<p>It is not a mechanism that <strong>prevents</strong> a file from being included in the codebase - it simply changes what the <code>include</code> setting finds.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>[\"node_modules\", \"bower_components\", \"jspm_packages\"]</code>, plus the value of <code>outDir</code> if one is specified.</p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" id='references' href='#references' name='references' aria-labelledby=\"references-config\">#</a> References - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Project references are a way to structure your TypeScript programs into smaller pieces.\nUsing Project References can greatly improve build and editor interaction times, enforce logical separation between components, and organize your code in new and improved ways.</p>\n<p>You can read more about how references works in the <a href=\"/docs/handbook/project-references.html\">Project References</a> section of the handbook</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='compilerOptions'>\n<h3 id=\"编译选项\" style=\"position:relative;\"><a href=\"#%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9\" aria-label=\"编译选项 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编译选项</h3>\n<p>这些选项是 TypeScript 配置的主要部分，它涵盖了语言应该如何工作。</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Basic_Options_6172\">项目选项</a></li>\n<li><a href=\"#Strict_Type_Checking_Options_6173\">严格模式</a></li>\n<li><a href=\"#Module_Resolution_Options_6174\">模块解析</a></li>\n<li><a href=\"#Source_Map_Options_6175\">Source Maps</a></li>\n<li><a href=\"#Additional_Checks_6176\">额外检查</a></li>\n<li><a href=\"#Experimental_Options_6177\">实验选项</a></li>\n<li><a href=\"#Advanced_Options_6178\">高级</a></li>\n<li><a href=\"#Command_line_Options_6171\">命令行参数</a></li>\n</ul></nav>\n<div>\n<div class='category'>\n<h2 id='Basic_Options_6172' ><a href='#Basic_Options_6172' name='Basic_Options_6172' aria-label=\"Link to the section 项目选项\" aria-labelledby='Basic_Options_6172'>#</a>项目选项</h2>\n<p>这些设置用于定义项目的运行时期望、JavaScript 的输出方式和位置，以及与现有 JavaScript 代码的集成级别。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" id='allowJs' href='#allowJs' name='allowJs' aria-labelledby=\"allowJs-config\">#</a> 允许 JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>允许 JavaScript 文件在你的工程中被引入，而不是仅仅允许 <code>.ts</code> 和 <code>.tsx</code> 文件。例如这个 JS 文件：</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: card.js\nexport const defaultCardDeck = \"Heart\";\n</code></pre>\n<p>当你引入到一个 TypeScript 文件时将会抛出一个错误：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2307\n// @filename: card.js\nmodule.exports.defaultCardDeck = \"Heart\";\n// ---cut---\n// @filename: index.ts\nimport { defaultCardDeck } from \"./card\";\n\nconsole.log(defaultCardDeck);\n</code></pre>\n<p>当启用 <code>allowJs</code> 后它将被正常引入：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: card.js\nmodule.exports.defaultCardDeck = \"Heart\";\n// ---cut---\n// @allowJs\n// @filename: index.ts\nimport { defaultCardDeck } from \"./card\";\n\nconsole.log(defaultCardDeck);\n</code></pre>\n<p>这个选项是一种可以允许 <code>.ts</code> 和 <code>.tsx</code> 与现有的 JavaScript 文件共存的方式。可以用于逐步将 TypeScript 文件逐步添加到 JS 工程中。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#checkJs' aria-label=\"Jump to compiler option info for checkJs\" ><code>checkJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" id='checkJs' href='#checkJs' name='checkJs' aria-labelledby=\"checkJs-config\">#</a> 检查 JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>与 <code>allowJs</code> 配合使用，当 <code>checkJs</code> 被启用时，JavaScript 文件中会报告错误。也就是相当于在项目中所有 JavaScript 文件顶部包含 <code>// @ts-check</code>。</p>\n<p>例如，根据 TypeScript 自带的 <code>parseFloat</code> 类型定义，这是不正确的 JavaScript：</p>\n<pre><code class=\"language-js\">// parseFloat 仅接受一个字符串作为参数\nmodule.exports.pi = parseFloat(3.124);\n</code></pre>\n<p>当引入到一个 TypeScript 模块：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @allowJs\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.124);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n</code></pre>\n<p>你将不会得到任何错误。但是如果你开启了 <code>checkJs</code> 选项，那么你可以从 JavaScript 文件中得到错误信息。</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\n// @allowjs: true\n// @checkjs: true\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.124);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowJs' aria-label=\"Jump to compiler option info for allowJs\" ><code>allowJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" id='composite' href='#composite' name='composite' aria-labelledby=\"composite-config\">#</a> 组合 - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>composite</code> 选项会强制执行某些约束，使得构建工具（包括 在 <code>--build</code> 模式下的 TypeScript 本身）可以快速确定一个工程是否已经建立。</p>\n<p>当此设置开启时：</p>\n<ul>\n<li>如果没有明确指定 <code>rootDir</code>，则默认为包含 <code>tsconfig.json</code> 文件的目录。</li>\n<li>所有实现的文件必须由 <code>include</code> 来匹配，或在 <code>files</code> 数组中指定。如果违反了这一约束，<code>tsc</code> 将告诉你哪些文件没有被指定。</li>\n<li><code>declaration</code> 默认为 <code>true</code>。</li>\n</ul>\n<p>你可以在<a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">手册</a>中找到关于 TypeScript 工程的文档。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.0\" href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" id='declaration' href='#declaration' name='declaration' aria-labelledby=\"declaration-config\">#</a> 声明 - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>为你工程中的每个 TypeScript 或 JavaScript 文件生成 <code>.d.ts</code> 文件。\n这些 <code>.d.ts</code> 文件是描述模块外部 API 的类型定义文件。\n像 TypeScript 这样的哦你根据可以通过 <code>.d.ts</code> 文件为非类型化的代码提供 intellisense 和精确的类型。</p>\n<p>当 <code>declaration</code> 设置为 <code>true</code> 时，用编译器执行下面的 TypeScript 代码：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">export let helloWorld = \"hi\";\n</code></pre>\n<p>将会生成如下这样的 <code>index.js</code> 文件：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nexport let helloWorld = \"hi\";\n</code></pre>\n<p>以及一个相应的 <code>helloWorld.d.ts</code>：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\nexport let helloWorld = \"hi\";\n</code></pre>\n<p>当使用 <code>.d.ts</code> 文件处理 JavaScript 文件时，你可能需要使用 <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a> 或 <a href=\"#outDir\"><code>outDir</code></a> 来确保 JavaScript 文件不会被覆盖。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code>, unless <code>composite</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#declarationDir' aria-label=\"Jump to compiler option info for declarationDir\" ><code>declarationDir</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap' aria-labelledby=\"declarationMap-config\">#</a> Declaration Map - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Generates a source map for <code>.d.ts</code> files which map back to the original <code>.ts</code> source file.\nThis will allow editors such as VS Code to go to the original <code>.ts</code> file when using features like <em>Go to Definition</em>.</p>\n<p>You should strongly consider turning this on if you’re using project references.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration' aria-labelledby=\"downlevelIteration-config\">#</a> 迭代器降级 - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>‘降级’ 是 TypeScript 的术语，指用于转换到旧版本的 JavaScript。\n这个选项是为了在旧版 Javascript 运行时上更准确的实现现代 JavaScript 迭代器的概念。</p>\n<p>ECMAScript 6 增加了几个新的迭代器原语：<code>for / of</code> 循环（<code>for (el of arr)</code>），数组展开（<code>[a, ...b]</code>），参数展开（<code>fn(...args)</code>）和 <code>Symbol.iterator</code>。</p>\n<p>如果 <code>Symbol.iterator</code> 存在的话，<code>--downlevelIteration</code> 将允许在 ES5 环境更准确的使用这些迭代原语。</p>\n<h4 id=\"例：for--of-的效果\" style=\"position:relative;\"><a href=\"#%E4%BE%8B%EF%BC%9Afor--of-%E7%9A%84%E6%95%88%E6%9E%9C\" aria-label=\"例：for  of 的效果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例：<code>for / of</code> 的效果</h4>\n<p>对于 TypeScript 代码：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p>如果没有启用 <code>downlevelIteration</code>，<code>for / of</code> 循环将被降级为传统的 <code>for</code> 循环：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES5\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p>这通常是人们所期望的，但是它并不是 100% 符合 ECMAScript 迭代器协议。\n某些字符串，例如 emoji （😜），其 <code>.length</code> 为 2（甚至更多），但在 <code>for-of</code> 循环中应只有一次迭代。\n可以在 <a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">Jonathan New 的这篇文章中</a> 找到更详细的解释。</p>\n<p>当 <code>downlevelIteration</code> 启用时，TypeScript 将会使用辅助函数来检查 <code>Symbol.iterator</code> 的实现（无论是原生实现还是 polyfill）。\n如果没有实现，则将会回退到基于索引的迭代。</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES5\n// @downlevelIteration\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p>你也可以通过 <a href=\"#importHelpers\"><code>importHelpers</code></a> 来使用 <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> 以减少被内联的 JavaScript 的数量：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES5\n// @downlevelIteration\n// @importHelpers\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p><strong>注：</strong> 如果在运行时不存在 <code>Symbol.iterator</code>，启用 <code>downlevelIteration</code> 将不会提高合规性。</p>\n<h4 id=\"例：数组展开的效果\" style=\"position:relative;\"><a href=\"#%E4%BE%8B%EF%BC%9A%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80%E7%9A%84%E6%95%88%E6%9E%9C\" aria-label=\"例：数组展开的效果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例：数组展开的效果</h4>\n<p>这是一个数组展开：</p>\n<pre><code class=\"language-js\">// 构建一个新的数组，其元素首先为 1，然后是 arr2 的元素。\nconst arr = [1, ...arr2];\n</code></pre>\n<p>根据描述，听起来很容易降级到 ES5：</p>\n<pre><code class=\"language-js\">// The same, right?\nconst arr = [1].concat(arr2);\n</code></pre>\n<p>但是在某些罕见的情况下会明显不同。例如如果数组中有一个“洞”，缺失的索引在展开时将创建一个 <em>自己的</em> 属性，但若使用 <code>concat</code> 则不会：</p>\n<pre><code class=\"language-js\">// 构建一个元素 `1` 不存在的数组\nlet missing = [0, , 1];\nlet spreaded = [...missing];\nlet concated = [].concat(missing);\n\n// true\n\"1\" in spreaded;\n// false\n\"1\" in concated;\n</code></pre>\n<p>就像 <code>for / of</code> 一样，<code>downlevelIteration</code> 将使用 <code>Symbol.iterator</code>（如果存在的话）来更准确的模拟 ES6 的行为。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers' aria-labelledby=\"importHelpers-config\">#</a> 导入辅助 - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>对于某些降级行为，TypeScript 使用一些辅助代码来进行操作。例如继承类，展开数组或对象，以及异步操作。\n默认情况下，这些辅助代码被插入到使用它们的文件中。\n如果在许多不同的模块中使用相同的辅助代码，则可能会导致代码重复。</p>\n<p>如果启用了 <code>importHelpers</code> 选项，这些辅助函数将从 <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> 中被导入。\n你需要确保 <code>tslib</code> 模块在运行时可以被导入。\n这只影响模块，全局脚本文件不会尝试导入模块。</p>\n<p>例如，对于如下 TypeScript 代码：</p>\n<pre><code class=\"language-ts\">export function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>开启 <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> 并且 <code>importHelpers</code> 仍为 <code>false</code>：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @downleveliteration\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>同时开始 <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> 和 <code>importHelpers</code>：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @downleveliteration\n// @importhelpers\n// @noErrors\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>当你提供了自行实现的这些函数时，你可以使用 <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a>。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noEmitHelpers' aria-label=\"Jump to compiler option info for noEmitHelpers\" ><code>noEmitHelpers</code></a>, <a href='#downlevelIteration' aria-label=\"Jump to compiler option info for downlevelIteration\" ><code>downlevelIteration</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" id='incremental' href='#incremental' name='incremental' aria-labelledby=\"incremental-config\">#</a> 增量 - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>使 TypeScript 将上次编译的工程图信息保存到磁盘上的文件中。这将会在您编译输出的同一文件夹中创建一系列 <code>.tsbuildinfo</code> 文件。\n它们不会再运行时被您的 JavaScript 使用，并且可以被安全的删除。\n你可以在 <a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 发布日志</a> 中获取更多关于该选项的内容。</p>\n<p>可以使用 <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a> 来控制 <code>.tsbuildinfo</code> 文件被编译到哪个文件夹。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <code>composite</code>, <code>false</code> otherwise</p>\n</li>\n<li><span>Related:</span><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules' aria-labelledby=\"isolatedModules-config\">#</a> 孤立模块 - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>虽然你可以使用 TypeScript 来从 TypeScript 中生成 JavaScript 代码，但是使用其他转译器例如 <a href=\"https://babeljs.io\">Babel</a> 也很常见。\n但其他转译器一次只能在一个文件上操作，这意味着它们不能进行基于完全理解类型系统后的代码转译。\n这个限制也同样适用于被一些构建工具使用的 TypeScript 的 <code>ts.transpileModule</code> 接口。</p>\n<p>这些限制可能会导致一些 TypeScript 特性的运行时问题，例如 <code>const enum</code> 和 <code>namespace</code>。\n设置 <code>isolatedModules</code> 选项后，TypeScript 将会在当你写的某些代码不能被单文件转译的过程正确处理时警告你。</p>\n<p>它不会改变你代码的行为，也不会影响 TypeScript 的检查和代码生成过程。</p>\n<p>一些当 <code>isolatedModules</code> 被启用时不工作的例子：</p>\n<h4 id=\"导出非值标识符\" style=\"position:relative;\"><a href=\"#%E5%AF%BC%E5%87%BA%E9%9D%9E%E5%80%BC%E6%A0%87%E8%AF%86%E7%AC%A6\" aria-label=\"导出非值标识符 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>导出非值标识符</h4>\n<p>在 TypeScript 中，你可以引入一个 <em>类型</em>，然后再将其导出：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\nimport { someType, someFunction } from \"someModule\";\n\nsomeFunction();\n\nexport { someType, someFunction };\n</code></pre>\n<p>由于 <code>someType</code> 并没有值，所以生成的 <code>export</code> 将不会导出它（否则将导致 JavaScript 运行时的错误）：</p>\n<pre><code class=\"language-js\">export { someFunction };\n</code></pre>\n<p>单文件转译器并不知道 <code>someType</code> 是否会产生一个值，所以导出一个只指向类型的名称会是一个错误。</p>\n<h4 id=\"非模块文件\" style=\"position:relative;\"><a href=\"#%E9%9D%9E%E6%A8%A1%E5%9D%97%E6%96%87%E4%BB%B6\" aria-label=\"非模块文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>非模块文件</h4>\n<p>如果设置了 <code>isolatedModules</code>，则所有的实现文件必须是 <em>模块</em> （也就是它有某种形式的 <code>import</code>/<code>export</code>）。如果任意文件不是模块就会发生错误：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 1208\n// @isolatedModules\nfunction fn() {}\n</code></pre>\n<p>此限制不适用于 <code>.d.ts</code> 文件</p>\n<h4 id=\"指向-const-enum-成员\" style=\"position:relative;\"><a href=\"#%E6%8C%87%E5%90%91-const-enum-%E6%88%90%E5%91%98\" aria-label=\"指向 const enum 成员 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>指向 <code>const enum</code> 成员</h4>\n<p>在 TypeScript 中，当你引用一个 <code>const enum</code> 的成员时，该引用在生成的 JavaScript 中将会被其实际值所代替。这会将这样的 TypeScript 代码：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n</code></pre>\n<p>转换为这样的 JavaScript：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments\ndeclare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n</code></pre>\n<p>在不知道这些成员值的情况下，其他转译器不能替换对 <code>Numbers</code> 的引用。如果无视的话则会导致运行时错误（运行时没有 <code>Numbers</code>） 对象。\n正因如此，当启用 <code>isolatedModules</code> 时，引用环境中的 <code>const enum</code> 成员将会是一个错误。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" id='jsx' href='#jsx' name='jsx' aria-labelledby=\"jsx-config\">#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>控制 JSX 在 JavaScript 文件中的输出方式。\n这只影响 <code>.tsx</code> 文件的 JS 文件输出。</p>\n<ul>\n<li><code>react</code>: 将 JSX 改为等价的对 <code>React.createElement</code> 的调用并生成 <code>.js</code> 文件。</li>\n<li><code>react-jsx</code>: 改为 <code>__jsx</code> 调用并生成 <code>.js</code> 文件。</li>\n<li><code>react-jsxdev</code>: 改为 <code>__jsx</code> 调用并生成 <code>.js</code> 文件。</li>\n<li><code>preserve</code>: 不对 JSX 进行改变并生成 <code>.jsx</code> 文件。</li>\n<li><code>react-native</code>: 不对 JSX 进行改变并生成 <code>.js</code> 文件。</li>\n</ul>\n<h3 id=\"例\" style=\"position:relative;\"><a href=\"#%E4%BE%8B\" aria-label=\"例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例</h3>\n<p>示例代码：</p>\n<pre><code class=\"language-tsx\">export const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>默认为： <code>\"react\"</code></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>保留: <code>\"preserve\"</code></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: preserve\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>React Native: <code>\"react-native\"</code></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-native\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>React 17 转换: <code>\"react-jsx\"</code><sup><a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">[1]</a></sup></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-jsx\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>React 17 开发模式转换: <code>\"react-jsxdev\"</code><sup><a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">[1]</a></sup></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-jsxdev\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Allowed:</span><p><code>react</code>,<br/><code>react-jsx</code>,<br/><code>react-jsxdev</code>,<br/><code>react-native</code>,<br/><code>preserve</code></p>\n</li>\n<li><span>Related:</span><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a>, <a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.2\" href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" id='lib' href='#lib' name='lib' aria-labelledby=\"lib-config\">#</a> 库 - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript 包括一组默认的内建 JS 接口（例如 <code>Math</code>）的类型定义，以及在浏览器环境中存在的对象的类型定义（例如 <code>document</code>）。\nTypeScript 还包括与你指定的 <code>target</code> 选项相匹配的较新的 JS 特性的 API。例如如果<code>target</code> 为 <code>ES6</code> 或更新的环境，那么 <code>Map</code> 的类型定义是可用的。</p>\n<p>你可能出于某些原因改变这些：</p>\n<ul>\n<li>你的程序不运行在浏览器中，因此你不想要 <code>\"dom\"</code> 类型定义。</li>\n<li>你的运行时平台提供了某些 JavaScript API 对象（也许通过 polyfill），但还不支持某个 ECMAScript 版本的完整语法。</li>\n<li>你有一些 （但不是全部）对于更高级别的 ECMAScript 版本的 polyfill 或本地实现。</li>\n</ul>\n<h3 id=\"高阶库\" style=\"position:relative;\"><a href=\"#%E9%AB%98%E9%98%B6%E5%BA%93\" aria-label=\"高阶库 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>高阶库</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>ES3 和 ES5 的核心功能定义</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>ES2015 中额外提供的 API (又被称为 ES6) —— <code>array.find</code>， <code>Promise</code>，<code>Proxy</code>，<code>Symbol</code>，<code>Map</code>，<code>Set</code>，<code>Reflect</code> 等。</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>ES2015 的别名。</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>ES2016 中额外提供的 API —— <code>array.include</code> 等。</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>ES2016 的别名。</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>ES2017 中额外提供的 API —— <code>Object.entries</code>，<code>Object.values</code>，<code>Atomics</code>，<code>SharedArrayBuffer</code>，<code>date.formatToParts</code>，<code>typed arrays</code> 等。</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>ES2018 中额外提供的 API —— <code>async iterables</code>，<code>promise.finally</code>，<code>Intl.PluralRules</code>，<code>rexexp.groups</code> 等。</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>ES2019 中额外提供的 API —— <code>array.flat</code>，<code>array.flatMap</code>，<code>Object.fromEntries</code>，<code>string.trimStart</code>，<code>string.trimEnd</code> 等。</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>ES2020 中额外提供的 API —— <code>string.matchAll</code> 等。</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>ESNext 中额外提供的 API —— 随着 JavaScript 的发展，这些会发生变化。</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a> 定义 —— <code>window</code>，<code>document</code> 等。</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a> 上下文中存在的 API。</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td><a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a> 的 API。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"库的各个组件\" style=\"position:relative;\"><a href=\"#%E5%BA%93%E7%9A%84%E5%90%84%E4%B8%AA%E7%BB%84%E4%BB%B6\" aria-label=\"库的各个组件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>库的各个组件</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>此列表有可能会过期，你可以在 <a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">TypeScript 源码中</a>查看完整列表。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>See main content</p>\n</li>\n<li><span>Related:</span><p><a href='#noLib' aria-label=\"Jump to compiler option info for noLib\" ><code>noLib</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" id='module' href='#module' name='module' aria-labelledby=\"module-config\">#</a> 模块 - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>设置程序的模块系统。在 <a href='/docs/handbook/modules.html'>模块</a> 参考页面获取更多信息。你很可能要用 <code>\"CommonJS\"</code>。</p>\n<p>改变 <code>module</code> 可能会影响 <a href=\"#moduleResolution\"><code>moduleResolution</code></a>，它也有 <a href=\"/docs/handbook/module-resolution.html\">一个参考页</a>。</p>\n<p>下面是这个文件的一些输出例子：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: commonjs\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: umd\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: amd\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: system\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"esnext\" style=\"position:relative;\"><a href=\"#esnext\" aria-label=\"esnext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: esnext\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2020</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: es2020\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h3 id=\"none\" style=\"position:relative;\"><a href=\"#none\" aria-label=\"none permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>None</code></h3>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: none\n// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p><code>CommonJS</code> (default if <code>target</code> is <code>ES3</code> or <code>ES5</code>),<br/>,<br/><code>ES2015</code>,<br/><code>ES2020</code>,<br/>,<br/><code>None</code>,<br/><code>UMD</code>,<br/><code>AMD</code>,<br/><code>System</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Related:</span><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" id='noEmit' href='#noEmit' name='noEmit' aria-labelledby=\"noEmit-config\">#</a> 禁止生成 - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>禁止编译器生成文件，例如 JavaScript 代码，source-map 或声明。</p>\n<p>这为另一个工具提供了空间，例如用 <a href=\"https://babeljs.io\">Babel</a> 或 <a href=\"https://github.com/swc-project/swc\">swc</a> 来处理将 TypeScript 转换为可以在 JavaScript 环境中运行的文件的过程。</p>\n<p>然后你可以使用 TypeScript 作为提供编辑器集成的工具，或用来对源码进行类型检查。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" id='outDir' href='#outDir' name='outDir' aria-labelledby=\"outDir-config\">#</a> 输出目录 - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>如果被指定，<code>.js</code> （以及 <code>.d.ts</code>, <code>.js.map</code> 等）将会被生成到这个目录下。\n原始源文件的目录将会被保留，如果计算出的根目录不是你想要的，可以查看 <a href=\"#rootDir\">rootDir</a>。</p>\n<p>如果没有指定，<code>.js</code> 将被生成至于生成它们的 <code>.ts</code> 文件相同的目录中：</p>\n<pre><code class=\"language-sh\">$ tsc\n\nexample\n├── index.js\n└── index.ts\n</code></pre>\n<p>使用类似这样的 <code>tsconfig.json</code>：</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\"\n  }\n}\n</code></pre>\n<p>使用这些配置运行 <code>tsc</code> 时，会将文件移动到指定的 <code>dist</code> 文件夹中：</p>\n<pre><code class=\"language-sh\">$ tsc\n\nexample\n├── dist\n│   └── index.js\n├── index.ts\n└── tsconfig.json\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" id='outFile' href='#outFile' name='outFile' aria-labelledby=\"outFile-config\">#</a> 输出文件 - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>如果被指定，所有 <em>全局</em> （非模块） 文件将被合并到指定的单个输出文件中。</p>\n<p>如果 <code>module</code> 为 <code>system</code> 或 <code>amd</code>，所有模块文件也将在所有全局内容之后被合并到这个文件中。</p>\n<p>注：除非 <code>module</code> 是 <code>None</code>，<code>System</code> 或 <code>AMD</code>， 否则不能使用 <code>outFile</code>。\n这个选项 <em>不能</em> 用来打包 CommonJS 或 ES6 模块。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" id='plugins' href='#plugins' name='plugins' aria-labelledby=\"plugins-config\">#</a> 插件 - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>可在编辑器内运行的语言服务插件列表。</p>\n<p>语言服务插件是一种基于现有 TypeScript 文件向用户提供额外信息的方法。它们可以改进 TypeScript 和编辑器之间的现有信息，或提供自己的错误信息。</p>\n<p>例如：</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — 增加了用模板字符串做 SQL 构建器时的风格检查。</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — 在目标字符串中提供 CSS 风格检查。</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — 在编译器的输出中提供 eslint 的错误信息和修复信息。</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> —\n在 GraphQL 查询目标字符串中提供验证和补全。</li>\n</ul>\n<p>VS Code 可以让一个扩展 <a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">自动包含语言服务插件</a>，所以你可以在编辑器中运行一些插件，而不需要在 <code>tsconfig.json</code> 中指定他们。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" id='removeComments' href='#removeComments' name='removeComments' aria-labelledby=\"removeComments-config\">#</a> 移除注释 - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>当转换为 JavaScript 时，忽略所有 TypeScript 文件中的注释。默认为 <code>false</code>。</p>\n<p>例如，这是一个有 JSDoc 注释的 TypeScript 文件：</p>\n<pre><code class=\"language-ts\">/** 'Hello world' 的葡萄牙语翻译 */\nexport const helloWorldPTBR = \"Olá Mundo\";\n</code></pre>\n<p>当然 <code>removeComments</code> 被设置为 <code>true</code>：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments: true\n/** 'Hello world' 的葡萄牙语翻译 */\nexport const helloWorldPTBR = \"Olá Mundo\";\n</code></pre>\n<p>未设置 <code>removeComments</code> 或被设置为 <code>false</code>：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments: false\n/** 'Hello world' 的葡萄牙语翻译 */\nexport const helloWorldPTBR = \"Olá Mundo\";\n</code></pre>\n<p>这意味着你的注释将呈现在 JavaScript 中。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" id='rootDir' href='#rootDir' name='rootDir' aria-labelledby=\"rootDir-config\">#</a> 根目录 - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>默认</strong>: 所有输入的非声明文件中的最长公共路径。若 <code>composite</code> 被指定，则是包含 <code>tsconfig.json</code> 文件的目录。</p>\n<p>当 TypeScript 编译文件时，它在输出目录中保持与输入目录中相同的目录结构。</p>\n<p>例如，假设你有一些输入文件：</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n</code></pre>\n<p><code>rootDir</code> 推断的结构是所有非声明输入文件的最长公共路径，在例子中为 <code>core/</code>。</p>\n<p>如果你的 <code>outDir</code> 是 <code>dist</code>，TypeScript 将会生成这样的文件树：</p>\n<pre><code>MyProj\n├── dist\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n</code></pre>\n<p>但你可能希望让 <code>core</code> 成为输出目录结构的一部分。\n通过在 <code>tsconfig.json</code> 中指定 <code>rootDir: \".\"</code>，TypeScript 将会生成这样的文件树：</p>\n<pre><code>MyProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js\n</code></pre>\n<p>重要的是，<code>rootDir</code> <strong>不会影响哪些文件被包含在编译中</strong>。\n它与 <code>tsconfig.json</code> 中 <code>include</code>，<code>exclude</code>，or <code>files</code> 的选项没有关系。</p>\n<p>请注意，TypeScript 永远不会将输出文件写入 <code>outDir</code> 之外的目录，也不会忽略生成某些文件。\n处于这个原因，<code>rootDir</code> 页强制要求所有需要被生成的文件都在 <code>rootDir</code> 路径下。</p>\n<p>例如，假设你有这样的文件树：</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts\n</code></pre>\n<p>将 <code>rootDir</code> 指定为 <code>core</code>，<em>并且</em> 将 <code>include</code> 指定为 <code>*</code> 是错误的，因为它会创建一个文件（<code>helpers.ts</code>），这个文件会被生成在 <code>outDir</code> <em>之外</em> （即 <code>../helpers.js</code>）。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap' aria-labelledby=\"sourceMap-config\">#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>启用生成 <a href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\">sourcemap files</a>。\n这些文件允许调试器和其他工具在使用实际生成的 JavaScript 文件时，显示原始的 TypeScript 代码。\nSource map 文件以 <code>.js.map</code> （或 <code>.jsx.map</code>）文件的形式被生成到相应的 <code>.js</code> 文件输出旁。</p>\n<p><code>.js</code> 文件将会包含一个 sourcemap 注释，以向外部工具表明文件在哪里。例如：</p>\n<pre><code class=\"language-ts\">// helloWorld.ts\nexport declare const helloWorld = \"hi\";\n</code></pre>\n<p>在将 <code>sourceMap</code> 设置为 <code>true</code> 的情况下编译，会生成如下 JavaScript 文件：</p>\n<pre><code class=\"language-js\">// helloWorld.js\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.helloWorld = \"hi\";\n//# sourceMappingURL=// helloWorld.js.map\n</code></pre>\n<p>并且会生成这个 json 格式的 sourcemap</p>\n<pre><code class=\"language-json\">// helloWorld.js.map\n{\n  \"version\": 3,\n  \"file\": \"ex.js\",\n  \"sourceRoot\": \"\",\n  \"sources\": [\"../ex.ts\"],\n  \"names\": [],\n  \"mappings\": \";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" id='target' href='#target' name='target' aria-labelledby=\"target-config\">#</a> 编译目标 - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>现代浏览器支持全部 ES6 的功能，所以 <code>ES6</code> 是一个不错的选择。\n如果你的代码部署在旧的环境中，你可以选择设置一个更低的目标；如果你的代码保证会运行在新的环境中，你可以选择一个更高的目标。</p>\n<p><code>target</code> 的配置将会改变哪些 JS 特性会被降级，而哪些会被完整保留\n例如，如果 <code>target</code> 是 ES5 或更低版本，箭头函数 <code>() => this</code> 会被转换为等价的 <code>函数</code> 表达式。</p>\n<p>改变 <code>target</code> 也会改变 <a href=\"#lib\"><code>lib</code></a> 选项的默认值。\n你可以根据需要混搭 <code>target</code> 和 <code>lib</code> 的配置，你也可以为了方便只设置 <code>target</code>。</p>\n<p>如果你只使用 Node.js，这里推荐基于 Node 版本的 <code>target</code>：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>支持的编译目标</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 8</td>\n<td><code>ES2017</code></td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td><code>ES2018</code></td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td><code>ES2019</code></td>\n</tr>\n</tbody>\n</table>\n<p>这些基于 <a href=\"https://node.green\">node.green</a> 的支持数据库。</p>\n<p>特殊的 <code>ESNext</code> 值代表你的 TypeScript 所支持的最高版本。这个配置应当被谨慎使用，因为它在不同的 TypeScript 版本之间的含义不同，并且会导致升级更难预测。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>ES3</code></p>\n</li>\n<li><span>Allowed:</span><p><code>ES3</code> (default),<br/><code>ES5</code>,<br/><code>ES6</code>/<code>ES2015</code> (synonymous),<br/><code>ES7</code>/<code>ES2016</code>,<br/><code>ES2017</code>,<br/><code>ES2018</code>,<br/><code>ES2019</code>,<br/><code>ES2020</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile' aria-labelledby=\"tsBuildInfoFile-config\">#</a> TS 构建信息文件 - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>这个选项可以让您指定一个文件来存储增量编译信息，以作为复合工程的一部分，从而可以更快的构建更大的 TypeScript 代码库。你可以 <a href=\"/docs/handbook/project-references.html\">在手册</a> 阅读更多关于复合工程的内容。</p>\n<p>这个选项提供了一种方法，可以配置 TypeScript 追踪它存储在磁盘上的文件的位置，用来指示项目的构建状态。—— 默认情况下，它们与你生成的 JavaScript 在同一个文件夹中。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>.tsbuildinfo</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Strict_Type_Checking_Options_6173' ><a href='#Strict_Type_Checking_Options_6173' name='Strict_Type_Checking_Options_6173' aria-label=\"Link to the section 严格模式\" aria-labelledby='Strict_Type_Checking_Options_6173'>#</a>严格模式</h2>\n<p>我们推荐使用<a href=\"#strict\">编译器选项<code>strict</code></a>来启用每个可能的改进。</p>\n<p>TypeScript 支持大量的 JavaScript 模式，默认选项允许相当大的灵活性来适应这些模式。\n然而，很多时候这些技巧的使用与保证代码的安全性和可扩展性的目标相冲突。</p>\n<p>由于 TS 支持各种类型的 JavaScript，升级到新版本的 TypeScript 时可能出现两种新错误：：</p>\n<p>-代码中已存在的错误：因为语言已经改进了对 JavaScript 的理解，TypeScript 发现了它。 -处理新一块问题的一套新错误。</p>\n<p>TypeScript 通常会为后一类错误添加一个编译器选项，默认情况下这些选项是不启用的。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict' aria-labelledby=\"alwaysStrict-config\">#</a> Always Strict - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">ECMAScript strict</a> mode was introduced in ES5 and provides behavior tweaks to the runtime of the JavaScript engine to improve performance, and makes a set of errors throw instead of silently ignoring them.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny' aria-labelledby=\"noImplicitAny-config\">#</a> No Implicit Any - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In some cases where no type annotations are present, TypeScript will fall back to a type of <code>any</code> for a variable when it cannot infer the type.</p>\n<p>This can cause some errors to be missed, for example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: false\nfunction fn(s) {\n  // No error?\n  console.log(s.subtr(3));\n}\nfn(42);\n</code></pre>\n<p>Turning on <code>noImplicitAny</code> however TypeScript will issue an error whenever it would have inferred <code>any</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7006\nfunction fn(s) {\n  console.log(s.subtr(3));\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis' aria-labelledby=\"noImplicitThis-config\">#</a> No Implicit This - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Raise error on ‘this’ expressions with an implied ‘any’ type.</p>\n<p>For example, the class below returns a function which tries to access <code>this.width</code> and <code>this.height</code> – but the context\nfor <code>this</code> inside the function inside <code>getAreaFunction</code> is not the instance of the Rectangle.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2683\nclass Rectangle {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  getAreaFunction() {\n    return function () {\n      return this.width * this.height;\n    };\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" id='strict' href='#strict' name='strict' aria-labelledby=\"strict-config\">#</a> Strict - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The <code>strict</code> flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.\nTurning this on is equivalent to enabling all of the <em>strict mode family</em> options, which are outlined below.\nYou can then turn off individual strict mode family checks as needed.</p>\n<p>Future versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program.\nWhen appropriate and possible, a corresponding flag will be added to disable that behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#alwaysStrict' aria-label=\"Jump to compiler option info for alwaysStrict\" ><code>alwaysStrict</code></a>, <a href='#strictNullChecks' aria-label=\"Jump to compiler option info for strictNullChecks\" ><code>strictNullChecks</code></a>, <a href='#strictBindCallApply' aria-label=\"Jump to compiler option info for strictBindCallApply\" ><code>strictBindCallApply</code></a>, <a href='#strictFunctionTypes' aria-label=\"Jump to compiler option info for strictFunctionTypes\" ><code>strictFunctionTypes</code></a>, <a href='#strictPropertyInitialization' aria-label=\"Jump to compiler option info for strictPropertyInitialization\" ><code>strictPropertyInitialization</code></a>, <a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a>, <a href='#noImplicitThis' aria-label=\"Jump to compiler option info for noImplicitThis\" ><code>noImplicitThis</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply' aria-labelledby=\"strictBindCallApply-config\">#</a> Strict Bind Call Apply - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will check that the built-in methods of functions <code>call</code>, <code>bind</code>, and <code>apply</code> are invoked with correct argument for the underlying function:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictBindCallApply: true\n// @errors: 2345\n\n// With strictBindCallApply on\nfunction fn(x: string) {\n  return parseInt(x);\n}\n\nconst n1 = fn.call(undefined, \"10\");\n\nconst n2 = fn.call(undefined, false);\n</code></pre>\n<p>Otherwise, these functions accept any arguments and will return <code>any</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictBindCallApply: false\n\n// With strictBindCallApply off\nfunction fn(x: string) {\n  return parseInt(x);\n}\n\n// Note: No error; return type is 'any'\nconst n = fn.call(undefined, false);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.2\" href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes' aria-labelledby=\"strictFunctionTypes-config\">#</a> Strict Function Types - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, this flag causes functions parameters to be checked more correctly.</p>\n<p>Here’s a basic example with <code>strictFunctionTypes</code> off:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictFunctionTypes: false\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\ntype StringOrNumberFunc = (ns: string | number) => void;\n\n// Unsafe assignment\nlet func: StringOrNumberFunc = fn;\n// Unsafe call - will crash\nfunc(10);\n</code></pre>\n<p>With <code>strictFunctionTypes</code> <em>on</em>, the error is correctly detected:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\ntype StringOrNumberFunc = (ns: string | number) => void;\n\n// Unsafe assignment is prevented\nlet func: StringOrNumberFunc = fn;\n</code></pre>\n<p>During development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM.\nBecause of this, the setting only applies to functions written in <em>function</em> syntax, not to those in <em>method</em> syntax:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Methodish = {\n  func(x: string | number): void;\n};\n\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\n// Ultimately an unsafe assignment, but not detected\nconst m: Methodish = {\n  func: fn,\n};\nm.func(10);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.6\" href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks' aria-labelledby=\"strictNullChecks-config\">#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When <code>strictNullChecks</code> is <code>false</code>, <code>null</code> and <code>undefined</code> are effectively ignored by the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>, <code>null</code> and <code>undefined</code> have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example with this TypeScript code, <code>users.find</code> has no guarantee that it will actually find a user, but you can\nwrite code as though it will:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictNullChecks: false\n// @target: ES2015\ndeclare const loggedInUsername: string;\n\nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n\nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\n</code></pre>\n<p>Setting <code>strictNullChecks</code> to <code>true</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339 2532\n// @target: ES2020\n// @strictNullChecks\ndeclare const loggedInUsername: string;\n\nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n\nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\n</code></pre>\n<p>The second example failed because the array’s <code>find</code> function looks a bit like this simplification:</p>\n<pre><code class=\"language-ts\">// When strictNullChecks: true\ntype Array = {\n  find(predicate: (value: any, index: number) => boolean): S | undefined;\n};\n\n// When strictNullChecks: false the undefined is removed from the type system,\n// allowing you to write code which assumes it always found a result\ntype Array = {\n  find(predicate: (value: any, index: number) => boolean): S;\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization' aria-labelledby=\"strictPropertyInitialization-config\">#</a> Strict Property Initialization - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2564\nclass UserAccount {\n  name: string;\n  accountType = \"user\";\n\n  email: string;\n  address: string | undefined;\n\n  constructor(name: string) {\n    this.name = name;\n    // Note that this.email is not set\n  }\n}\n</code></pre>\n<p>In the above case:</p>\n<ul>\n<li><code>this.name</code> is set specifically.</li>\n<li><code>this.accountType</code> is set by default.</li>\n<li><code>this.email</code> is not set and raises an error.</li>\n<li><code>this.address</code> is declared as potentially <code>undefined</code> which means it does not have to be set.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Module_Resolution_Options_6174' ><a href='#Module_Resolution_Options_6174' name='Module_Resolution_Options_6174' aria-label=\"Link to the section 模块解析\" aria-labelledby='Module_Resolution_Options_6174'>#</a>模块解析</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports' aria-labelledby=\"allowSyntheticDefaultImports-config\">#</a> 允许合成默认导入 - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>当设置为 true， 并且模块<strong>没有</strong>显式指定默认导出时，<code>allowSyntheticDefaultImports</code> 可以让你这样写导入：</p>\n<pre><code class=\"language-ts\">import React from \"react\";\n</code></pre>\n<p>而不是：</p>\n<pre><code class=\"language-ts\">import * as React from \"react\";\n</code></pre>\n<p>例如：<code>allowSyntheticDefaultImports</code> 不为 true 时：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 1259 1192\n// @checkJs\n// @allowJs\n// @esModuleInterop: false\n// @filename: utilFunctions.js\n// @noImplicitAny: false\nconst getStringLength = (str) => str.length;\n\nmodule.exports = {\n  getStringLength,\n};\n\n// @filename: index.ts\nimport utils from \"./utilFunctions\";\n\nconst count = utils.getStringLength(\"Check JS\");\n</code></pre>\n<p>这段代码会引发一个错误，因为没有“default”对象可以导入，即使你认为应该有。\n为了使用方便，Babel 这样的转译器会在没有默认导出时自动为其创建，使模块看起来更像：</p>\n<pre><code class=\"language-js\">// @filename: utilFunctions.js\nconst getStringLength = (str) => str.length;\nconst allFunctions = {\n  getStringLength,\n};\n\nmodule.exports = allFunctions;\nmodule.exports.default = allFunctions;\n</code></pre>\n<p>本选项不会影响 TypeScript 生成的 JavaScript，它仅对类型检查起作用。当你使用 Babel 生成额外的默认导出，从而使模块的默认导出更易用时，本选项可以让 TypeScript 的行为与 Babel 一致。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === \"system\" or esModuleInterop</p>\n</li>\n<li><span>Related:</span><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess' aria-labelledby=\"allowUmdGlobalAccess-config\">#</a> 允许 Umd 全局访问 - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>当 <code>allowUmdGlobalAccess</code> 设置为 true 时，将允许你在模块文件中以全局变量的形式访问 UMD 的导出。\n模块文件是具有或同时导入、导出的文件。当未设置这个选项时，使用 UMD 模块的导出需要首先导入声明。</p>\n<p>一个典型场景是：在一个 Web 项目中， 您知道特定的库（如 jQuery 或 Lodash ）在运行时总是可用的，但您无法通过导入来使用他们。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.5\" href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl' aria-labelledby=\"baseUrl-config\">#</a> 基准目录 - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>可以让您设置解析非绝对路径模块名时的基准目录。</p>\n<p>你可以定义一个根目录，以进行绝对路径文件解析。例如：</p>\n<pre><code>baseUrl\n├── ex.ts\n├── hello\n│   └── world.ts\n└── tsconfig.json\n</code></pre>\n<p>在这个项目中被配置为 <code>\"baseUrl\": \"./\"</code>，TypeScript 将会从首先寻找与 <code>tsconfig.json</code> 处于相同目录的文件。</p>\n<pre><code class=\"language-ts\">import { helloWorld } from \"hello/world\";\n\nconsole.log(helloWorld);\n</code></pre>\n<p>当你厌倦了导入文件时总是 <code>\"../\"</code> 或 <code>\"./\"</code>，或需要在移动文件时更改路径，这是一个很好的解决方法。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop' aria-labelledby=\"esModuleInterop-config\">#</a> ES 模块互操作性 - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n默认情况下（未设置 `esModuleInterop` 或值为 false），TypeScript 像 ES6 模块一样对待 CommonJS/AMD/UMD。这样的行为有两个被证实的缺陷：\n<ul>\n<li>形如 <code>import * as moment from \"moment\"</code> 这样的命名空间导入等价于 <code>const moment = require(\"moment\")</code></li>\n<li>形如 <code>import moment from \"moment\"</code> 这样的默认导入等价于 <code>const moment = require(\"moment\").default</code></li>\n</ul>\n<p>这种错误的行为导致了这两个问题：</p>\n<ul>\n<li>ES6 模块规范规定，命名空间导入（<code>import * as x</code>）只能是一个对象。TypeScript 把它处理成 <code>= require(\"x\")</code> 的行为允许把导入当作一个可调用的函数，这样不符合规范。</li>\n<li>虽然 TypeScript 准确实现了 ES6 模块规范，但是大多数使用 CommonJS/AMD/UMD 模块的库并没有像 TypeScript 那样严格遵守。</li>\n</ul>\n<p>开启 <code>esModuleInterop</code> 选项将会修复 TypeScript 转译中的这两个问题。第一个问题通过改变编译器的行为来修复，第二个问题则由两个新的工具函数来解决，它们提供了确保生成的 JavaScript 兼容性的适配层：</p>\n<pre><code class=\"language-ts\">import * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>当 <code>esModuleInterop</code> 未启用：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop: false\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>当启用 <code>esModuleInterop</code>：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p><em>注</em>：你可以通过启用 <a href=\"#importHelpers\"><code>importHelpers</code></a> 来让 JS 输出更紧凑：</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop\n// @importHelpers\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>当启用 <code>esModuleInterop</code> 时，将同时启用 <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a>。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowSyntheticDefaultImports' aria-label=\"Jump to compiler option info for allowSyntheticDefaultImports\" ><code>allowSyntheticDefaultImports</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution' aria-labelledby=\"moduleResolution-config\">#</a> 模块解析 - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>指定模块解析策略：<code>'node'</code> （Node.js） 或 <code>'classic'</code> （在 TypeScript 1.6 版本之前使用）。\n你可能不需要在新代码中使用 <code>classic</code>。</p>\n<p>这里有一个关于<a href=\"/docs/handbook/module-resolution.html\">模块解析</a>的手册参考。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === <code>AMD</code> or <code>UMD</code> or <code>System</code> or <code>ES6</code>, then <code>Classic</code><br/><br/>Otherwise <code>Node</code></p>\n</li>\n<li><span>Related:</span><p><a href='#module' aria-label=\"Jump to compiler option info for module\" ><code>module</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" id='paths' href='#paths' name='paths' aria-labelledby=\"paths-config\">#</a> 路径设置 - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>一些将模块导入重新映射到相对于 <code>baseUrl</code> 路径的配置。<a href=\"/docs/handbook/module-resolution.html#path-mapping\">手册</a>中有更多关于 <code>paths</code> 的内容。</p>\n<p><code>paths</code> 可以允许你声明 TypeScript 应该如何解析你的 <code>require</code>/<code>import</code>。</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\", // this must be specified if \"paths\" is specified.\n    \"paths\": {\n      \"jquery\": [\"node_modules/jquery/dist/jquery\"] // this mapping is relative to \"baseUrl\"\n    }\n  }\n}\n</code></pre>\n<p>这将使你可以写 <code>import \"jquery\"</code>，并且在本地获得所有正确的类型。</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"paths\": {\n        \"app/*\": [\"app/*\"],\n        \"config/*\": [\"app/_config/*\"],\n        \"environment/*\": [\"environments/*\"],\n        \"shared/*\": [\"app/_shared/*\"],\n        \"helpers/*\": [\"helpers/*\"],\n        \"tests/*\": [\"tests/*\"]\n    },\n}\n</code></pre>\n<p>这种情况下，你可以告诉 TypeScript 文件解析器支持一些自定义的前缀来寻找代码。\n这种模式可以避免在你的代码中出现过长的相对路径。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks' aria-labelledby=\"preserveSymlinks-config\">#</a> 保留符号链接 - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>这是为了匹配 Node.js 中相同的选项，它不解析符号链接的真实路径。</p>\n<p>这个选项也表现出与 Webpack 中 <code>resolve.symlinks</code> 选项相反的行为（即设置 TypeScript 的 <code>preserveSymlinks</code> 为 true, 与之对应的 Webpack 的 <code>resolve.symlinks</code> 为 false。反之亦然）</p>\n<p>启用后，对于模块和包的引用（例如 <code>import</code> 和 <code>/// &#x3C;reference type=\"...\" /></code> 指令都相对于符号链接所在的位置进行解析，而不是相对于符号链接解析后的路径。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs' aria-labelledby=\"rootDirs-config\">#</a> 根目录 - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>通过 <code>rootDirs</code>，你可以告诉编译器有许多“虚拟”的目录作为一个根目录。这将会允许编译器在这些“虚拟”目录中解析相对应的模块导入，就像它们被合并到同一目录中一样。</p>\n<p>例如：</p>\n<pre><code> src\n └── views\n     └── view1.ts (can import \"./template1\", \"./view2`)\n     └── view2.ts (can import \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (can import \"./view1\", \"./view2\")\n</code></pre>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src/views\", \"generated/templates/views\"]\n  }\n}\n</code></pre>\n<p>这不会影响到 TypeScript 如何生成 JavaScript，而仅是模拟了假设它们在运行时能通过这些相对路径工作。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots' aria-labelledby=\"typeRoots-config\">#</a> 类型根路径 - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>默认情况下，所有 <em>可见</em> 的 ”<code>@types</code>” 包都将包含在你的编译过程中。\n在 <code>node_modules/@types</code> 中的任何包都被认为是 <em>可见</em> 的。\n例如，这意味着包含 <code>./node_modules/@types/</code>，<code>../node_modules/@types/</code>，<code>../../node_modules/@types/</code> 中所有的包。</p>\n<p>当 <code>typeRoots</code> 被指定，<em>仅有</em> 在 <code>typeRoots</code> 下的包会被包含。例如：</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"typeRoots\": [\"./typings\", \"./vendor/types\"]\n  }\n}\n</code></pre>\n<p>这个配置文件将包含 <code>./typings</code> 和 <code>./vendor/types</code> 下的所有包，而不包括 <code>./node_modules/@types</code> 下的。其中所有的路径都是相对于 <code>tsconfig.json</code>。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#types' aria-label=\"Jump to compiler option info for types\" ><code>types</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" id='types' href='#types' name='types' aria-labelledby=\"types-config\">#</a> 类型 - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>默认情况下，所有 <em>可见</em> 的 ”<code>@types</code>” 包都将包含在你的编译过程中。\n在 <code>node_modules/@types</code> 中的任何包都被认为是 <em>可见</em> 的。\n例如，这意味着包含 <code>./node_modules/@types/</code>，<code>../node_modules/@types/</code>，<code>../../node_modules/@types/</code> 中所有的包。。</p>\n<p>当 <code>types</code> 被指定，则只有列出的包才会被包含在全局范围内。例如：</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"types\": [\"node\", \"jest\", \"express\"]\n  }\n}\n</code></pre>\n<p>这个 <code>tsconfig.json</code> 文件将 <em>只会</em> 包含 <code>./node_modules/@types/node</code>，<code>./node_modules/@types/jest</code> 和 <code>./node_modules/@types/express</code>。\n其他在 <code>node_modules/@types/*</code> 下的包将不会被包含。</p>\n<h3 id=\"这会影响什么？\" style=\"position:relative;\"><a href=\"#%E8%BF%99%E4%BC%9A%E5%BD%B1%E5%93%8D%E4%BB%80%E4%B9%88%EF%BC%9F\" aria-label=\"这会影响什么？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>这会影响什么？</h3>\n<p>此选项不会影响 <code>@types/*</code> 如何被包含在你的代码中，例如你在有上面例子里 <code>compilerOptions</code> 的环境中写了这样的代码：</p>\n<pre><code class=\"language-ts\">import * as moment from \"moment\";\n\nmoment().format(\"MMMM Do YYYY, h:mm:ss a\");\n</code></pre>\n<p><code>moment</code> 导入会有完整的类型。</p>\n<p>当你设置了这个选项，通过不在 <code>types</code> 数组中包含，它将：</p>\n<ul>\n<li>不会再你的项目中添加全局声明（例如 node 中的 <code>process</code> 或 Jest 中的 <code>expect</code>）</li>\n<li>导出不会出现再自动导入的建议中</li>\n</ul>\n<p>此功能与 <a href=\"#typeRoots\"><code>类型根路径</code></a> 不同的是，它只指定你想要包含的具体类型，而 <a href=\"#typeRoots\"><code>类型根路径</code></a> 支持你想要特定的文件夹。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#typeRoots' aria-label=\"Jump to compiler option info for typeRoots\" ><code>typeRoots</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Source_Map_Options_6175' ><a href='#Source_Map_Options_6175' name='Source_Map_Options_6175' aria-label=\"Link to the section Source Maps\" aria-labelledby='Source_Map_Options_6175'>#</a>Source Maps</h2>\n<p>为了支持丰富的调试工具，并为开发人员提供有意义的崩溃报告，TypeScript 支持生成符合 JavaScript Source Map 标准的附加文件。</p>\n<p>它们与对应的 JavaScript 文件一起生成，以 <code>.map</code> 结尾。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap' aria-labelledby=\"inlineSourceMap-config\">#</a> Inline Source Map - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, instead of writing out a <code>.js.map</code> file to provide source maps, TypeScript will embed the source map content in the <code>.js</code> files.\nAlthough this results in larger JS files, it can be convenient in some scenarios.\nFor example, you might want to debug JS files on a webserver that doesn’t allow <code>.map</code> files to be served.</p>\n<p>Mutually exclusive with <a href=\"#sourceMap\"><code>sourceMap</code></a>.</p>\n<p>For example, with this TypeScript:</p>\n<pre><code class=\"language-ts\">const helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Converts to this JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Then enable building it with <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @inlineSourceMap\n// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources' aria-labelledby=\"inlineSources-config\">#</a> Inline Sources - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will include the original content of the <code>.ts</code> file as an embedded string in the source map.\nThis is often useful in the same cases as <code>inlineSourceMap</code>.</p>\n<p>Requires either <code>sourceMap</code> or <code>inlineSourceMap</code> to be set.</p>\n<p>For example, with this TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>By default converts to this JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Then enable building it with <code>inlineSources</code> and <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.\nNote that the end is different from the example in <a href=\"#inlineSourceMap\"><code>inlineSourceMap</code></a> because the source-map now contains the original source code also.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @inlineSources\n// @inlineSourceMap\n// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot' aria-labelledby=\"mapRoot-config\">#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where debugger should locate map files instead of generated locations.\nThis string is treated verbatim inside the source-map, for example:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"mapRoot\": \"https://my-website.com/debug/sourcemaps/\"\n  }\n}\n</code></pre>\n<p>Would declare that <code>index.js</code> will have sourcemaps at <code>https://my-website.com/debug/sourcemaps/index.js.map</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot' aria-labelledby=\"sourceRoot-config\">#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where a debugger should locate TypeScript files instead of relative source locations.\nThis string is treated verbatim inside the source-map where you can use a path or a URL:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"sourceRoot\": \"https://my-website.com/debug/source/\"\n  }\n}\n</code></pre>\n<p>Would declare that <code>index.js</code> will have a source file at <code>https://my-website.com/debug/source/index.ts</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Additional_Checks_6176' ><a href='#Additional_Checks_6176' name='Additional_Checks_6176' aria-label=\"Link to the section 额外检查\" aria-labelledby='Additional_Checks_6176'>#</a>额外检查</h2>\n<p>额外检查的集合，在某种程度上介于编译器与静态分析工具之间。如果想寻找更深入的规则，您可能更喜欢使用 <a href=\"https://github.com/typescript-eslint/typescript-eslint \">ESLint</a> 这样的工具。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch' aria-labelledby=\"noFallthroughCasesInSwitch-config\">#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors for fallthrough cases in switch statements.\nEnsures that any non-empty case inside a switch statement includes either <code>break</code> or <code>return</code>.\nThis means you won’t accidentally ship a case fallthrough bug.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noFallthroughCasesInSwitch\n// @errors: 7029\nconst a: number = 6;\n\nswitch (a) {\n  case 0:\n    console.log(\"even\");\n  case 1:\n    console.log(\"odd\");\n    break;\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitOverride-config'><a aria-label=\"Link to the compiler option: noImplicitOverride\" id='noImplicitOverride' href='#noImplicitOverride' name='noImplicitOverride' aria-labelledby=\"noImplicitOverride-config\">#</a> noImplicitOverride - <code>noImplicitOverride</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.</p>\n<p>For example, imagine you are modeling a music album syncing system:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Album {\n  download() {\n    // Default behavior\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n</code></pre>\n<p>Then when you add support for machine-learning generated playlists, you refactor the <code>Album</code> class to have a ‘setup’ function instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Album {\n  setup() {\n    // Default behavior\n  }\n}\n\nclass MLAlbum extends Album {\n  setup() {\n    // Override to get info from algorithm\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n</code></pre>\n<p>In this case, TypeScript has provided no warning that <code>download</code> on <code>SharedAlbum</code> <em>expected</em> to override a function in the base class.</p>\n<p>Using <code>noImplicitOverride</code> you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword <code>override</code>.</p>\n<p>The following example has <code>noImplicitOverride</code> enabled, and you can see the error received when <code>override</code> is missing:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitOverride\n// @errors: 4114\nclass Album {\n  setup() {}\n}\n\nclass MLAlbum extends Album {\n  override setup() {}\n}\n\nclass SharedAlbum extends Album {\n  setup() {}\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.3\" href=\"/docs/handbook/release-notes/typescript-4-3.html\">4.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns' aria-labelledby=\"noImplicitReturns-config\">#</a> No Implicit Returns - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, TypeScript will check all code paths in a function to ensure they return a value.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2366 2322\nfunction lookupHeadphonesManufacturer(color: \"blue\" | \"black\"): string {\n  if (color === \"blue\") {\n    return \"beats\";\n  } else {\n    \"bose\";\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noPropertyAccessFromIndexSignature-config'><a aria-label=\"Link to the compiler option: noPropertyAccessFromIndexSignature\" id='noPropertyAccessFromIndexSignature' href='#noPropertyAccessFromIndexSignature' name='noPropertyAccessFromIndexSignature' aria-labelledby=\"noPropertyAccessFromIndexSignature-config\">#</a> noPropertyAccessFromIndexSignature - <code>noPropertyAccessFromIndexSignature</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting ensures consistency between accessing a field via the “dot” (<code>obj.key</code>) syntax, and “indexed” (<code>obj[\"key\"]</code>) and the way which the property is declared in the type.</p>\n<p>Without this flag, TypeScript will allow you to use the dot syntax to access fields which are not defined:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 4111\ndeclare function getSettings(): GameSettings;\n// ---cut---\ninterface GameSettings {\n  // Known up-front properties\n  speed: \"fast\" | \"medium\" | \"slow\";\n  quality: \"high\" | \"low\";\n\n  // Assume anything unknown to the interface\n  // is a string.\n  [key: string]: string;\n}\n\nconst settings = getSettings();\nsettings.speed;\n//       ^?\nsettings.quality;\n//       ^?\n\n// Unknown key accessors are allowed on\n// this object, and are `string`\nsettings.username;\n//       ^?\n</code></pre>\n<p>Turning the flag on will raise an error because the unknown field uses dot syntax instead of indexed syntax.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 4111\n// @noPropertyAccessFromIndexSignature\ndeclare function getSettings(): GameSettings;\ninterface GameSettings {\n  speed: \"fast\" | \"medium\" | \"slow\";\n  quality: \"high\" | \"low\";\n  [key: string]: string;\n}\n// ---cut---\nconst settings = getSettings();\nsettings.speed;\nsettings.quality;\n\n// This would need to be settings[\"username\"];\nsettings.username;\n//       ^?\n</code></pre>\n<p>The goal of this flag is to signal intent in your calling syntax about how certain you are this property exists.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUncheckedIndexedAccess-config'><a aria-label=\"Link to the compiler option: noUncheckedIndexedAccess\" id='noUncheckedIndexedAccess' href='#noUncheckedIndexedAccess' name='noUncheckedIndexedAccess' aria-labelledby=\"noUncheckedIndexedAccess-config\">#</a> noUncheckedIndexedAccess - <code>noUncheckedIndexedAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript has a way to describe objects which have unknown keys but known values on an object, via index signatures.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface EnvironmentVars {\n  NAME: string;\n  OS: string;\n\n  // Unknown properties are covered by this index signature.\n  [propName: string]: string;\n}\n\ndeclare const env: EnvironmentVars;\n\n// Declared as existing\nconst sysName = env.NAME;\nconst os = env.OS;\n//    ^?\n\n// Not declared, but because of the index\n// signature, then it is considered a string\nconst nodeEnv = env.NODE_ENV;\n//    ^?\n</code></pre>\n<p>Turning on <code>noUncheckedIndexedAccess</code> will add <code>undefined</code> to any un-declared field in the type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface EnvironmentVars {\n  NAME: string;\n  OS: string;\n\n  // Unknown properties are covered by this index signature.\n  [propName: string]: string;\n}\n// @noUncheckedIndexedAccess\n// ---cut---\ndeclare const env: EnvironmentVars;\n\n// Declared as existing\nconst sysName = env.NAME;\nconst os = env.OS;\n//    ^?\n\n// Not declared, but because of the index\n// signature, then it is considered a string\nconst nodeEnv = env.NODE_ENV;\n//    ^?\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals' aria-labelledby=\"noUnusedLocals-config\">#</a> No Unused Locals - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused local variables.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noUnusedLocals\n// @errors: 6133\nconst createKeyboard = (modelID: number) => {\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID };\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters' aria-labelledby=\"noUnusedParameters-config\">#</a> No Unused Parameters - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused parameters in functions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noUnusedParameters\n// @errors: 6133\nconst createDefaultKeyboard = (modelID: number) => {\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID: defaultModelID };\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Experimental_Options_6177' ><a href='#Experimental_Options_6177' name='Experimental_Options_6177' aria-label=\"Link to the section 实验选项\" aria-labelledby='Experimental_Options_6177'>#</a>实验选项</h2>\n<p>TypeScript 力求只包含那些确认会被添加到 JavaScript 语言的特性。</p>\n<p>不过某些情况下，一个特性被认为可以成为上述原则的例外。这些特性会以实验性的编译器选项存在。这些特性被添加到 JavaScript 语言的版本可能会有所不同，因此使用这些选项是有风险的。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata' aria-labelledby=\"emitDecoratorMetadata-config\">#</a> Emit Decorator Metadata - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables experimental support for emitting type metadata for decorators which works with the module <a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>.</p>\n<p>For example, here is the JavaScript</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n<p>With <code>emitDecoratorMetadata</code> not set to true (default):</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\n// @showEmit\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n<p>With <code>emitDecoratorMetadata</code> set to true:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\n// @showEmit\n// @emitDecoratorMetadata\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#experimentalDecorators' aria-label=\"Jump to compiler option info for experimentalDecorators\" ><code>experimentalDecorators</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators' aria-labelledby=\"experimentalDecorators-config\">#</a> Experimental Decorators - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables <a href=\"https://github.com/tc39/proposal-decorators\">experimental support for decorators</a>, which is in stage 2\nof the TC39 standardization process.</p>\n<p>Decorators are a language feature which hasn’t yet been fully ratified into the JavaScript specification.\nThis means that the implementation version in TypeScript may differ from the implementation in JavaScript when it it decided by TC39.</p>\n<p>You can find out more about decorator support in TypeScript in <a href=\"/docs/handbook/decorators.html\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#emitDecoratorMetadata' aria-label=\"Jump to compiler option info for emitDecoratorMetadata\" ><code>emitDecoratorMetadata</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Advanced_Options_6178' ><a href='#Advanced_Options_6178' name='Advanced_Options_6178' aria-label=\"Link to the section 高级\" aria-labelledby='Advanced_Options_6178'>#</a>高级</h2>\n<p>调试相关的选项。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode' aria-labelledby=\"allowUnreachableCode-config\">#</a> Allow Unreachable Code - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When:</p>\n<ul>\n<li><code>undefined</code> (default) provide suggestions as warnings to editors</li>\n<li><code>true</code> unreachable code is ignored</li>\n<li><code>false</code> raises compiler errors about unreachable code</li>\n</ul>\n<p>These warnings are only about code which is provably unreachable due to the use of JavaScript syntax, for example:</p>\n<pre><code class=\"language-ts\">function fn(n: number) {\n  if (n > 5) {\n    return true;\n  } else {\n    return false;\n  }\n  return true;\n}\n</code></pre>\n<p>With <code>\"allowUnreachableCode\": false</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7027\n// @allowUnreachableCode: false\nfunction fn(n: number) {\n  if (n > 5) {\n    return true;\n  } else {\n    return false;\n  }\n  return true;\n}\n</code></pre>\n<p>This does not affect errors on the basis of code which <em>appears</em> to be unreachable due to type analysis.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels' aria-labelledby=\"allowUnusedLabels-config\">#</a> Allow Unused Labels - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When:</p>\n<ul>\n<li><code>undefined</code> (default) provide suggestions as warnings to editors</li>\n<li><code>true</code> unused labels are ignored</li>\n<li><code>false</code> raises compiler errors about unused labels</li>\n</ul>\n<p>Labels are very rare in JavaScript and typically indicate an attempt to write an object literal:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7028\n// @allowUnusedLabels: false\nfunction verifyAge(age: number) {\n  // Forgot 'return' statement\n  if (age > 18) {\n    verified: true;\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies' aria-labelledby=\"assumeChangesOnlyAffectDirectDependencies-config\">#</a> Assume Changes Only Affect Direct Dependencies - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When this option is enabled, TypeScript will avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed as well as files that directly import them.</p>\n<p>This can be considered a ‘fast &#x26; loose’ implementation of the watching algorithm, which can drastically reduce incremental rebuild times at the expense of having to run the full build occasionally to get all compiler error messages.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" id='charset' href='#charset' name='charset' aria-labelledby=\"charset-config\">#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In prior versions of TypeScript, this controlled what encoding was used when reading text files from disk.\nToday, TypeScript assumes UTF-8 encoding, but will correctly detect UTF-16 (BE and LE) or UTF-8 BOMs.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>utf8</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir' aria-labelledby=\"declarationDir-config\">#</a> Declaration Dir - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a way to configure the root directory for where declaration files are emitted.</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>with this <code>tsconfig.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"declarationDir\": \"./types\"\n  }\n}\n</code></pre>\n<p>Would place the d.ts for the <code>index.ts</code> in a <code>types</code> folder:</p>\n<pre><code>example\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> n/a</p>\n</li>\n<li><span>Related:</span><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics' aria-labelledby=\"diagnostics-config\">#</a> Diagnostics - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Used to output diagnostic information for debugging. This command is a subset of <a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a> which are more user-facing results, and easier to interpret.</p>\n<p>If you have been asked by a TypeScript compiler engineer to give the results using this flag in a compile, in which there is no harm in using <a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a> instead.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#extendedDiagnostics' aria-label=\"Jump to compiler option info for extendedDiagnostics\" ><code>extendedDiagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableReferencedProjectLoad-config'><a aria-label=\"Link to the compiler option: disableReferencedProjectLoad\" id='disableReferencedProjectLoad' href='#disableReferencedProjectLoad' name='disableReferencedProjectLoad' aria-labelledby=\"disableReferencedProjectLoad-config\">#</a> disableReferencedProjectLoad - <code>disableReferencedProjectLoad</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In multi-project TypeScript programs, TypeScript will load all of the available projects into memory in order to provide accurate results for editor responses which require a full knowledge graph like ‘Find All References’.</p>\n<p>If your project is large, you can use the flag <code>disableReferencedProjectLoad</code> to disable the automatic loading of all projects. Instead, projects are loaded dynamically as you open files through your editor.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit' aria-labelledby=\"disableSizeLimit-config\">#</a> Disable Size Limit - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>To avoid a possible memory bloat issues when working with very large JavaScript projects, there is an upper limit to the amount of memory TypeScript will allocate. Turning this flag on will remove the limit.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching' aria-labelledby=\"disableSolutionSearching-config\">#</a> Disable Solution Searching - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with <a href=\"/docs/handbook/project-references.html\">composite TypeScript projects</a>, this option provides a way to declare that you do not want a project to be included when using features like <em>find all references</em> or <em>jump to definition</em> in an editor.</p>\n<p>This flag is something you can use to increase responsiveness in large composite projects.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect' aria-labelledby=\"disableSourceOfProjectReferenceRedirect-config\">#</a> Disable Source Project Reference Redirect - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with <a href=\"/docs/handbook/project-references.html\">composite TypeScript projects</a>, this option provides a way to go <a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references\">back to the pre-3.7</a> behavior where d.ts files were used to as the boundaries between modules.\nIn 3.7 the source of truth is now your TypeScript files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM' aria-labelledby=\"emitBOM-config\">#</a> Emit BOM - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controls whether TypeScript will emit a <a href=\"https://wikipedia.org/wiki/Byte_order_mark\">byte order mark (BOM)</a> when writing output files.\nSome runtime environments require a BOM to correctly interpret a JavaScript files; others require that it is not present.\nThe default value of <code>false</code> is generally best unless you have a reason to change it.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly' aria-labelledby=\"emitDeclarationOnly-config\">#</a> Emit Declaration Only - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Only</em> emit <code>.d.ts</code> files; do not emit <code>.js</code> files.</p>\n<p>This setting is useful in two cases:</p>\n<ul>\n<li>You are using a transpiler other than TypeScript to generate your JavaScript.</li>\n<li>You are using TypeScript to only generate <code>d.ts</code> files for your consumers.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.8\" href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='explainFiles-config'><a aria-label=\"Link to the compiler option: explainFiles\" id='explainFiles' href='#explainFiles' name='explainFiles' aria-labelledby=\"explainFiles-config\">#</a> explainFiles - <code>explainFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.</p>\n<p>For example, with this project of just a single <code>index.ts</code> file</p>\n<pre><code class=\"language-sh\">example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>Using a <code>tsconfig.json</code> which has <code>explainFiles</code> set to true:</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"explainFiles\": true\n  }\n}\n</code></pre>\n<p>Running TypeScript against this folder would have output like this:</p>\n<pre><code>❯ tsc\nnode_modules/typescript/lib/lib.d.ts\n  Default library for target 'es5'\nnode_modules/typescript/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.dom.d.ts\n  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.webworker.importscripts.d.ts\n  Library referenced via 'webworker.importscripts' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.scripthost.d.ts\n  Library referenced via 'scripthost' from file 'node_modules/typescript/lib/lib.d.ts'\nindex.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'\n</code></pre>\n<p>The output above show:</p>\n<ul>\n<li>The initial lib.d.ts lookup based on <a href=\"#include\"><code>target</code></a>, and the chain of <code>.d.ts</code> files which are referenced</li>\n<li>The <code>index.ts</code> file located via the default pattern of <a href=\"#include\"><code>include</code></a></li>\n</ul>\n<p>This option is intended for debugging how a file has become a part of your compile.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics' aria-labelledby=\"extendedDiagnostics-config\">#</a> Extended Diagnostics - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use this flag to discover where TypeScript is spending its time when compiling.\nThis is a tool used for understanding the performance characteristics of your codebase overall.</p>\n<p>You can learn more about how to measure and understand the output in the performance <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">section of the wiki</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#diagnostics' aria-label=\"Jump to compiler option info for diagnostics\" ><code>diagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames' aria-labelledby=\"forceConsistentCasingInFileNames-config\">#</a> Force Consistent Casing In File Names - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript follows the case sensitivity rules of the file system it’s running on.\nThis can be problematic if some developers are working in a case-sensitive file system and others aren’t.\nIf a file attempts to import <code>fileManager.ts</code> by specifying <code>./FileManager.ts</code> the file will be found in a case-insensitive file system, but not on a case-sensitive file system.</p>\n<p>When this option is set, TypeScript will issue an error if a program tries to include a file by a casing different from the casing on disk.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile' aria-labelledby=\"generateCpuProfile-config\">#</a> Generate CPU Profile - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run. The CPU profile can provide insight into why your builds may be slow.</p>\n<p>This option can only be used from the CLI via: <code>--generateCpuProfile tsc-output.cpuprofile</code>.</p>\n<pre><code class=\"language-sh\">npm run tsc --generateCpuProfile tsc-output.cpuprofile\n</code></pre>\n<p>This file can be opened in a chromium based browser like Chrome or Edge Developer in <a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">the CPU profiler</a> section.\nYou can learn more about understanding the compilers performance in the <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">TypeScript wiki section on performance</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> profile.cpuprofile</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues' aria-labelledby=\"importsNotUsedAsValues-config\">#</a> Imports Not Used As Values - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag controls how <code>import</code> works, there are 3 different options:</p>\n<ul>\n<li><code>remove</code>: The default behavior of dropping <code>import</code> statements which only reference types.</li>\n<li><code>preserve</code>: Preserves all <code>import</code> statements whose values or types are never used. This can cause imports/side-effects to be preserved.</li>\n<li><code>error</code>: This preserves all imports (the same as the preserve option), but will error when a value import is only used as a type. This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.</li>\n</ul>\n<p>This flag works because you can use <code>import type</code> to explicitly create an <code>import</code> statement which should never be emitted into JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>remove,<br/>preserve,<br/>error</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory' aria-labelledby=\"jsxFactory-config\">#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Changes the function called in <code>.js</code> files when compiling JSX Elements using the classic JSX runtime.\nThe most common change is to use <code>\"h\"</code> or <code>\"preact.h\"</code> instead of the default <code>\"React.createElement\"</code> if using <code>preact</code>.</p>\n<p>For example, this TSX file:</p>\n<pre><code class=\"language-tsx\">import { h } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>With <code>jsxFactory: \"h\"</code> looks like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @showEmittedFile: index.js\n// @jsxFactory: h\n// @noErrors\n// @target: esnext\n// @module: commonjs\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel’s <code>/** @jsx h */</code> directive</a>.</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">/** @jsx h */\nimport { h } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>The factory chosen will also affect where the <code>JSX</code> namespace is looked up (for type checking information) before falling back to the global one.</p>\n<p>If the factory is defined as <code>React.createElement</code> (the default), the compiler will check for <code>React.JSX</code> before checking for a global <code>JSX</code>. If the factory is defined as <code>h</code>, it will check for <code>h.JSX</code> before a global <code>JSX</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.createElement</code></p>\n</li>\n<li><span>Allowed:</span><p>Any identifier or dotted identifier</p>\n</li>\n<li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFragmentFactory-config'><a aria-label=\"Link to the compiler option: jsxFragmentFactory\" id='jsxFragmentFactory' href='#jsxFragmentFactory' name='jsxFragmentFactory' aria-labelledby=\"jsxFragmentFactory-config\">#</a> jsxFragmentFactory - <code>jsxFragmentFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the JSX fragment factory function to use when targeting react JSX emit with <code>jsxFactory</code> compiler option is specified, e.g. <code>Fragment</code>.</p>\n<p>For example with this TSConfig:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  }\n}\n</code></pre>\n<p>This TSX file:</p>\n<pre><code class=\"language-tsx\">import { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  &#x3C;>\n    &#x3C;div>Hello&#x3C;/div>\n  &#x3C;/>\n);\n</code></pre>\n<p>Would look like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @showEmittedFile: index.js\n// @jsxFactory: h\n// @jsxFragmentFactory: Fragment\n// @noErrors\n// @target: esnext\n// @module: commonjs\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  &#x3C;>\n    &#x3C;div>Hello&#x3C;/div>\n  &#x3C;/>\n);\n</code></pre>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments\">Babel’s <code>/* @jsxFrag h */</code> directive</a>.</p>\n<p>For example:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">/** @jsx h */\n/** @jsxFrag Fragment */\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  &#x3C;>\n    &#x3C;div>Hello&#x3C;/div>\n  &#x3C;/>\n);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxImportSource-config'><a aria-label=\"Link to the compiler option: jsxImportSource\" id='jsxImportSource' href='#jsxImportSource' name='jsxImportSource' aria-labelledby=\"jsxImportSource-config\">#</a> jsxImportSource - <code>jsxImportSource</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Declares the module specifier to be used for importing the <code>jsx</code> and <code>jsxs</code> factory functions when using <a href=\"#jsx\"><code>jsx</code></a> as <code>\"react-jsx\"</code> or <code>\"react-jsxdev\"</code> which were introduced in TypeScript 4.1.</p>\n<p>With <a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">React 17</a> the library supports a new form of JSX transformation via a separate import.</p>\n<p>For example with this code:</p>\n<pre><code class=\"language-tsx\">import React from \"react\";\n\nfunction App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Using this TSConfig:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\"\n  }\n}\n</code></pre>\n<p>The emitted JavaScript from TypeScript is:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @noErrors\n// @jsx: react-jsx\n// @module: commonjs\n// @target: esnext\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\nimport React from \"react\";\n\nfunction App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>For example if you wanted to use <code>\"jsxImportSource\": \"preact\"</code>, you need a tsconfig like:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\",\n    \"types\": [\"preact\"]\n  }\n}\n</code></pre>\n<p>Which generates code like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @jsxImportSource: preact\n// @types: preact\n// @jsx: react-jsx\n// @target: esnext\n// @module: commonjs\n// @noErrors\n\nexport function App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Alternatively, you can use a per-file pragma to set this option, for example:</p>\n<pre><code class=\"language-tsx\">/** @jsxImportSource preact */\n\nexport function App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Would add <code>preact/jsx-runtime</code> as an import for the <code>_jsx</code> factory.</p>\n<p><em>Note:</em> In order for this to work like you would expect, your <code>tsx</code> file must include an <code>export</code> or <code>import</code> so that it is considered a module.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>react</code></p>\n</li>\n<li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly' aria-labelledby=\"keyofStringsOnly-config\">#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag changes the <code>keyof</code> type operator to return <code>string</code> instead of <code>string | number</code> when applied to a type with a string index signature.</p>\n<p>This flag is used to help people keep this behavior from <a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">before TypeScript 2.9’s release</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles' aria-labelledby=\"listEmittedFiles-config\">#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of generated files part of the compilation to the terminal.</p>\n<p>This flag is useful in two cases:</p>\n<ul>\n<li>You want to transpile TypeScript as a part of a build chain in the terminal where the filenames are processed in the next command.</li>\n<li>You are not sure that TypeScript has included a file you expected, as a part of debugging the <a href=\"#Project_Files_0\">file inclusion settings</a>.</li>\n</ul>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"listFiles\": true\n  }\n}\n</code></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts\n</code></pre>\n<p>Normally, TypeScript would return silently on success.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" id='listFiles' href='#listFiles' name='listFiles' aria-labelledby=\"listFiles-config\">#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files part of the compilation. This is useful when you are not sure that TypeScript has\nincluded a file you expected.</p>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"listFiles\": true\n  }\n}\n</code></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts\n</code></pre>\n<p>Note if using TypeScript 4.2, prefer <a href=\"#explainFiles\"><code>explainFiles</code></a> which offers an explanation of why a file was added too.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#explainFiles' aria-label=\"Jump to compiler option info for explainFiles\" ><code>explainFiles</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth' aria-labelledby=\"maxNodeModuleJsDepth-config\">#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The maximum dependency depth to search under <code>node_modules</code> and load JavaScript files.</p>\n<p>This flag is can only be used when <a href=\"#allowJs\"><code>allowJs</code></a> is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your <code>node_modules</code>.</p>\n<p>Ideally this should stay at 0 (the default), and <code>d.ts</code> files should be used to explicitly define the shape of modules.\nHowever, there are cases where you may want to turn this on at the expense of speed and potential accuracy.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>0</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" id='newLine' href='#newLine' name='newLine' aria-labelledby=\"newLine-config\">#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Platform specific</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers' aria-labelledby=\"noEmitHelpers-config\">#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Instead of importing helpers with <a href=\"#importHelpers\"><code>importHelpers</code></a>, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.</p>\n<p>For example, using this <code>async</code> function in ES5 requires a <code>await</code>-like function and <code>generator</code>-like function to run:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n<p>Which creates quite a lot of JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n<p>Which can be switched out with your own globals via this flag:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @noEmitHelpers\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError' aria-labelledby=\"noEmitOnError-config\">#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.</p>\n<p>This defaults to <code>false</code>, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.4\" href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation' aria-labelledby=\"noErrorTruncation-config\">#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not truncate error messages.</p>\n<p>With <code>false</code>, the default.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322 2454\nvar x: {\n  propertyWithAnExceedinglyLongName1: string;\n  propertyWithAnExceedinglyLongName2: string;\n  propertyWithAnExceedinglyLongName3: string;\n  propertyWithAnExceedinglyLongName4: string;\n  propertyWithAnExceedinglyLongName5: string;\n  propertyWithAnExceedinglyLongName6: string;\n  propertyWithAnExceedinglyLongName7: string;\n  propertyWithAnExceedinglyLongName8: string;\n};\n\n// String representation of type of 'x' should be truncated in error message\nvar s: string = x;\n</code></pre>\n<p>With <code>true</code></p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322 2454\n// @noErrorTruncation: true\nvar x: {\n  propertyWithAnExceedinglyLongName1: string;\n  propertyWithAnExceedinglyLongName2: string;\n  propertyWithAnExceedinglyLongName3: string;\n  propertyWithAnExceedinglyLongName4: string;\n  propertyWithAnExceedinglyLongName5: string;\n  propertyWithAnExceedinglyLongName6: string;\n  propertyWithAnExceedinglyLongName7: string;\n  propertyWithAnExceedinglyLongName8: string;\n};\n\n// String representation of type of 'x' should be truncated in error message\nvar s: string = x;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict' aria-labelledby=\"noImplicitUseStrict-config\">#</a> No Implicit Use Strict - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You shouldn’t need this. By default, when emitting a module file to a non-ES6 target, TypeScript emits a <code>\"use strict\";</code> prologue at the top of the file.\nThis setting disables the prologue.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES3\n// @module: AMD\n// @noImplicitUseStrict\n// @alwaysStrict: false\nexport function fn() {}\n</code></pre>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES3\n// @module: AMD\nexport function fn() {}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" id='noLib' href='#noLib' name='noLib' aria-labelledby=\"noLib-config\">#</a> No Lib - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables the automatic inclusion of any library files.\nIf this option is set, <code>lib</code> is ignored.</p>\n<p>TypeScript <em>cannot</em> compile anything without a set of interfaces for key primitives like: <code>Array</code>, <code>Boolean</code>,<code>Function</code>, <code>IArguments</code>, <code>Number</code>, <code>Object</code>, <code>RegExp</code>, and <code>String</code>. It is expected that if you use <code>noLib</code> you will be including your own type definitions for these.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#lib' aria-label=\"Jump to compiler option info for lib\" ><code>lib</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" id='noResolve' href='#noResolve' name='noResolve' aria-labelledby=\"noResolve-config\">#</a> No Resolve - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript will examine the initial set of files for <code>import</code> and <code>&#x3C;reference</code> directives and add these resolved files to your program.</p>\n<p>If <code>noResolve</code> is set, this process doesn’t happen.\nHowever, <code>import</code> statements are still checked to see if they resolve to a valid module, so you’ll need to make sure this is satisfied by some other means.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks' aria-labelledby=\"noStrictGenericChecks-config\">#</a> No Strict Generic Checks - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript will unify type parameters when comparing two generic functions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\n\ntype A = &#x3C;T, U>(x: T, y: U) => [T, U];\ntype B = &#x3C;S>(x: S, y: S) => [S, S];\n\nfunction f(a: A, b: B) {\n  b = a; // Ok\n  a = b; // Error\n}\n</code></pre>\n<p>This flag can be used to remove that check.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.4\" href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" id='out' href='#out' name='out' aria-labelledby=\"out-config\">#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#outFile\">outFile</a> instead.</p>\n<p>The <code>out</code> option computes the final file location in a way that is not predictable or consistent.\nThis option is retained for backward compatibility only and is deprecated.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums' aria-labelledby=\"preserveConstEnums-config\">#</a> Preserve Const Enums - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not erase <code>const enum</code> declarations in generated code. <code>const enum</code>s provide a way to reduce the overall memory footprint\nof your application at runtime by emitting the enum value instead of a reference.</p>\n<p>For example with this TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>The default <code>const enum</code> behavior is to convert any <code>Album.Something</code> to the corresponding number literal, and to remove a reference\nto the enum from the JavaScript completely.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>With <code>preserveConstEnums</code> set to <code>true</code>, the <code>enum</code> exists at runtime and the numbers are still emitted.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @preserveConstEnums: true\n// @showEmit\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>This essentially makes such <code>const enums</code> a source-code feature only, with no runtime traces.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace' aria-labelledby=\"reactNamespace-config\">#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#jsxFactory\"><code>--jsxFactory</code></a> instead. Specify the object invoked for <code>createElement</code> when targeting <code>react</code> for TSX files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>\"React\"</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule' aria-labelledby=\"resolveJsonModule-config\">#</a> Resolve JSON Module - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes\ngenerating a type for the <code>import</code> based on the static JSON shape.</p>\n<p>TypeScript does not support resolving JSON files by default:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2732\n// @filename: settings.json\n{\n    \"repo\": \"TypeScript\",\n    \"dry\": false,\n    \"debug\": false\n}\n// @filename: index.ts\nimport settings from \"./settings.json\";\n\nsettings.debug === true;\nsettings.dry === 2;\n</code></pre>\n<p>Enabling the option allows importing JSON, and validating the types in that JSON file.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2367\n// @resolveJsonModule\n// @module: commonjs\n// @moduleResolution: node\n// @filename: settings.json\n{\n    \"repo\": \"TypeScript\",\n    \"dry\": false,\n    \"debug\": false\n}\n// @filename: index.ts\nimport settings from \"./settings.json\";\n\nsettings.debug === true;\nsettings.dry === 2;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck' aria-labelledby=\"skipDefaultLibCheck-config\">#</a> Skip Default Lib Check - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#skipLibCheck\"><code>--skipLibCheck</code></a> instead. Skip type checking of default library declaration files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck' aria-labelledby=\"skipLibCheck-config\">#</a> Skip Lib Check - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Skip type checking of declaration files.</p>\n<p>This can save time during compilation at the expense of type-system accuracy. For example, two libraries could\ndefine two copies of the same <code>type</code> in an inconsistent way. Rather than doing a full check of all <code>d.ts</code> files, TypeScript\nwill type check the code you specifically refer to in your app’s source code.</p>\n<p>A common case where you might think to use <code>skipLibCheck</code> is when there are two copies of a library’s types in\nyour <code>node_modules</code>. In these cases, you should consider using a feature like <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a>\nto ensure there is only one copy of that dependency in your tree or investigate how to ensure there is\nonly one copy by understanding the dependency resolution to fix the issue without additional tooling.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal' aria-labelledby=\"stripInternal-config\">#</a> Strip Internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit declarations for code that has an <code>@internal</code> annotation in its JSDoc comment.\nThis is an internal compiler option; use at your own risk, because the compiler does not check that the result is valid.\nIf you are searching for a tool to handle additional levels of visibility within your <code>d.ts</code> files, look at <a href=\"https://api-extractor.com\">api-extractor</a>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>With the flag set to <code>false</code> (default):</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>With <code>stripInternal</code> set to <code>true</code> the <code>d.ts</code> emitted will be redacted.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @stripinternal\n// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>The JavaScript output is still the same.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors' aria-labelledby=\"suppressExcessPropertyErrors-config\">#</a> Suppress Excess Property Errors - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This disables reporting of excess property errors, such as the one shown in the following example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\ntype Point = { x: number; y: number };\nconst p: Point = { x: 1, y: 3, m: 10 };\n</code></pre>\n<p>This flag was added to help people migrate to the stricter checking of new object literals in <a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>.</p>\n<p>We don’t recommend using this flag in a modern codebase, you can suppress one-off cases where you need it using <code>// @ts-ignore</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors' aria-labelledby=\"suppressImplicitAnyIndexErrors-config\">#</a> Suppress Implicit Any Index Errors - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Turning <code>suppressImplicitAnyIndexErrors</code> on suppresses reporting the error about implicit anys when indexing into objects, as shown in the following example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: true\n// @suppressImplicitAnyIndexErrors: false\n// @strict: true\n// @errors: 7053\nconst obj = { x: 10 };\nconsole.log(obj[\"foo\"]);\n</code></pre>\n<p>Using <code>suppressImplicitAnyIndexErrors</code> is quite a drastic approach. It is recommended to use a <code>@ts-ignore</code> comment instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: true\n// @strict: true\nconst obj = { x: 10 };\n// @ts-ignore\nconsole.log(obj[\"foo\"]);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution' aria-labelledby=\"traceResolution-config\">#</a> Trace Resolution - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When you are trying to debug why a module isn’t being included.\nYou can set <code>traceResolutions</code> to <code>true</code> to have TypeScript print information about its resolution process for each processed file.</p>\n<p>You can read more about this in <a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields' aria-labelledby=\"useDefineForClassFields-config\">#</a> Use Define For Class Fields - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag is used as part of migrating to the upcoming standard version of class fields. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScript’s implementation but the same syntax.</p>\n<p>This flag switches to the upcoming ECMA runtime behavior.</p>\n<p>You can read more about the transition in <a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">the 3.7 release notes</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section 命令行参数\" aria-labelledby='Command_line_Options_6171'>#</a>命令行参数</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput' aria-labelledby=\"preserveWatchOutput-config\">#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" id='pretty' href='#pretty' name='pretty' aria-labelledby=\"pretty-config\">#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Stylize errors and messages using color and context, this is on by default — offers you a chance to have less terse,\nsingle colored messages from the compiler.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='watchOptions'>\n<h2 id=\"watch-options\" style=\"position:relative;\"><a href=\"#watch-options\" aria-label=\"watch options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Watch Options</h2>\n<p>You can configure the how TypeScript <code>--watch</code> works. This section is mainly for handling case where <code>fs.watch</code> and <code>fs.watchFile</code> have additional constraints like on Linux. You can read more at <a href=\"/docs/handbook/configuring-watch.html\">Configuring Watch</a>.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='watch-watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" id='watch-watchFile' href='#watch-watchFile' name='watch-watchFile' aria-labelledby=\"watch-watchFile-config\">#</a> watchFile - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The strategy for how individual files are watched.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li>\n<li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li>\n<li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system’s native events for file changes.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Attempt to use the operating system/file system’s native events to listen for changes on a file’s parent directory</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents,<br/>useFsEventsOnParentDirectory</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" id='watch-watchDirectory' href='#watch-watchDirectory' name='watch-watchDirectory' aria-labelledby=\"watch-watchDirectory-config\">#</a> watchDirectory - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every directory for changes several times a second at a fixed interval.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified directories will be checked less often.</li>\n<li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system’s native events for directory changes.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" id='watch-fallbackPolling' href='#watch-fallbackPolling' name='watch-fallbackPolling' aria-labelledby=\"watch-fallbackPolling-config\">#</a> fallbackPolling - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li>\n<li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li>\n<li><code>synchronousWatchDirectory</code>: Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in <code>node_modules</code> from running <code>npm install</code>), but you might want to disable it with this flag for some less-common setups.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-synchronousWatchDirectory-config'><a aria-label=\"Link to the compiler option: synchronousWatchDirectory\" id='watch-synchronousWatchDirectory' href='#watch-synchronousWatchDirectory' name='watch-synchronousWatchDirectory' aria-labelledby=\"watch-synchronousWatchDirectory-config\">#</a> synchronousWatchDirectory - <code>synchronousWatchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively. Instead of giving a small timeout to allow for potentially multiple edits to occur on a file.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"synchronousWatchDirectory\": true\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeDirectories-config'><a aria-label=\"Link to the compiler option: excludeDirectories\" id='watch-excludeDirectories' href='#watch-excludeDirectories' name='watch-excludeDirectories' aria-labelledby=\"watch-excludeDirectories-config\">#</a> excludeDirectories - <code>excludeDirectories</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to drastically reduce the number of files which are watched during <code>--watch</code>. This can be a useful way to reduce the number of open file which TypeScript tracks on Linux.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"excludeDirectories\": [\"**/node_modules\", \"_build\", \"temp/*\"]\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeFiles-config'><a aria-label=\"Link to the compiler option: excludeFiles\" id='watch-excludeFiles' href='#watch-excludeFiles' name='watch-excludeFiles' aria-labelledby=\"watch-excludeFiles-config\">#</a> excludeFiles - <code>excludeFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to remove a set of specific files from the files which are watched.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"excludeFiles\": [\"temp/file.ts\"]\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='typeAcquisition'>\n<h2 id=\"type-acquisition\" style=\"position:relative;\"><a href=\"#type-acquisition\" aria-label=\"type acquisition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Acquisition</h2>\n<p>Type Acquisition is only important for JavaScript projects. In TypeScript projects you need to include the types in your projects explicitly. However, for JavaScript projects, the TypeScript tooling will download types for your modules in the background and outside of your node_modules folder.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='type-enable-config'><a aria-label=\"Link to the compiler option: enable\" id='type-enable' href='#type-enable' name='type-enable' aria-labelledby=\"type-enable-config\">#</a> enable - <code>enable</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling type-acquisition in JavaScript projects:</p>\n<pre><code class=\"language-ts\">{\n  \"typeAcquisition\": {\n    \"enable\": false\n  }\n}\n</code></pre>\n<p>This could potentially remove all of the editor auto-completion for your project, if you want to get them back, you can use the <a href=\"https://www.typescriptlang.org/dt/search\">Type Search</a> to find <code>@types</code> packages or packages with types in them.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-include-config'><a aria-label=\"Link to the compiler option: include\" id='type-include' href='#type-include' name='type-include' aria-labelledby=\"type-include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If you have a JavaScript project where TypeScript needs additional guidance to understand global dependencies, or have disabled the built-in inference via <a href=\"#disableFilenameBasedTypeAcquisition\"><code>disableFilenameBasedTypeAcquisition</code></a>.</p>\n<p>You can use <code>include</code> to specify which types should be used from DefinitelyTyped:</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"include\": [\"jquery\"]\n  }\n}\n</code></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='type-exclude' href='#type-exclude' name='type-exclude' aria-labelledby=\"type-exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling the type-acquisition for a certain module in JavaScript projects. This can be useful for projects which include other libraries in testing infrastructure which aren’t needed in the main application.</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"exclude\": [\"jest\", \"mocha\"]\n  }\n}\n</code></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-disableFilenameBasedTypeAcquisition-config'><a aria-label=\"Link to the compiler option: disableFilenameBasedTypeAcquisition\" id='type-disableFilenameBasedTypeAcquisition' href='#type-disableFilenameBasedTypeAcquisition' name='type-disableFilenameBasedTypeAcquisition' aria-labelledby=\"type-disableFilenameBasedTypeAcquisition-config\">#</a> disableFilenameBasedTypeAcquisition - <code>disableFilenameBasedTypeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript’s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like <code>jquery.js</code> in your project would automatically download the types for JQuery from DefinitelyTyped.</p>\n<p>You can disable this via <code>disableFilenameBasedTypeAcquisition</code>.</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"disableFilenameBasedTypeAcquisition\": true\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"zh","tsconfigMDPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/tsconfig-reference/output/zh.md","intro":{"html":"<h2>TSConfig 前言</h2>\n<p>目录中的 TSConfig 文件表明该目录是 TypeScript 或 JavaScript 项目的根目录。\nTSConfig 文件可以是 <code>tsconfig.json</code> 或 <code>jsconfig.json</code>，它们的配置项和行为相同。</p>\n<p>此页涵盖了 TSConfig 文件中可用的所有不同选项。本页从每个选项的概述开始，到 JSON 文件的根属性，然后是<code>compilerOptions</code>（大部分选项），最后是 <code>watchOptions</code>。</p>\n"},"categories":[{"display":"Top Level","anchor":"Top Level","options":[{"anchor":"files","name":"Files"},{"anchor":"extends","name":"Extends"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"references","name":"References"}]},{"display":"项目选项","anchor":"Basic_Options_6172","options":[{"anchor":"allowJs","name":"允许 JS"},{"anchor":"checkJs","name":"检查 JS"},{"anchor":"composite","name":"组合"},{"anchor":"declaration","name":"声明"},{"anchor":"declarationMap","name":"Declaration Map"},{"anchor":"downlevelIteration","name":"迭代器降级"},{"anchor":"importHelpers","name":"导入辅助"},{"anchor":"incremental","name":"增量"},{"anchor":"isolatedModules","name":"孤立模块"},{"anchor":"jsx","name":"JSX"},{"anchor":"lib","name":"库"},{"anchor":"module","name":"模块"},{"anchor":"noEmit","name":"禁止生成"},{"anchor":"outDir","name":"输出目录"},{"anchor":"outFile","name":"输出文件"},{"anchor":"plugins","name":"插件"},{"anchor":"removeComments","name":"移除注释"},{"anchor":"rootDir","name":"根目录"},{"anchor":"sourceMap","name":"Source Map"},{"anchor":"target","name":"编译目标"},{"anchor":"tsBuildInfoFile","name":"TS 构建信息文件"}]},{"display":"严格模式","anchor":"Strict_Type_Checking_Options_6173","options":[{"anchor":"alwaysStrict","name":"Always Strict"},{"anchor":"noImplicitAny","name":"No Implicit Any"},{"anchor":"noImplicitThis","name":"No Implicit This"},{"anchor":"strict","name":"Strict"},{"anchor":"strictBindCallApply","name":"Strict Bind Call Apply"},{"anchor":"strictFunctionTypes","name":"Strict Function Types"},{"anchor":"strictNullChecks","name":"Strict Null Checks"},{"anchor":"strictPropertyInitialization","name":"Strict Property Initialization"}]},{"display":"模块解析","anchor":"Module_Resolution_Options_6174","options":[{"anchor":"allowSyntheticDefaultImports","name":"允许合成默认导入"},{"anchor":"allowUmdGlobalAccess","name":"允许 Umd 全局访问"},{"anchor":"baseUrl","name":"基准目录"},{"anchor":"esModuleInterop","name":"ES 模块互操作性"},{"anchor":"moduleResolution","name":"模块解析"},{"anchor":"paths","name":"路径设置"},{"anchor":"preserveSymlinks","name":"保留符号链接"},{"anchor":"rootDirs","name":"根目录"},{"anchor":"typeRoots","name":"类型根路径"},{"anchor":"types","name":"类型"}]},{"display":"Source Maps","anchor":"Source_Map_Options_6175","options":[{"anchor":"inlineSourceMap","name":"Inline Source Map"},{"anchor":"inlineSources","name":"Inline Sources"},{"anchor":"mapRoot","name":"Map Root"},{"anchor":"sourceRoot","name":"Source Root"}]},{"display":"额外检查","anchor":"Additional_Checks_6176","options":[{"anchor":"noFallthroughCasesInSwitch","name":"No Fallthrough Cases In Switch"},{"anchor":"noImplicitOverride","name":"noImplicitOverride"},{"anchor":"noImplicitReturns","name":"No Implicit Returns"},{"anchor":"noPropertyAccessFromIndexSignature","name":"noPropertyAccessFromIndexSignature"},{"anchor":"noUncheckedIndexedAccess","name":"noUncheckedIndexedAccess"},{"anchor":"noUnusedLocals","name":"No Unused Locals"},{"anchor":"noUnusedParameters","name":"No Unused Parameters"}]},{"display":"实验选项","anchor":"Experimental_Options_6177","options":[{"anchor":"emitDecoratorMetadata","name":"Emit Decorator Metadata"},{"anchor":"experimentalDecorators","name":"Experimental Decorators"}]},{"display":"高级","anchor":"Advanced_Options_6178","options":[{"anchor":"allowUnreachableCode","name":"Allow Unreachable Code"},{"anchor":"allowUnusedLabels","name":"Allow Unused Labels"},{"anchor":"assumeChangesOnlyAffectDirectDependencies","name":"Assume Changes Only Affect Direct Dependencies"},{"anchor":"charset","name":"Charset"},{"anchor":"declarationDir","name":"Declaration Dir"},{"anchor":"diagnostics","name":"Diagnostics"},{"anchor":"disableReferencedProjectLoad","name":"disableReferencedProjectLoad"},{"anchor":"disableSizeLimit","name":"Disable Size Limit"},{"anchor":"disableSolutionSearching","name":"Disable Solution Searching"},{"anchor":"disableSourceOfProjectReferenceRedirect","name":"Disable Source Project Reference Redirect"},{"anchor":"emitBOM","name":"Emit BOM"},{"anchor":"emitDeclarationOnly","name":"Emit Declaration Only"},{"anchor":"explainFiles","name":"explainFiles"},{"anchor":"extendedDiagnostics","name":"Extended Diagnostics"},{"anchor":"forceConsistentCasingInFileNames","name":"Force Consistent Casing In File Names"},{"anchor":"generateCpuProfile","name":"Generate CPU Profile"},{"anchor":"importsNotUsedAsValues","name":"Imports Not Used As Values"},{"anchor":"jsxFactory","name":"JSX Factory"},{"anchor":"jsxFragmentFactory","name":"jsxFragmentFactory"},{"anchor":"jsxImportSource","name":"jsxImportSource"},{"anchor":"keyofStringsOnly","name":"Keyof Strings Only"},{"anchor":"listEmittedFiles","name":"List Emitted Files"},{"anchor":"listFiles","name":"List Files"},{"anchor":"maxNodeModuleJsDepth","name":"Max Node Module JS Depth"},{"anchor":"newLine","name":"New Line"},{"anchor":"noEmitHelpers","name":"No Emit Helpers"},{"anchor":"noEmitOnError","name":"No Emit On Error"},{"anchor":"noErrorTruncation","name":"No Error Truncation"},{"anchor":"noImplicitUseStrict","name":"No Implicit Use Strict"},{"anchor":"noLib","name":"No Lib"},{"anchor":"noResolve","name":"No Resolve"},{"anchor":"noStrictGenericChecks","name":"No Strict Generic Checks"},{"anchor":"out","name":"Out"},{"anchor":"preserveConstEnums","name":"Preserve Const Enums"},{"anchor":"reactNamespace","name":"React Namespace"},{"anchor":"resolveJsonModule","name":"Resolve JSON Module"},{"anchor":"skipDefaultLibCheck","name":"Skip Default Lib Check"},{"anchor":"skipLibCheck","name":"Skip Lib Check"},{"anchor":"stripInternal","name":"Strip Internal"},{"anchor":"suppressExcessPropertyErrors","name":"Suppress Excess Property Errors"},{"anchor":"suppressImplicitAnyIndexErrors","name":"Suppress Implicit Any Index Errors"},{"anchor":"traceResolution","name":"Trace Resolution"},{"anchor":"useDefineForClassFields","name":"Use Define For Class Fields"}]},{"display":"命令行参数","anchor":"Command_line_Options_6171","options":[{"anchor":"preserveWatchOutput","name":"Preserve Watch Output"},{"anchor":"pretty","name":"Pretty"}]},{"display":"watchOptions","anchor":"watchOptions","options":[{"anchor":"watchFile","name":"watchFile"},{"anchor":"watchDirectory","name":"watchDirectory"},{"anchor":"fallbackPolling","name":"fallbackPolling"},{"anchor":"synchronousWatchDirectory","name":"synchronousWatchDirectory"},{"anchor":"excludeDirectories","name":"excludeDirectories"},{"anchor":"excludeFiles","name":"excludeFiles"}]},{"display":"typeAcquisition","anchor":"typeAcquisition","options":[{"anchor":"enable","name":"enable"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"disableFilenameBasedTypeAcquisition","name":"disableFilenameBasedTypeAcquisition"}]}]}},"staticQueryHashes":[]}