{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/declaration-files/templates/module-function-d-ts.html","result":{"data":{"markdownRemark":{"id":"62ee4616-14ff-5bd7-937a-1e6edb0f5704","excerpt":"예를 들어 다음과 같은 자바스크립트 코드를 다루는 경우를 가정합시다. UMD 또는 일반 모듈을 임포팅하는 두 가지 경우 모두에 대해 대응하려면 다음을 참고합니다.","html":"<p>예를 들어 다음과 같은 자바스크립트 코드를 다루는 경우를 가정합시다.</p>\n<pre><code class=\"language-ts\">import greeter from \"super-greeter\";\n\ngreeter(2);\ngreeter(\"Hello world\");\n</code></pre>\n<p>UMD 또는 일반 모듈을 임포팅하는 두 가지 경우 모두에 대해 대응하려면 다음을 참고합니다.</p>\n<pre><code class=\"language-ts\">// Type definitions for [~라이브러리 이름~] [~선택적 버전 숫자~]\n// Project: [~프로젝트 이름~]\n// Definitions by: [~내 이름~] &#x3C;[~내 URL~]>\n\n/*~ 함수 모듈을 위한 모듈 템플릿 입니다.\n *~ 이름을 index.d.ts로 변경하고, 모듈과 같은 이름의 폴더 안에 배치해야 합니다.\n *~ 예를 들어, \"super-greeter\" 파일을 작성하는 경우\n *~ 이 파일은 'super-greeter/index.d.ts'가 되어야 합니다.\n */\n\n// ES6 모듈은 클래스 객체를 직접 export할 수 없습니다.\n// 이 파일은 CommonJS-스타일을 사용해서 import 해야 합니다:\n//   import x = require('[~THE MODULE~]');\n//\n// 또한, --allowSyntheticDefaultImports 나\n// --esModuleInterop 옵션을 활성화한다면,\n// default import로 import할 수 있습니다:\n//   import x from '[~THE MODULE~]';\n//\n// ES6 모듈의 제한에 대한 일반적인 해결방법을 이해하려면\n// https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require\n// 에서 TypeScript 문서를 참고하세요.\n\n/*~ 전역 변수 'myFuncLib'을 노출하는 UMD 모듈을\n *~ 모듈 로더 환경 외부에서 로드하려면, 여기에서 전역으로 선언하세요.\n *~ 그렇지 않으면, 이 선언을 제거하세요.\n */\nexport as namespace myFuncLib;\n\n/*~ 이 선언은 함수를\n *~ 파일에서 export된 객체로 지정합니다.\n */\nexport = Greeter;\n\n/*~ 이 예제는 함수에 대한 여러 오버로드하는 방법을 보여줍니다 */\ndeclare function Greeter(name: string): Greeter.NamedReturnType;\ndeclare function Greeter(length: number): Greeter.LengthReturnType;\n\n/*~ 모듈에서 타입을 노출하고 싶다면,\n *~ 이 블록 안에 위치시키세요. 종종 함수 반환 타입의 형태를\n *~ 기술하고 싶을 수 있습니다; 그 타입은\n *~ 이 예제처럼 여기에 선언하세요.\n *~\n *~ 네임스페이스를 포함할 경우,\n *~ 모듈을 네임스페이스 객체로 잘못 import 할 수 있습니다.\n *~ --esModuleInterop 옵션을 활성화하세요:\n *~   import * as x from '[~THE MODULE~]'; // 오류! 이렇게 하지 마세요!\n */\ndeclare namespace Greeter {\n  export interface LengthReturnType {\n    width: number;\n    height: number;\n  }\n  export interface NamedReturnType {\n    firstName: string;\n    lastName: string;\n  }\n\n  /*~ 모듈이 프로퍼티를 갖고 있다면, 여기에 선언하세요. 예를 들어\n   *~ 이 선언은 이 코드가 합법적임을 의미합니다:\n   *~   import f = require('super-greeter');\n   *~   console.log(f.defaultName);\n   */\n  export const defaultName: string;\n  export let defaultLength: number;\n}\n</code></pre>","headings":[],"frontmatter":{"permalink":"/ko/docs/handbook/declaration-files/templates/module-function-d-ts.html","title":"Module: Function","disable_toc":null,"handbook":null,"oneline":null,"preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"5-module:-function","slug":"/ko/docs/handbook/declaration-files/templates/module-function-d-ts.html","repoPath":"/packages/documentation/copy/ko/declaration-files/templates/module-function.d.ts.md","lang":"ko","modifiedTime":"2021-05-31T12:18:20.867Z"}},"staticQueryHashes":[]}