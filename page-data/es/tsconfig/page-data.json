{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/es/tsconfig","result":{"data":{"markdownRemark":{"id":"db19f7f4-ee45-5c04-8096-8271b7e39f1b","html":"<div class=\"tsconfig raised main-content-block markdown\"><article id='Top Level'>\n<h3 id=\"root-fields\" style=\"position:relative;\"><a href=\"#root-fields\" aria-label=\"root fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Fields</h3>\n<p>Starting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" id='files' href='#files' name='files' aria-labelledby=\"files-config\">#</a> Files - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an allowlist of files to include in the program. An error occurs if any of the files can’t be found.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {},\n  \"files\": [\n    \"core.ts\",\n    \"sys.ts\",\n    \"types.ts\",\n    \"scanner.ts\",\n    \"parser.ts\",\n    \"utilities.ts\",\n    \"binder.ts\",\n    \"checker.ts\",\n    \"tsc.ts\"\n  ]\n}\n</code></pre>\n<p>This is useful when you only have a small number of files and don’t need to use a glob to reference many files.\nIf you need that then use <a href=\"#include\"><code>include</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" id='extends' href='#extends' name='extends' aria-labelledby=\"extends-config\">#</a> Extends - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The value of <code>extends</code> is a string which contains a path to another configuration file to inherit from.\nThe path may use Node.js style resolution.</p>\n<p>The configuration from the base file are loaded first, then overridden by those in the inheriting config file. All relative paths found in the configuration file will be resolved relative to the configuration file they originated in.</p>\n<p>It’s worth noting that <code>files</code>, <code>include</code> and <code>exclude</code> from the inheriting config file <em>overwrite</em> those from the\nbase config file, and that circularity between configuration files is not allowed.</p>\n<p>Currently, the only top-level property that is excluded from inheritance is <a href=\"#references\"><code>references</code></a>.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p><code>configs/base.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true\n  }\n}\n</code></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"extends\": \"./configs/base\",\n  \"files\": [\"main.ts\", \"supplemental.ts\"]\n}\n</code></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"extends\": \"./tsconfig\",\n  \"compilerOptions\": {\n    \"strictNullChecks\": false\n  }\n}\n</code></pre>\n<p>Properties with relative paths found in the configuration file, which aren’t excluded from inheritance, will be resolved relative to the configuration file they originated in.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" id='include' href='#include' name='include' aria-labelledby=\"include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns to include in the program.\nThese filenames are resolved relative to the directory containing the <code>tsconfig.json</code> file.</p>\n<pre><code class=\"language-json\">{\n  \"include\": [\"src/**/*\", \"tests/**/*\"]\n}\n</code></pre>\n<p>Which would include:</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre><code>.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock\n</code></pre>\n<p><code>include</code> and <code>exclude</code> support wildcard characters to make glob patterns:</p>\n<ul>\n<li><code>*</code> matches zero or more characters (excluding directory separators)</li>\n<li><code>?</code> matches any one character (excluding directory separators)</li>\n<li><code>**/</code> matches any directory nested to any level</li>\n</ul>\n<p>If a glob pattern doesn’t include a file extension, then only files with supported extensions are included (e.g. <code>.ts</code>, <code>.tsx</code>, and <code>.d.ts</code> by default, with <code>.js</code> and <code>.jsx</code> if <code>allowJs</code> is set to true).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> <code>[]</code> if <code>files</code> is specified, otherwise <code>[\"**/*\"]</code></p>\n</li>\n<li><span>Related:</span><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='exclude' href='#exclude' name='exclude' aria-labelledby=\"exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns that should be skipped when resolving <code>include</code>.</p>\n<p><strong>Important</strong>: <code>exclude</code> <em>only</em> changes which files are included as a result of the <code>include</code> setting.\nA file specified by <code>exclude</code> can still become part of your codebase due to an <code>import</code> statement in your code, a <code>types</code> inclusion, a <code>/// &#x3C;reference</code> directive, or being specified in the <code>files</code> list.</p>\n<p>It is not a mechanism that <strong>prevents</strong> a file from being included in the codebase - it simply changes what the <code>include</code> setting finds.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>[\"node_modules\", \"bower_components\", \"jspm_packages\"]</code>, plus the value of <code>outDir</code> if one is specified.</p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" id='references' href='#references' name='references' aria-labelledby=\"references-config\">#</a> References - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Project references are a way to structure your TypeScript programs into smaller pieces.\nUsing Project References can greatly improve build and editor interaction times, enforce logical separation between components, and organize your code in new and improved ways.</p>\n<p>You can read more about how references works in the <a href=\"/docs/handbook/project-references.html\">Project References</a> section of the handbook</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='compilerOptions'>\n<h3 id=\"opciones-del-compilador\" style=\"position:relative;\"><a href=\"#opciones-del-compilador\" aria-label=\"opciones del compilador permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Opciones del compilador</h3>\n<p>Estas opciones constituyen la mayor parte de la configuración de TypeScript y cubre cómo debe funcionar el lenguaje.</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Basic_Options_6172\">Opciones del Proyecto</a></li>\n<li><a href=\"#Strict_Type_Checking_Options_6173\">Comprobaciones Estrictas</a></li>\n<li><a href=\"#Module_Resolution_Options_6174\">Resolución de Módulos</a></li>\n<li><a href=\"#Source_Map_Options_6175\">Mapas de Fuentes o 'Source Maps'</a></li>\n<li><a href=\"#Additional_Checks_6176\">Comprobaciones del Linter</a></li>\n<li><a href=\"#Experimental_Options_6177\">Experimental</a></li>\n<li><a href=\"#Advanced_Options_6178\">Avanzado</a></li>\n<li><a href=\"#Command_line_Options_6171\">Línea de comando</a></li>\n</ul></nav>\n<div>\n<div class='category'>\n<h2 id='Basic_Options_6172' ><a href='#Basic_Options_6172' name='Basic_Options_6172' aria-label=\"Link to the section Opciones del Proyecto\" aria-labelledby='Basic_Options_6172'>#</a>Opciones del Proyecto</h2>\n<p>Estos ajustes se utilizan para definir las expectativas de tiempo de ejecución de su proyecto, cómo y dónde quiere que se emita el código JavaScript y el nivel de integración que desea con el código JavaScript existente.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" id='allowJs' href='#allowJs' name='allowJs' aria-labelledby=\"allowJs-config\">#</a> Permitir JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite importar archivos JavaScript dentro de su proyecto, en lugar de sólo los archivos <code>.ts</code> y <code>.tsx</code>. Por ejemplo, este archivo JavaScript:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: card.js\nexport const defaultCardDeck = \"Heart\";\n</code></pre>\n<p>Al ser importado en un archivo de TypeScript se producirá un error:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2307\n// @filename: card.js\nmodule.exports.defaultCardDeck = \"Heart\";\n// ---cut---\n// @filename: index.ts\nimport { defaultCardDeck } from \"./card\";\n\nconsole.log(defaultCardDeck);\n</code></pre>\n<p>Se importa sin problemas cuando se habilita la opción <code>allowJs</code></p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: card.js\nmodule.exports.defaultCardDeck = \"Heart\";\n// ---cut---\n// @allowJs\n// @filename: index.ts\nimport { defaultCardDeck } from \"./card\";\n\nconsole.log(defaultCardDeck);\n</code></pre>\n<p>Esta opción puede ser usada como una forma de agregar progresivamente archivos TypeScript en un proyecto JavaScript al permitir los archivos con extensión <code>.ts</code> y <code>.tsx</code> convivir con los archivos JavaScript existentes.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#checkJs' aria-label=\"Jump to compiler option info for checkJs\" ><code>checkJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" id='checkJs' href='#checkJs' name='checkJs' aria-labelledby=\"checkJs-config\">#</a> Check JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Trabaja en conjunto con <code>allowJs</code>. Cuando <code>checkJs</code> está habilitado entonces los errores son reportados en archivos JavaScript. Esto es el\nequivalente a incluir <code>// @ts-check</code> en la parte superior de todos los archivos JavaScript que están incluidos en tu proyecto.</p>\n<p>Por ejemplo, lo siguiente es incorrecto de acuerdo a la definición <code>parseFloat</code> que viene con TypeScript.</p>\n<pre><code class=\"language-js\">// parseFloat solo toma un string\nmodule.exports.pi = parseFloat(3.124);\n</code></pre>\n<p>Cuando es importado a un modulo TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @allowJs\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.124);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n</code></pre>\n<p>No obtendrás ningún error. Sin embargo, si habilitas <code>checkJs</code> entonces obtendrás mensajes de error del archivo JavaScript.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\n// @allowjs: true\n// @checkjs: true\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.124);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowJs' aria-label=\"Jump to compiler option info for allowJs\" ><code>allowJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" id='composite' href='#composite' name='composite' aria-labelledby=\"composite-config\">#</a> Composite - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>La opción <code>composite</code> aplica ciertas restricciones que hacen posible para herramientas de compilado (incluyendo al mismo TypeScript, bajo el modo <code>--build</code>) rápidamente determinar si un proyecto ya ha sido compilado.</p>\n<p>Cuando esta configuración está habilitada:</p>\n<ul>\n<li>El ajuste <code>rootDir</code>, si no está explícitamente establecido, se aplica como predeterminado el directorio que contenga el archivo <code>tsconfig.json</code>.</li>\n<li>Todos los archivos de implementación deben coincidir por un patrón <code>include</code> o ser listados en el arreglo de <code>files</code>. Si esta restricción es infringida, <code>tsc</code> te informará cuáles archivos no fueron especificados.</li>\n<li><code>declaration</code> se predetermina a <code>verdadero</code>.</li>\n</ul>\n<p>Puedes encontrar la documentación en proyectos de TypeScript en <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">el manual</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.0\" href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" id='declaration' href='#declaration' name='declaration' aria-labelledby=\"declaration-config\">#</a> Declaration - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Genera los archivos <code>.d.ts</code> para cada archivo TypeScript o JavaScript dentro de tu proyecto.\nEstos archivos <code>.d.ts</code> son archivos de tipo definición que describen la API externa de tu módulo.\nCon los archivos <code>.d.ts</code>, herramientas como TypeScript pueden ofrecer intellisense (auto completado) y un escritura precisa para código no escrito.</p>\n<p>Cuando <code>declaration</code> esta establecida como <code>true</code>, al ejecutar el compilador con el siguiente código TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">export let holaMundo = \"hi\";\n</code></pre>\n<p>Generará un archivo <code>index.js</code> como el siguiente:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nexport let holaMundo = \"hi\";\n</code></pre>\n<p>Con su correspondiente <code>holaMundo.d.ts</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\nexport let holaMundo = \"hi\";\n</code></pre>\n<p>Cuando se trabaja con archivos <code>.d.ts</code> para archivos JavaScript, querrás usar <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a> o usar <a href=\"#outDir\"><code>outDir</code></a> para asegurarte que los archivos JavaScript no son sobre-escritos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code>, unless <code>composite</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#declarationDir' aria-label=\"Jump to compiler option info for declarationDir\" ><code>declarationDir</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap' aria-labelledby=\"declarationMap-config\">#</a> Declaration Map - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Genera un <em>source map</em> para los archivos <code>.d.ts</code> que representa al archivo fuente <code>.ts</code>.\nEsto permite a editores de código como VS Code ir al archivo <code>.ts</code> original cuando se usan características como <em>Ir a definición</em>.</p>\n<p>Se recomienda fuertemente que consideres habilitar esta característica si estás usando referencias de proyectos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration' aria-labelledby=\"downlevelIteration-config\">#</a> Downlevel Iteration - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Downleveling is TypeScript’s term for transpiling to an older version of JavaScript.\nThis flag is to enable support for a more accurate implementation of how modern JavaScript iterates through new concepts in older JavaScript runtimes.</p>\n<p>ECMAScript 6 added several new iteration primitives: the <code>for / of</code> loop (<code>for (el of arr)</code>), Array spread (<code>[a, ...b]</code>), argument spread (<code>fn(...args)</code>), and <code>Symbol.iterator</code>.\n<code>--downlevelIteration</code> allows for these iteration primitives to be used more accurately in ES5 environments if a <code>Symbol.iterator</code> implementation is present.</p>\n<h4 id=\"example-effects-on-for--of\" style=\"position:relative;\"><a href=\"#example-effects-on-for--of\" aria-label=\"example effects on for  of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Effects on <code>for / of</code></h4>\n<p>With this TypeScript code:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p>Without <code>downlevelIteration</code> enabled, a <code>for / of</code> loop on any object is downleveled to a traditional <code>for</code> loop:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES5\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p>This is often what people expect, but it’s not 100% compliant with ECMAScript iteration protocol.\nCertain strings, such as emoji (😜), have a <code>.length</code> of 2 (or even more!), but should iterate as 1 unit in a <code>for-of</code> loop.\nSee <a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">this blog post by Jonathan New</a> for a longer explanation.</p>\n<p>When <code>downlevelIteration</code> is enabled, TypeScript will use a helper function that checks for a <code>Symbol.iterator</code> implementation (either native or polyfill).\nIf this implementation is missing, you’ll fall back to index-based iteration.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES5\n// @downlevelIteration\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p>You can use <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> via <a href=\"#importHelpers\"><code>importHelpers</code></a> to reduce the amount of inline JavaScript too:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES5\n// @downlevelIteration\n// @importHelpers\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p><strong>Note:</strong> enabling <code>downlevelIteration</code> does not improve compliance if <code>Symbol.iterator</code> is not present in the runtime.</p>\n<h4 id=\"example-effects-on-array-spreads\" style=\"position:relative;\"><a href=\"#example-effects-on-array-spreads\" aria-label=\"example effects on array spreads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Effects on Array Spreads</h4>\n<p>This is an array spread:</p>\n<pre><code class=\"language-js\">// Make a new array who elements are 1 followed by the elements of arr2\nconst arr = [1, ...arr2];\n</code></pre>\n<p>Based on the description, it sounds easy to downlevel to ES5:</p>\n<pre><code class=\"language-js\">// The same, right?\nconst arr = [1].concat(arr2);\n</code></pre>\n<p>However, this is observably different in certain rare cases.\nFor example, if an array has a “hole” in it, the missing index will create an <em>own</em> property if spreaded, but will not if built using <code>concat</code>:</p>\n<pre><code class=\"language-js\">// Make an array where the '1' element is missing\nlet missing = [0, , 1];\nlet spreaded = [...missing];\nlet concated = [].concat(missing);\n\n// true\n\"1\" in spreaded;\n// false\n\"1\" in concated;\n</code></pre>\n<p>Just as with <code>for / of</code>, <code>downlevelIteration</code> will use <code>Symbol.iterator</code> (if present) to more accurately emulate ES 6 behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers' aria-labelledby=\"importHelpers-config\">#</a> Import Helpers - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>For certain downleveling operations, TypeScript uses some helper code for operations like extending class, spreading arrays or objects, and async operations.\nBy default, these helpers are inserted into files which use them.\nThis can result in code duplication if the same helper is used in many different modules.</p>\n<p>If the <code>importHelpers</code> flag is on, these helper functions are instead imported from the <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> module.\nYou will need to ensure that the <code>tslib</code> module is able to be imported at runtime.\nThis only affects modules; global script files will not attempt to import modules.</p>\n<p>For example, with this TypeScript:</p>\n<pre><code class=\"language-ts\">export function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>Turning on <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> and <code>importHelpers</code> is still false:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @downleveliteration\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>Then turning on both <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> and <code>importHelpers</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @downleveliteration\n// @importhelpers\n// @noErrors\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>You can use <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a> when you provide your own implementations of these functions.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noEmitHelpers' aria-label=\"Jump to compiler option info for noEmitHelpers\" ><code>noEmitHelpers</code></a>, <a href='#downlevelIteration' aria-label=\"Jump to compiler option info for downlevelIteration\" ><code>downlevelIteration</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" id='incremental' href='#incremental' name='incremental' aria-labelledby=\"incremental-config\">#</a> Incremental - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Tells TypeScript to save information about the project graph from the last compilation to files stored on disk. This\ncreates a series of <code>.tsbuildinfo</code> files in the same folder as your compilation output. They are not used by your\nJavaScript at runtime and can be safely deleted. You can read more about the flag in the <a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 release notes</a>.</p>\n<p>To control which folders you want to the files to be built to, use the config option <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <code>composite</code>, <code>false</code> otherwise</p>\n</li>\n<li><span>Related:</span><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules' aria-labelledby=\"isolatedModules-config\">#</a> Isolated Modules - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>While you can use TypeScript to produce JavaScript code from TypeScript code, it’s also common to use other transpilers such as <a href=\"https://babeljs.io\">Babel</a> to do this.\nHowever, other transpilers only operate on a single file at a time, which means they can’t apply code transforms that depend on understanding the full type system.\nThis restriction also applies to TypeScript’s <code>ts.transpileModule</code> API which is used by some build tools.</p>\n<p>These limitations can cause runtime problems with some TypeScript features like <code>const enum</code>s and <code>namespace</code>s.\nSetting the <code>isolatedModules</code> flag tells TypeScript to warn you if you write certain code that can’t be correctly interpreted by a single-file transpilation process.</p>\n<p>It does not change the behavior of your code, or otherwise change the behavior of TypeScript’s checking and emitting process.</p>\n<p>Some examples of code which does not work when <code>isolatedModules</code> is enabled.</p>\n<h4 id=\"exports-of-non-value-identifiers\" style=\"position:relative;\"><a href=\"#exports-of-non-value-identifiers\" aria-label=\"exports of non value identifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exports of Non-Value Identifiers</h4>\n<p>In TypeScript, you can import a <em>type</em> and then subsequently export it:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\nimport { someType, someFunction } from \"someModule\";\n\nsomeFunction();\n\nexport { someType, someFunction };\n</code></pre>\n<p>Because there’s no value for <code>someType</code>, the emitted <code>export</code> will not try to export it (this would be a runtime error in JavaScript):</p>\n<pre><code class=\"language-js\">export { someFunction };\n</code></pre>\n<p>Single-file transpilers don’t know whether <code>someType</code> produces a value or not, so it’s an error to export a name that only refers to a type.</p>\n<h4 id=\"non-module-files\" style=\"position:relative;\"><a href=\"#non-module-files\" aria-label=\"non module files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Module Files</h4>\n<p>If <code>isolatedModules</code> is set, all implementation files must be <em>modules</em> (which means it has some form of <code>import</code>/<code>export</code>). An error occurs if any file isn’t a module:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 1208\n// @isolatedModules\nfunction fn() {}\n</code></pre>\n<p>This restriction doesn’t apply to <code>.d.ts</code> files.</p>\n<h4 id=\"references-to-const-enum-members\" style=\"position:relative;\"><a href=\"#references-to-const-enum-members\" aria-label=\"references to const enum members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References to <code>const enum</code> members</h4>\n<p>In TypeScript, when you reference a <code>const enum</code> member, the reference is replaced by its actual value in the emitted JavaScript. Changing this TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n</code></pre>\n<p>To this JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments\ndeclare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n</code></pre>\n<p>Without knowledge of the values of these members, other transpilers can’t replace the references to <code>Numbers</code>, which would be a runtime error if left alone (since there are no <code>Numbers</code> object at runtime).\nBecause of this, when <code>isolatedModules</code> is set, it is an error to reference an ambient <code>const enum</code> member.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" id='jsx' href='#jsx' name='jsx' aria-labelledby=\"jsx-config\">#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controls how JSX constructs are emitted in JavaScript files.\nThis only affects output of JS files that started in <code>.tsx</code> files.</p>\n<ul>\n<li><code>react</code>: Emit <code>.js</code> files with JSX changed to the equivalent <code>React.createElement</code> calls</li>\n<li><code>react-jsx</code>: Emit <code>.js</code> files with the JSX changed to <code>_jsx</code> calls</li>\n<li><code>react-jsxdev</code>: Emit <code>.js</code> files with the JSX to <code>_jsx</code> calls</li>\n<li><code>preserve</code>: Emit <code>.jsx</code> files with the JSX unchanged</li>\n<li><code>react-native</code>: Emit <code>.js</code> files with the JSX unchanged</li>\n</ul>\n<h3 id=\"for-example\" style=\"position:relative;\"><a href=\"#for-example\" aria-label=\"for example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For example</h3>\n<p>This sample code:</p>\n<pre><code class=\"language-tsx\">export const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>Default: <code>\"react\"</code></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>Preserve: <code>\"preserve\"</code></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: preserve\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>React Native: <code>\"react-native\"</code></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-native\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>React 17 transform: <code>\"react-jsx\"</code><sup><a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">[1]</a></sup></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-jsx\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n<p>React 17 dev transform: <code>\"react-jsxdev\"</code><sup><a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">[1]</a></sup></p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">declare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\n// @showEmit\n// @noErrors\n// @jsx: react-jsxdev\nexport const helloWorld = () => &#x3C;h1>Hello world&#x3C;/h1>;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Allowed:</span><p><code>react</code>,<br/><code>react-jsx</code>,<br/><code>react-jsxdev</code>,<br/><code>react-native</code>,<br/><code>preserve</code></p>\n</li>\n<li><span>Related:</span><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a>, <a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.2\" href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" id='lib' href='#lib' name='lib' aria-labelledby=\"lib-config\">#</a> Lib - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript includes a default set of type definitions for built-in JS APIs (like <code>Math</code>), as well as type definitions for things found in browser environments (like <code>document</code>).\nTypeScript also includes APIs for newer JS features matching the <code>target</code> you specify; for example the definition for <code>Map</code> is available if <code>target</code> is <code>ES6</code> or newer.</p>\n<p>You may want to change these for a few reasons:</p>\n<ul>\n<li>Your program doesn’t run in a browser, so you don’t want the <code>\"dom\"</code> type definitions</li>\n<li>Your runtime platform provides certain JavaScript API objects (maybe through polyfills), but doesn’t yet support the full syntax of a given ECMAScript version</li>\n<li>You have polyfills or native implementations for some, but not all, of a higher level ECMAScript version</li>\n</ul>\n<h3 id=\"high-level-libraries\" style=\"position:relative;\"><a href=\"#high-level-libraries\" aria-label=\"high level libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Level libraries</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>Core definitions for all ES3 and ES5 functionality</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>Additional APIs available in ES2015 (also known as ES6) - <code>array.find</code>, <code>Promise</code>, <code>Proxy</code>, <code>Symbol</code>, <code>Map</code>, <code>Set</code>, <code>Reflect</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>Alias for “ES2015”</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>Additional APIs available in ES2016 - <code>array.include</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>Alias for “ES2016”</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>Additional APIs available in ES2017 - <code>Object.entries</code>, <code>Object.values</code>, <code>Atomics</code>, <code>SharedArrayBuffer</code>, <code>date.formatToParts</code>, typed arrays, etc.</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>Additional APIs available in ES2018 - <code>async</code> iterables, <code>promise.finally</code>, <code>Intl.PluralRules</code>, <code>rexexp.groups</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>Additional APIs available in ES2019 - <code>array.flat</code>, <code>array.flatMap</code>, <code>Object.fromEntries</code>, <code>string.trimStart</code>, <code>string.trimEnd</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>Additional APIs available in ES2020 - <code>string.matchAll</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>Additional APIs available in ESNext - This changes as the JavaScript specification evolves</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a> definitions - <code>window</code>, <code>document</code>, etc.</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td>APIs available in <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a> contexts</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td>APIs for the <a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"individual-library-components\" style=\"position:relative;\"><a href=\"#individual-library-components\" aria-label=\"individual library components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Individual library components</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>This list may be out of date, you can see the full list in the <a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">TypeScript source code</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>See main content</p>\n</li>\n<li><span>Related:</span><p><a href='#noLib' aria-label=\"Jump to compiler option info for noLib\" ><code>noLib</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" id='module' href='#module' name='module' aria-labelledby=\"module-config\">#</a> Module - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Sets the module system for the program. See the <a href='/docs/handbook/modules.html'>Modules</a> reference page for more information. You very likely want <code>\"CommonJS\"</code> for node projects.</p>\n<p>Changing <code>module</code> affects <a href=\"#moduleResolution\"><code>moduleResolution</code></a> which <a href=\"/docs/handbook/module-resolution.html\">also has a reference page</a>.</p>\n<p>Here’s some example output for this file:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: commonjs\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: umd\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: amd\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: system\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"esnext\" style=\"position:relative;\"><a href=\"#esnext\" aria-label=\"esnext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: esnext\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2020</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: es2020\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<p>If you are wondering about the difference between ES2015 and ES2020, ES2020 adds support for dynamic <code>import</code>s, and <code>import.meta</code>.</p>\n<h3 id=\"none\" style=\"position:relative;\"><a href=\"#none\" aria-label=\"none permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>None</code></h3>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: none\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p><code>CommonJS</code> (default if <code>target</code> is <code>ES3</code> or <code>ES5</code>),<br/>,<br/><code>ES2015</code>,<br/><code>ES2020</code>,<br/>,<br/><code>None</code>,<br/><code>UMD</code>,<br/><code>AMD</code>,<br/><code>System</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Related:</span><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" id='noEmit' href='#noEmit' name='noEmit' aria-labelledby=\"noEmit-config\">#</a> No Emit - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations.</p>\n<p>This makes room for another tool like <a href=\"https://babeljs.io\">Babel</a>, or <a href=\"https://github.com/swc-project/swc\">swc</a> to handle converting the TypeScript file to a file which can run inside a JavaScript environment.</p>\n<p>You can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" id='outDir' href='#outDir' name='outDir' aria-labelledby=\"outDir-config\">#</a> Out Dir - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If specified, <code>.js</code> (as well as <code>.d.ts</code>, <code>.js.map</code>, etc.) files will be emitted into this directory.\nThe directory structure of the original source files is preserved; see <a href=\"#rootDir\">rootDir</a> if the computed root is not what you intended.</p>\n<p>If not specified, <code>.js</code> files will be emitted in the same directory as the <code>.ts</code> files they were generated from:</p>\n<pre><code class=\"language-sh\">$ tsc\n\nexample\n├── index.js\n└── index.ts\n</code></pre>\n<p>With a <code>tsconfig.json</code> like this:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\"\n  }\n}\n</code></pre>\n<p>Running <code>tsc</code> with these settings moves the files into the specified <code>dist</code> folder:</p>\n<pre><code class=\"language-sh\">$ tsc\n\nexample\n├── dist\n│   └── index.js\n├── index.ts\n└── tsconfig.json\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" id='outFile' href='#outFile' name='outFile' aria-labelledby=\"outFile-config\">#</a> Out File - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If specified, all <em>global</em> (non-module) files will be concatenated into the single output file specified.</p>\n<p>If <code>module</code> is <code>system</code> or <code>amd</code>, all module files will also be concatenated into this file after all global content.</p>\n<p>Note: <code>outFile</code> cannot be used unless <code>module</code> is <code>None</code>, <code>System</code>, or <code>AMD</code>.\nThis option <em>cannot</em> be used to bundle CommonJS or ES6 modules.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" id='plugins' href='#plugins' name='plugins' aria-labelledby=\"plugins-config\">#</a> Plugins - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>List of language service plugins to run inside the editor.</p>\n<p>Language service plugins are a way to provide additional information to a user based on existing TypeScript files. They can enhance existing messages between TypeScript and an editor, or to provide their own error messages.</p>\n<p>For example:</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — Adds SQL linting with a template strings SQL builder.</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — Provides CSS linting inside template strings .</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — Provides eslint error messaging and fix-its inside the compiler’s output.</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> — Provides validation and auto-completion inside GraphQL query template strings.</li>\n</ul>\n<p>VS Code has the ability for a extension to <a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">automatically include language service plugins</a>, and so you may have some running in your editor without needing to define them in your <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" id='removeComments' href='#removeComments' name='removeComments' aria-labelledby=\"removeComments-config\">#</a> Remove Comments - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Strips all comments from TypeScript files when converting into JavaScript. Defaults to <code>false</code>.</p>\n<p>For example, this is a TypeScript file which has a JSDoc comment:</p>\n<pre><code class=\"language-ts\">/** The translation of 'Hello world' into Portuguese */\nexport const helloWorldPTBR = \"Olá Mundo\";\n</code></pre>\n<p>When <code>removeComments</code> is set to <code>true</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments: true\n/** The translation of 'Hello world' into Portuguese */\nexport const helloWorldPTBR = \"Olá Mundo\";\n</code></pre>\n<p>Without setting <code>removeComments</code> or having it as <code>false</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments: false\n/** The translation of 'Hello world' into Portuguese */\nexport const helloWorldPTBR = \"Olá Mundo\";\n</code></pre>\n<p>This means that your comments will show up in the JavaScript code.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" id='rootDir' href='#rootDir' name='rootDir' aria-labelledby=\"rootDir-config\">#</a> Root Dir - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>Default</strong>: The longest common path of all non-declaration input files. If <code>composite</code> is set, the default is instead the directory containing the <code>tsconfig.json</code> file.</p>\n<p>When TypeScript compiles files, it keeps the same directory structure in the output directory as exists in the input directory.</p>\n<p>For example, let’s say you have some input files:</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n</code></pre>\n<p>The inferred value for <code>rootDir</code> is the longest common path of all non-declaration input files, which in this case is <code>core/</code>.</p>\n<p>If your <code>outDir</code> was <code>dist</code>, TypeScript would write this tree:</p>\n<pre><code>MyProj\n├── dist\n│   ├── a.js\n│   ├── b.js\n│   ├── sub\n│   │   ├── c.js\n</code></pre>\n<p>However, you may have intended for <code>core</code> to be part of the output directory structure.\nBy setting <code>rootDir: \".\"</code> in <code>tsconfig.json</code>, TypeScript would write this tree:</p>\n<pre><code>MyProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js\n</code></pre>\n<p>Importantly, <code>rootDir</code> <strong>does not affect which files become part of the compilation</strong>.\nIt has no interaction with the <code>include</code>, <code>exclude</code>, or <code>files</code> <code>tsconfig.json</code> settings.</p>\n<p>Note that TypeScript will never write an output file to a directory outside of <code>outDir</code>, and will never skip emitting a file.\nFor this reason, <code>rootDir</code> also enforces that all files which need to be emitted are underneath the <code>rootDir</code> path.</p>\n<p>For example, let’s say you had this tree:</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts\n</code></pre>\n<p>It would be an error to specify <code>rootDir</code> as <code>core</code> <em>and</em> <code>include</code> as <code>*</code> because it creates a file (<code>helpers.ts</code>) that would need to be emitted <em>outside</em> the <code>outDir</code> (i.e. <code>../helpers.js</code>).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap' aria-labelledby=\"sourceMap-config\">#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables the generation of <a href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\">sourcemap files</a>.\nThese files allow debuggers and other tools to display the original TypeScript source code when actually working with the emitted JavaScript files.\nSource map files are emitted as <code>.js.map</code> (or <code>.jsx.map</code>) files next to the corresponding <code>.js</code> output file.</p>\n<p>The <code>.js</code> files will in turn contain a sourcemap comment to indicate where the files are to external tools, for example:</p>\n<pre><code class=\"language-ts\">// helloWorld.ts\nexport declare const helloWorld = \"hi\";\n</code></pre>\n<p>Compiling with <code>sourceMap</code> set to <code>true</code> creates the following JavaScript file:</p>\n<pre><code class=\"language-js\">// helloWorld.js\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.helloWorld = \"hi\";\n//# sourceMappingURL=// helloWorld.js.map\n</code></pre>\n<p>And this also generates this json map:</p>\n<pre><code class=\"language-json\">// helloWorld.js.map\n{\n  \"version\": 3,\n  \"file\": \"ex.js\",\n  \"sourceRoot\": \"\",\n  \"sources\": [\"../ex.ts\"],\n  \"names\": [],\n  \"mappings\": \";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" id='target' href='#target' name='target' aria-labelledby=\"target-config\">#</a> Target - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Modern browsers support all ES6 features, so <code>ES6</code> is a good choice.\nYou might choose to set a lower target if your code is deployed to older environments, or a higher target if your code is guaranteed to run in newer environments.</p>\n<p>The <code>target</code> setting changes which JS features are downleveled and which are left intact.\nFor example, an arrow function <code>() => this</code> will be turned into an equivalent <code>function</code> expression if <code>target</code> is ES5 or lower.</p>\n<p>Changing <code>target</code> also changes the default value of <a href=\"#lib\"><code>lib</code></a>.\nYou may “mix and match” <code>target</code> and <code>lib</code> settings as desired, but you could just set <code>target</code> for convenience.</p>\n<p>For developer platforms like Node will have a certain baselines for the their target depending on their version. You can find a set of community organized TSConfigs at <a href=\"https://github.com/tsconfig/bases#centralized-recommendations-for-tsconfig-bases\">tsconfig/bases</a> for common platforms and their versions.</p>\n<p>The special <code>ESNext</code> value refers to the highest version your version of TypeScript supports.\nThis setting should be used with caution, since it doesn’t mean the same thing between different TypeScript versions and can make upgrades less predictable.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>ES3</code></p>\n</li>\n<li><span>Allowed:</span><p><code>ES3</code> (default),<br/><code>ES5</code>,<br/><code>ES6</code>/<code>ES2015</code> (synonymous),<br/><code>ES7</code>/<code>ES2016</code>,<br/><code>ES2017</code>,<br/><code>ES2018</code>,<br/><code>ES2019</code>,<br/><code>ES2020</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile' aria-labelledby=\"tsBuildInfoFile-config\">#</a> TS Build Info File - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting lets you specify a file for storing incremental compilation information as a part of composite projects which enables faster\nbuilding of larger TypeScript codebases. You can read more about composite projects <a href=\"/docs/handbook/project-references.html\">in the handbook</a>.</p>\n<p>This option offers a way to configure the place where TypeScript keeps track of the files it stores on the disk to\nindicate a project’s build state — by default, they are in the same folder as your emitted JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>.tsbuildinfo</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Strict_Type_Checking_Options_6173' ><a href='#Strict_Type_Checking_Options_6173' name='Strict_Type_Checking_Options_6173' aria-label=\"Link to the section Comprobaciones Estrictas\" aria-labelledby='Strict_Type_Checking_Options_6173'>#</a>Comprobaciones Estrictas</h2>\n<p>Recomendamos usar la opción de <a href=\"#strict\">compilador <code>strict</code></a> para optar por todas las mejoras posibles disponibles en el desarrollo.</p>\n<p>TypeScript soporta un amplio espectro de patrones de JavaScript y permite por defecto bastante flexibilidad para acomodar estos estilos.\nA menudo la seguridad y la potencial escalabilidad de una base de código puede estar en desacuerdo con algunas de estas técnicas.</p>\n<p>Debido a la variedad de JavaScript soportado, la actualización a una nueva versión de TypeScript puede descubrir dos tipos de errores:</p>\n<ul>\n<li>Errores que ya existen en su base de código, que TypeScript ha descubierto porque el lenguaje ha refinado su comprensión de JavaScript.</li>\n<li>Un nuevo conjunto de errores que abordan un nuevo dominio de problemas.</li>\n</ul>\n<p>TypeScript normalmente añadirá un indicador de compilación para este último conjunto de errores, y por defecto estos no están habilitados.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict' aria-labelledby=\"alwaysStrict-config\">#</a> Siempre estricto - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Asegura que sus archivos son analizados en el modo estricto de ECMAScript, y emite “use strict” para cada archivo fuente.</p>\n<p>El modo <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">estricto de ECMAScript</a> fue introducido en ES5 y y proporciona ajustes de comportamiento en el tiempo de ejecución del motor de JavaScript para mejorar el rendimiento, y hace que un conjunto de errores se lancen en lugar de ignorarlos silenciosamente.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny' aria-labelledby=\"noImplicitAny-config\">#</a> No Implicit Any - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In some cases where no type annotations are present, TypeScript will fall back to a type of <code>any</code> for a variable when it cannot infer the type.</p>\n<p>This can cause some errors to be missed, for example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: false\nfunction fn(s) {\n  // No error?\n  console.log(s.subtr(3));\n}\nfn(42);\n</code></pre>\n<p>Turning on <code>noImplicitAny</code> however TypeScript will issue an error whenever it would have inferred <code>any</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7006\nfunction fn(s) {\n  console.log(s.subtr(3));\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis' aria-labelledby=\"noImplicitThis-config\">#</a> No Implicit This - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Raise error on ‘this’ expressions with an implied ‘any’ type.</p>\n<p>For example, the class below returns a function which tries to access <code>this.width</code> and <code>this.height</code> – but the context\nfor <code>this</code> inside the function inside <code>getAreaFunction</code> is not the instance of the Rectangle.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2683\nclass Rectangle {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  getAreaFunction() {\n    return function () {\n      return this.width * this.height;\n    };\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" id='strict' href='#strict' name='strict' aria-labelledby=\"strict-config\">#</a> Strict - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The <code>strict</code> flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.\nTurning this on is equivalent to enabling all of the <em>strict mode family</em> options, which are outlined below.\nYou can then turn off individual strict mode family checks as needed.</p>\n<p>Future versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program.\nWhen appropriate and possible, a corresponding flag will be added to disable that behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#alwaysStrict' aria-label=\"Jump to compiler option info for alwaysStrict\" ><code>alwaysStrict</code></a>, <a href='#strictNullChecks' aria-label=\"Jump to compiler option info for strictNullChecks\" ><code>strictNullChecks</code></a>, <a href='#strictBindCallApply' aria-label=\"Jump to compiler option info for strictBindCallApply\" ><code>strictBindCallApply</code></a>, <a href='#strictFunctionTypes' aria-label=\"Jump to compiler option info for strictFunctionTypes\" ><code>strictFunctionTypes</code></a>, <a href='#strictPropertyInitialization' aria-label=\"Jump to compiler option info for strictPropertyInitialization\" ><code>strictPropertyInitialization</code></a>, <a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a>, <a href='#noImplicitThis' aria-label=\"Jump to compiler option info for noImplicitThis\" ><code>noImplicitThis</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply' aria-labelledby=\"strictBindCallApply-config\">#</a> Strict Bind Call Apply - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will check that the built-in methods of functions <code>call</code>, <code>bind</code>, and <code>apply</code> are invoked with correct argument for the underlying function:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictBindCallApply: true\n// @errors: 2345\n\n// With strictBindCallApply on\nfunction fn(x: string) {\n  return parseInt(x);\n}\n\nconst n1 = fn.call(undefined, \"10\");\n\nconst n2 = fn.call(undefined, false);\n</code></pre>\n<p>Otherwise, these functions accept any arguments and will return <code>any</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictBindCallApply: false\n\n// With strictBindCallApply off\nfunction fn(x: string) {\n  return parseInt(x);\n}\n\n// Note: No error; return type is 'any'\nconst n = fn.call(undefined, false);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.2\" href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes' aria-labelledby=\"strictFunctionTypes-config\">#</a> Strict Function Types - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, this flag causes functions parameters to be checked more correctly.</p>\n<p>Here’s a basic example with <code>strictFunctionTypes</code> off:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictFunctionTypes: false\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\ntype StringOrNumberFunc = (ns: string | number) => void;\n\n// Unsafe assignment\nlet func: StringOrNumberFunc = fn;\n// Unsafe call - will crash\nfunc(10);\n</code></pre>\n<p>With <code>strictFunctionTypes</code> <em>on</em>, the error is correctly detected:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\ntype StringOrNumberFunc = (ns: string | number) => void;\n\n// Unsafe assignment is prevented\nlet func: StringOrNumberFunc = fn;\n</code></pre>\n<p>During development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM.\nBecause of this, the setting only applies to functions written in <em>function</em> syntax, not to those in <em>method</em> syntax:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Methodish = {\n  func(x: string | number): void;\n};\n\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\n// Ultimately an unsafe assignment, but not detected\nconst m: Methodish = {\n  func: fn,\n};\nm.func(10);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.6\" href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks' aria-labelledby=\"strictNullChecks-config\">#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When <code>strictNullChecks</code> is <code>false</code>, <code>null</code> and <code>undefined</code> are effectively ignored by the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>, <code>null</code> and <code>undefined</code> have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example with this TypeScript code, <code>users.find</code> has no guarantee that it will actually find a user, but you can\nwrite code as though it will:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictNullChecks: false\n// @target: ES2015\ndeclare const loggedInUsername: string;\n\nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n\nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\n</code></pre>\n<p>Setting <code>strictNullChecks</code> to <code>true</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339 2532\n// @target: ES2020\n// @strictNullChecks\ndeclare const loggedInUsername: string;\n\nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n\nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\n</code></pre>\n<p>The second example failed because the array’s <code>find</code> function looks a bit like this simplification:</p>\n<pre><code class=\"language-ts\">// When strictNullChecks: true\ntype Array = {\n  find(predicate: (value: any, index: number) => boolean): S | undefined;\n};\n\n// When strictNullChecks: false the undefined is removed from the type system,\n// allowing you to write code which assumes it always found a result\ntype Array = {\n  find(predicate: (value: any, index: number) => boolean): S;\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization' aria-labelledby=\"strictPropertyInitialization-config\">#</a> Strict Property Initialization - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2564\nclass UserAccount {\n  name: string;\n  accountType = \"user\";\n\n  email: string;\n  address: string | undefined;\n\n  constructor(name: string) {\n    this.name = name;\n    // Note that this.email is not set\n  }\n}\n</code></pre>\n<p>In the above case:</p>\n<ul>\n<li><code>this.name</code> is set specifically.</li>\n<li><code>this.accountType</code> is set by default.</li>\n<li><code>this.email</code> is not set and raises an error.</li>\n<li><code>this.address</code> is declared as potentially <code>undefined</code> which means it does not have to be set.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Module_Resolution_Options_6174' ><a href='#Module_Resolution_Options_6174' name='Module_Resolution_Options_6174' aria-label=\"Link to the section Resolución de Módulos\" aria-labelledby='Module_Resolution_Options_6174'>#</a>Resolución de Módulos</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports' aria-labelledby=\"allowSyntheticDefaultImports-config\">#</a> Permitir las importaciones sintéticas por defecto - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Cuando está activo, <code>allowSyntheticDefaultImports</code> le permite escribir una importación de la siguiente forma:</p>\n<pre><code class=\"language-ts\">import React from \"react\";\n</code></pre>\n<p>en vez de:</p>\n<pre><code class=\"language-ts\">import * as React from \"react\";\n</code></pre>\n<p>Cuando el módulo <strong>NO</strong> contiene una exportación por defecto.</p>\n<p>Esto no afecta al JavaScript emitido por TypeScript, sólo para la comprobación de tipos.\nEsta opción ajusta el comportamiento de TypeScript en línea con Babel, donde se emite código extra para hacer más cómoda el uso de una exportación por defecto de un módulo.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === \"system\" or esModuleInterop</p>\n</li>\n<li><span>Related:</span><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess' aria-labelledby=\"allowUmdGlobalAccess-config\">#</a> Permitir el acceso global a UMD - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Cuando está activo, <code>allowUmdGlobalAccess</code> le permite acceder a las exportaciones UMD como si fueran globales dentro de los archivos del módulo. Un módulo es un archivo que tiene importaciones y/o exportaciones. Sin esta opción, el usar una exportación proveniente de un módulo UMD requerirá una declaración de tipo importación.</p>\n<p>Un ejemplo de caso de uso de esta opción sería un proyecto web donde se sabe que la biblioteca particular (como jQuery o Lodash) siempre estará disponible en tiempo de ejecución, pero no puedes acceder a esta con una importación.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.5\" href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl' aria-labelledby=\"baseUrl-config\">#</a> URL Base - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Le permite establecer un directorio base para resolver nombres de módulos no absolutos.</p>\n<p>Puede definir una carpeta raíz donde puede hacer la resolución absoluta de los archivos. Por ejemplo:</p>\n<pre><code>baseUrl\n├── ex.ts\n├── hello\n│   └── world.ts\n└── tsconfig.json\n</code></pre>\n<p>Con <code>\"baseUrl\": \"./\"</code> dentro de este proyecto, TypeScript TypeScript buscará los archivos que empiezan en la misma carpeta que el archivo <code>tsconfig.json</code>.</p>\n<pre><code class=\"language-ts\">import { helloWorld } from \"hello/world\";\n\nconsole.log(helloWorld);\n</code></pre>\n<p>Si te cansas de que las importaciones siempre se vean como <code>\"../\"</code> o <code>\"./\"</code>. o que necesiten cambiarse al mover los archivos, esta es una gran manera de arreglar eso.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop' aria-labelledby=\"esModuleInterop-config\">#</a> ES Module Interop - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default (with <code>esModuleInterop</code> false or not set) TypeScript treats CommonJS/AMD/UMD modules similar to ES6 modules. In doing this, there are two parts in particular which turned out to be flawed assumptions:</p>\n<ul>\n<li>a namespace import like <code>import * as moment from \"moment\"</code> acts the same as <code>const moment = require(\"moment\")</code></li>\n<li>a default import like <code>import moment from \"moment\"</code> acts the same as <code>const moment = require(\"moment\").default</code></li>\n</ul>\n<p>This mis-match causes these two issues:</p>\n<ul>\n<li>the ES6 modules spec states that a namespace import (<code>import * as x</code>) can only be an object, by having TypeScript\ntreating it the same as <code>= require(\"x\")</code> then TypeScript allowed for the import to be treated as a function and be callable. This breaks the spec’s recommendations.</li>\n<li>while accurate to the ES6 modules spec, most libraries with CommonJS/AMD/UMD modules didn’t conform as strictly as TypeScript’s implementation.</li>\n</ul>\n<p>Turning on <code>esModuleInterop</code> will fix both of these problems in the code transpiled by TypeScript. The first changes the behavior in the compiler,the second is fixed by two new helper functions which provide a shim to ensure compatibility in the emitted JavaScript:</p>\n<pre><code class=\"language-ts\">import * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>With <code>esModuleInterop</code> disabled:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop: false\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>With <code>esModuleInterop</code> set to <code>true</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p><em>Note</em>: The namespace import <code>import * as fs from \"fs\"</code> only accounts for properties which <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\">are owned</a> (basically properties set on the object and not via the prototype chain) on the imported object. If the module you’re importing defines its API using inherited properties, you need to use the default import form (<code>import fs from \"fs\"</code>), or disable <code>esModuleInterop</code>.</p>\n<p><em>Note</em>: You can make JS emit terser by enabling <a href=\"#importHelpers\"><code>importHelpers</code></a>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop\n// @importHelpers\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>Enabling <code>esModuleInterop</code> will also enable <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowSyntheticDefaultImports' aria-label=\"Jump to compiler option info for allowSyntheticDefaultImports\" ><code>allowSyntheticDefaultImports</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution' aria-labelledby=\"moduleResolution-config\">#</a> Module Resolution - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the module resolution strategy: <code>'node'</code> (Node.js) or <code>'classic'</code> (used in TypeScript before the release of 1.6).\nYou probably won’t need to use <code>classic</code> in modern code.</p>\n<p>There is a handbook reference page on <a href=\"/docs/handbook/module-resolution.html\">Module Resolution</a></p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === <code>AMD</code> or <code>UMD</code> or <code>System</code> or <code>ES6</code>, then <code>Classic</code><br/><br/>Otherwise <code>Node</code></p>\n</li>\n<li><span>Related:</span><p><a href='#module' aria-label=\"Jump to compiler option info for module\" ><code>module</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" id='paths' href='#paths' name='paths' aria-labelledby=\"paths-config\">#</a> Paths - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A series of entries which re-map imports to lookup locations relative to the <code>baseUrl</code>, there is a larger coverage of <code>paths</code> in <a href=\"/docs/handbook/module-resolution.html#path-mapping\">the handbook</a>.</p>\n<p><code>paths</code> lets you declare how TypeScript should resolve an import in your <code>require</code>/<code>import</code>s.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\", // this must be specified if \"paths\" is specified.\n    \"paths\": {\n      \"jquery\": [\"node_modules/jquery/dist/jquery\"] // this mapping is relative to \"baseUrl\"\n    }\n  }\n}\n</code></pre>\n<p>This would allow you to be able to write <code>import \"jquery\"</code>, and get all of the correct typing locally.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"paths\": {\n        \"app/*\": [\"app/*\"],\n        \"config/*\": [\"app/_config/*\"],\n        \"environment/*\": [\"environments/*\"],\n        \"shared/*\": [\"app/_shared/*\"],\n        \"helpers/*\": [\"helpers/*\"],\n        \"tests/*\": [\"tests/*\"]\n    },\n}\n</code></pre>\n<p>In this case, you can tell the TypeScript file resolver to support a number of custom prefixes to find code.\nThis pattern can be used to avoid long relative paths within your codebase.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks' aria-labelledby=\"preserveSymlinks-config\">#</a> Preserve Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This is to reflect the same flag in Node.js; which does not resolve the real path of symlinks.</p>\n<p>This flag also exhibits the opposite behavior to Webpack’s <code>resolve.symlinks</code> option (i.e. setting TypeScript’s <code>preserveSymlinks</code> to true parallels setting Webpack’s <code>resolve.symlinks</code> to false, and vice-versa).</p>\n<p>With this enabled, references to modules and packages (e.g. <code>import</code>s and <code>/// &#x3C;reference type=\"...\" /></code> directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs' aria-labelledby=\"rootDirs-config\">#</a> Root Dirs - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Using <code>rootDirs</code>, you can inform the compiler that there are many “virtual” directories acting as a single root.\nThis allows the compiler to resolve relative module imports within these “virtual” directories, as if they were merged in to one directory.</p>\n<p>For example:</p>\n<pre><code> src\n └── views\n     └── view1.ts (can import \"./template1\", \"./view2`)\n     └── view2.ts (can import \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (can import \"./view1\", \"./view2\")\n</code></pre>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src/views\", \"generated/templates/views\"]\n  }\n}\n</code></pre>\n<p>This does not affect how TypeScript emits JavaScript, it only emulates the assumption that they will be able to\nwork via those relative paths at runtime.</p>\n<p><code>rootDirs</code> can be used to provide a separate “type layer” to files that are not TypeScript or JavaScript by providing a home for generated <code>.d.ts</code> files in another folder. This is technique is useful for bundled applications where you use <code>import</code> of files that aren’t necessarily code:</p>\n<pre><code class=\"language-sh\"> src\n └── index.ts\n └── css\n     └── main.css\n     └── navigation.css\n\n generated\n └── css\n     └── main.css.d.ts\n     └── navigation.css.d.ts\n</code></pre>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src\", \"generated\"]\n  }\n}\n</code></pre>\n<p>This technique lets you generate types ahead of time for the non-code source files. Imports then work naturally based off the source file’s location.\nFor example <code>./src/index.ts</code> can import the file <code>./src/css/main.css</code> and TypeScript will be aware of the bundler’s behavior for that filetype via the corresponding generated declaration file.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: main.css.d.ts\nexport const appClass = \"mainClassF3EC2\";\n// ---cut---\n// @filename: index.ts\nimport { appClass } from \"./main.css\";\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots' aria-labelledby=\"typeRoots-config\">#</a> Type Roots - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default all <em>visible</em> ”<code>@types</code>” packages are included in your compilation.\nPackages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>.\nFor example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p>\n<p>If <code>typeRoots</code> is specified, <em>only</em> packages under <code>typeRoots</code> will be included. For example:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"typeRoots\": [\"./typings\", \"./vendor/types\"]\n  }\n}\n</code></pre>\n<p>This config file will include <em>all</em> packages under <code>./typings</code> and <code>./vendor/types</code>, and no packages from <code>./node_modules/@types</code>.\nAll paths are relative to the <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#types' aria-label=\"Jump to compiler option info for types\" ><code>types</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" id='types' href='#types' name='types' aria-labelledby=\"types-config\">#</a> Types - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default all <em>visible</em> ”<code>@types</code>” packages are included in your compilation.\nPackages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>.\nFor example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p>\n<p>If <code>types</code> is specified, only packages listed will be included in the global scope. For instance:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"types\": [\"node\", \"jest\", \"express\"]\n  }\n}\n</code></pre>\n<p>This <code>tsconfig.json</code> file will <em>only</em> include <code>./node_modules/@types/node</code>, <code>./node_modules/@types/jest</code> and <code>./node_modules/@types/express</code>.\nOther packages under <code>node_modules/@types/*</code> will not be included.</p>\n<h3 id=\"what-does-this-affect\" style=\"position:relative;\"><a href=\"#what-does-this-affect\" aria-label=\"what does this affect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What does this affect?</h3>\n<p>This option does not affect how <code>@types/*</code> are included in your application code, for example if you had the above <code>compilerOptions</code> example with code like:</p>\n<pre><code class=\"language-ts\">import * as moment from \"moment\";\n\nmoment().format(\"MMMM Do YYYY, h:mm:ss a\");\n</code></pre>\n<p>The <code>moment</code> import would be fully typed.</p>\n<p>When you have this option set, by not including a module in the <code>types</code> array it:</p>\n<ul>\n<li>Will not add globals to your project (e.g <code>process</code> in node, or <code>expect</code> in Jest)</li>\n<li>Will not have exports appear as auto-import recommendations</li>\n</ul>\n<p>This feature differs from <a href=\"#typeRoots\"><code>typeRoots</code></a> in that it is about specifying only the exact types you want included, whereas <a href=\"#typeRoots\"><code>typeRoots</code></a> supports saying you want particular folders.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#typeRoots' aria-label=\"Jump to compiler option info for typeRoots\" ><code>typeRoots</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Source_Map_Options_6175' ><a href='#Source_Map_Options_6175' name='Source_Map_Options_6175' aria-label=\"Link to the section Mapas de Fuentes o 'Source Maps'\" aria-labelledby='Source_Map_Options_6175'>#</a>Mapas de Fuentes o 'Source Maps'</h2>\n<p>Con el fin de proporcionar herramientas de depuración e informes de fallos que tengan sentido para los desarrolladores, TypeScript soporta la emisión de archivos adicionales que se ajustan a los estándares del Mapa de Fuentes de JavaScript.</p>\n<p>Estos son emitidos como archivos <code>.map</code> que se localizan junto al archivo que representan.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap' aria-labelledby=\"inlineSourceMap-config\">#</a> Inline Source Map - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, instead of writing out a <code>.js.map</code> file to provide source maps, TypeScript will embed the source map content in the <code>.js</code> files.\nAlthough this results in larger JS files, it can be convenient in some scenarios.\nFor example, you might want to debug JS files on a webserver that doesn’t allow <code>.map</code> files to be served.</p>\n<p>Mutually exclusive with <a href=\"#sourceMap\"><code>sourceMap</code></a>.</p>\n<p>For example, with this TypeScript:</p>\n<pre><code class=\"language-ts\">const helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Converts to this JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Then enable building it with <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @inlineSourceMap\n// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources' aria-labelledby=\"inlineSources-config\">#</a> Inline Sources - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will include the original content of the <code>.ts</code> file as an embedded string in the source map.\nThis is often useful in the same cases as <code>inlineSourceMap</code>.</p>\n<p>Requires either <code>sourceMap</code> or <code>inlineSourceMap</code> to be set.</p>\n<p>For example, with this TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>By default converts to this JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Then enable building it with <code>inlineSources</code> and <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.\nNote that the end is different from the example in <a href=\"#inlineSourceMap\"><code>inlineSourceMap</code></a> because the source-map now contains the original source code also.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @inlineSources\n// @inlineSourceMap\n// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot' aria-labelledby=\"mapRoot-config\">#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where debugger should locate map files instead of generated locations.\nThis string is treated verbatim inside the source-map, for example:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"mapRoot\": \"https://my-website.com/debug/sourcemaps/\"\n  }\n}\n</code></pre>\n<p>Would declare that <code>index.js</code> will have sourcemaps at <code>https://my-website.com/debug/sourcemaps/index.js.map</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot' aria-labelledby=\"sourceRoot-config\">#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where a debugger should locate TypeScript files instead of relative source locations.\nThis string is treated verbatim inside the source-map where you can use a path or a URL:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"sourceRoot\": \"https://my-website.com/debug/source/\"\n  }\n}\n</code></pre>\n<p>Would declare that <code>index.js</code> will have a source file at <code>https://my-website.com/debug/source/index.ts</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Additional_Checks_6176' ><a href='#Additional_Checks_6176' name='Additional_Checks_6176' aria-label=\"Link to the section Comprobaciones del Linter\" aria-labelledby='Additional_Checks_6176'>#</a>Comprobaciones del Linter</h2>\n<p>Una colección de comprobaciones extras, que de alguna manera cruzan los límites del compilador contra el linter. Puede que prefieras usar una herramienta como <a href=\"https://github.com/typescript-eslint/typescript-eslint#typescript-eslint\">eslint</a> sobre estas opciones si buscas reglas más completas.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch' aria-labelledby=\"noFallthroughCasesInSwitch-config\">#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors for fallthrough cases in switch statements.\nEnsures that any non-empty case inside a switch statement includes either <code>break</code> or <code>return</code>.\nThis means you won’t accidentally ship a case fallthrough bug.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noFallthroughCasesInSwitch\n// @errors: 7029\nconst a: number = 6;\n\nswitch (a) {\n  case 0:\n    console.log(\"even\");\n  case 1:\n    console.log(\"odd\");\n    break;\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitOverride-config'><a aria-label=\"Link to the compiler option: noImplicitOverride\" id='noImplicitOverride' href='#noImplicitOverride' name='noImplicitOverride' aria-labelledby=\"noImplicitOverride-config\">#</a> noImplicitOverride - <code>noImplicitOverride</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.</p>\n<p>For example, imagine you are modeling a music album syncing system:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Album {\n  download() {\n    // Default behavior\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n</code></pre>\n<p>Then when you add support for machine-learning generated playlists, you refactor the <code>Album</code> class to have a ‘setup’ function instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Album {\n  setup() {\n    // Default behavior\n  }\n}\n\nclass MLAlbum extends Album {\n  setup() {\n    // Override to get info from algorithm\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n</code></pre>\n<p>In this case, TypeScript has provided no warning that <code>download</code> on <code>SharedAlbum</code> <em>expected</em> to override a function in the base class.</p>\n<p>Using <code>noImplicitOverride</code> you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword <code>override</code>.</p>\n<p>The following example has <code>noImplicitOverride</code> enabled, and you can see the error received when <code>override</code> is missing:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitOverride\n// @errors: 4114\nclass Album {\n  setup() {}\n}\n\nclass MLAlbum extends Album {\n  override setup() {}\n}\n\nclass SharedAlbum extends Album {\n  setup() {}\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.3\" href=\"/docs/handbook/release-notes/typescript-4-3.html\">4.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns' aria-labelledby=\"noImplicitReturns-config\">#</a> No Implicit Returns - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, TypeScript will check all code paths in a function to ensure they return a value.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2366 2322\nfunction lookupHeadphonesManufacturer(color: \"blue\" | \"black\"): string {\n  if (color === \"blue\") {\n    return \"beats\";\n  } else {\n    \"bose\";\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noPropertyAccessFromIndexSignature-config'><a aria-label=\"Link to the compiler option: noPropertyAccessFromIndexSignature\" id='noPropertyAccessFromIndexSignature' href='#noPropertyAccessFromIndexSignature' name='noPropertyAccessFromIndexSignature' aria-labelledby=\"noPropertyAccessFromIndexSignature-config\">#</a> noPropertyAccessFromIndexSignature - <code>noPropertyAccessFromIndexSignature</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting ensures consistency between accessing a field via the “dot” (<code>obj.key</code>) syntax, and “indexed” (<code>obj[\"key\"]</code>) and the way which the property is declared in the type.</p>\n<p>Without this flag, TypeScript will allow you to use the dot syntax to access fields which are not defined:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 4111\ndeclare function getSettings(): GameSettings;\n// ---cut---\ninterface GameSettings {\n  // Known up-front properties\n  speed: \"fast\" | \"medium\" | \"slow\";\n  quality: \"high\" | \"low\";\n\n  // Assume anything unknown to the interface\n  // is a string.\n  [key: string]: string;\n}\n\nconst settings = getSettings();\nsettings.speed;\n//       ^?\nsettings.quality;\n//       ^?\n\n// Unknown key accessors are allowed on\n// this object, and are `string`\nsettings.username;\n//       ^?\n</code></pre>\n<p>Turning the flag on will raise an error because the unknown field uses dot syntax instead of indexed syntax.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 4111\n// @noPropertyAccessFromIndexSignature\ndeclare function getSettings(): GameSettings;\ninterface GameSettings {\n  speed: \"fast\" | \"medium\" | \"slow\";\n  quality: \"high\" | \"low\";\n  [key: string]: string;\n}\n// ---cut---\nconst settings = getSettings();\nsettings.speed;\nsettings.quality;\n\n// This would need to be settings[\"username\"];\nsettings.username;\n//       ^?\n</code></pre>\n<p>The goal of this flag is to signal intent in your calling syntax about how certain you are this property exists.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUncheckedIndexedAccess-config'><a aria-label=\"Link to the compiler option: noUncheckedIndexedAccess\" id='noUncheckedIndexedAccess' href='#noUncheckedIndexedAccess' name='noUncheckedIndexedAccess' aria-labelledby=\"noUncheckedIndexedAccess-config\">#</a> noUncheckedIndexedAccess - <code>noUncheckedIndexedAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript has a way to describe objects which have unknown keys but known values on an object, via index signatures.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface EnvironmentVars {\n  NAME: string;\n  OS: string;\n\n  // Unknown properties are covered by this index signature.\n  [propName: string]: string;\n}\n\ndeclare const env: EnvironmentVars;\n\n// Declared as existing\nconst sysName = env.NAME;\nconst os = env.OS;\n//    ^?\n\n// Not declared, but because of the index\n// signature, then it is considered a string\nconst nodeEnv = env.NODE_ENV;\n//    ^?\n</code></pre>\n<p>Turning on <code>noUncheckedIndexedAccess</code> will add <code>undefined</code> to any un-declared field in the type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface EnvironmentVars {\n  NAME: string;\n  OS: string;\n\n  // Unknown properties are covered by this index signature.\n  [propName: string]: string;\n}\n// @noUncheckedIndexedAccess\n// ---cut---\ndeclare const env: EnvironmentVars;\n\n// Declared as existing\nconst sysName = env.NAME;\nconst os = env.OS;\n//    ^?\n\n// Not declared, but because of the index\n// signature, then it is considered a string\nconst nodeEnv = env.NODE_ENV;\n//    ^?\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals' aria-labelledby=\"noUnusedLocals-config\">#</a> No Unused Locals - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused local variables.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noUnusedLocals\n// @errors: 6133\nconst createKeyboard = (modelID: number) => {\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID };\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters' aria-labelledby=\"noUnusedParameters-config\">#</a> No Unused Parameters - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused parameters in functions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noUnusedParameters\n// @errors: 6133\nconst createDefaultKeyboard = (modelID: number) => {\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID: defaultModelID };\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Experimental_Options_6177' ><a href='#Experimental_Options_6177' name='Experimental_Options_6177' aria-label=\"Link to the section Experimental\" aria-labelledby='Experimental_Options_6177'>#</a>Experimental</h2>\n<p>TypeScript se esfuerza por incluir sólo las características confirmadas para ser añadidas en el lenguaje JavaScript.</p>\n<p>Ha habido casos en los que una característica es lo suficientemente convincente como para ser una excepción a esa regla, y estos viven como opciones de compilación experimentales.\nEs posible que una versión de estas características sea diferente a cuando se añaden al lenguaje JavaScript, y por lo tanto se consideran arriesgadas.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata' aria-labelledby=\"emitDecoratorMetadata-config\">#</a> Emit Decorator Metadata - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables experimental support for emitting type metadata for decorators which works with the module <a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>.</p>\n<p>For example, here is the JavaScript</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n<p>With <code>emitDecoratorMetadata</code> not set to true (default):</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\n// @showEmit\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n<p>With <code>emitDecoratorMetadata</code> set to true:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\n// @showEmit\n// @emitDecoratorMetadata\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#experimentalDecorators' aria-label=\"Jump to compiler option info for experimentalDecorators\" ><code>experimentalDecorators</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators' aria-labelledby=\"experimentalDecorators-config\">#</a> Experimental Decorators - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables <a href=\"https://github.com/tc39/proposal-decorators\">experimental support for decorators</a>, which is in stage 2\nof the TC39 standardization process.</p>\n<p>Decorators are a language feature which hasn’t yet been fully ratified into the JavaScript specification.\nThis means that the implementation version in TypeScript may differ from the implementation in JavaScript when it it decided by TC39.</p>\n<p>You can find out more about decorator support in TypeScript in <a href=\"/docs/handbook/decorators.html\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#emitDecoratorMetadata' aria-label=\"Jump to compiler option info for emitDecoratorMetadata\" ><code>emitDecoratorMetadata</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Advanced_Options_6178' ><a href='#Advanced_Options_6178' name='Advanced_Options_6178' aria-label=\"Link to the section Avanzado\" aria-labelledby='Advanced_Options_6178'>#</a>Avanzado</h2>\n<p>Opciones que ayudan a la depuración</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode' aria-labelledby=\"allowUnreachableCode-config\">#</a> Permitir código inalcanzable - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Cuando:</p>\n<ul>\n<li><code>undefined</code> (por defecto) proporciona sugerencias como advertencias a los editores</li>\n<li><code>true</code> código inalcanzable es ignorado</li>\n<li><code>false</code> genera errores de compilación cuando se detecta código inalcanzable</li>\n</ul>\n<p>Estas advertencias son sólo sobre el código que es evidentemente inalcanzable debido al uso de la sintaxis de JavaScript, por ejemplo:</p>\n<pre><code class=\"language-ts\">function fn(n: number) {\n  if (n > 5) {\n    return true;\n  } else {\n    return false;\n  }\n  return true;\n}\n</code></pre>\n<p>Con la opción <code>\"allowUnreachableCode\": false</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7027\n// @allowUnreachableCode: false\nfunction fn(n: number) {\n  if (n > 5) {\n    return true;\n  } else {\n    return false;\n  }\n  return true;\n}\n</code></pre>\n<p>Esto no afecta a los errores sobre la base del código que <em>parece</em> ser inalcanzable debido al análisis de tipos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels' aria-labelledby=\"allowUnusedLabels-config\">#</a> Permite notaciones sin utilizar - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Al configurarse como falsa, deshabilita las advertencias acerca de notaciones sin usar.</p>\n<p>Las notaciones son muy raras en JavaScript y tipicamente indican un intento por escribir un objeto literal:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7028\n// @allowUnusedLabels: false\nfunction verifyAge(age: number) {\n  // Forgot 'return' statement\n  if (age > 18) {\n    verified: true;\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies' aria-labelledby=\"assumeChangesOnlyAffectDirectDependencies-config\">#</a> Asume que los cambios sólo afectan a las dependencias directas - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Cuando esta opción se encuentra activa, TypeScript evitará volver a comprobar/reconstruir todos los archivos verdaderamente afectados, y sólo volverá a comprobar/reconstruir los archivos que han cambiado, así como los archivos que los importan directamente.</p>\n<p>Esto puede considerarse una implementación ‘rápida y suelta’ del algoritmo de vigilancia, que puede reducir drásticamente los tiempos de reconstrucción incremental a expensas de tener que ejecutar la construcción completa ocasionalmente para obtener todos los mensajes de error del compilador.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" id='charset' href='#charset' name='charset' aria-labelledby=\"charset-config\">#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>En versiones anteriores de TypeScript, esto controlaba que tipo de codificación era usada para leer archivos de texto del disco duro.\nAhora, TypeScript asume codificación UTF-8, pero detectará correctamente UTF-16 (BE y LE) o BOMs UTF-8.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>utf8</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir' aria-labelledby=\"declarationDir-config\">#</a> Declaration Dir - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ofrece una manera de configurar el directorio raíz donde los archivos de declaración son emitidos.</p>\n<pre><code>ejemplo\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>con <code>tsconfig.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"declarationDir\": \"./types\"\n  }\n}\n</code></pre>\n<p>Colocaría el archivo d.ts para <code>index.ts</code> en una carpeta <code>types</code>:</p>\n<pre><code>ejemplo\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> n/a</p>\n</li>\n<li><span>Related:</span><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics' aria-labelledby=\"diagnostics-config\">#</a> Diagnostics - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Usado para mostrar la información de diagnóstico para depurar. Este comando es un subconjunto de <a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a> que son resultados más enfocados al usuario, y más fáciles de interpretar.</p>\n<p>Si un ingeniero compilador de TypeScript le ha pedido que dé los resultados usando esta bandera en una compilación, en el cual no hay daño alguno al usar <a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a> en su lugar.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#extendedDiagnostics' aria-label=\"Jump to compiler option info for extendedDiagnostics\" ><code>extendedDiagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableReferencedProjectLoad-config'><a aria-label=\"Link to the compiler option: disableReferencedProjectLoad\" id='disableReferencedProjectLoad' href='#disableReferencedProjectLoad' name='disableReferencedProjectLoad' aria-labelledby=\"disableReferencedProjectLoad-config\">#</a> disableReferencedProjectLoad - <code>disableReferencedProjectLoad</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In multi-project TypeScript programs, TypeScript will load all of the available projects into memory in order to provide accurate results for editor responses which require a full knowledge graph like ‘Find All References’.</p>\n<p>If your project is large, you can use the flag <code>disableReferencedProjectLoad</code> to disable the automatic loading of all projects. Instead, projects are loaded dynamically as you open files through your editor.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit' aria-labelledby=\"disableSizeLimit-config\">#</a> Disable Size Limit - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>To avoid a possible memory bloat issues when working with very large JavaScript projects, there is an upper limit to the amount of memory TypeScript will allocate. Turning this flag on will remove the limit.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching' aria-labelledby=\"disableSolutionSearching-config\">#</a> Disable Solution Searching - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with <a href=\"/docs/handbook/project-references.html\">composite TypeScript projects</a>, this option provides a way to declare that you do not want a project to be included when using features like <em>find all references</em> or <em>jump to definition</em> in an editor.</p>\n<p>This flag is something you can use to increase responsiveness in large composite projects.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect' aria-labelledby=\"disableSourceOfProjectReferenceRedirect-config\">#</a> Disable Source Project Reference Redirect - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with <a href=\"/docs/handbook/project-references.html\">composite TypeScript projects</a>, this option provides a way to go <a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references\">back to the pre-3.7</a> behavior where d.ts files were used to as the boundaries between modules.\nIn 3.7 the source of truth is now your TypeScript files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM' aria-labelledby=\"emitBOM-config\">#</a> Emit BOM - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controls whether TypeScript will emit a <a href=\"https://wikipedia.org/wiki/Byte_order_mark\">byte order mark (BOM)</a> when writing output files.\nSome runtime environments require a BOM to correctly interpret a JavaScript files; others require that it is not present.\nThe default value of <code>false</code> is generally best unless you have a reason to change it.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly' aria-labelledby=\"emitDeclarationOnly-config\">#</a> Emit Declaration Only - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Only</em> emit <code>.d.ts</code> files; do not emit <code>.js</code> files.</p>\n<p>This setting is useful in two cases:</p>\n<ul>\n<li>You are using a transpiler other than TypeScript to generate your JavaScript.</li>\n<li>You are using TypeScript to only generate <code>d.ts</code> files for your consumers.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.8\" href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='explainFiles-config'><a aria-label=\"Link to the compiler option: explainFiles\" id='explainFiles' href='#explainFiles' name='explainFiles' aria-labelledby=\"explainFiles-config\">#</a> explainFiles - <code>explainFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.</p>\n<p>For example, with this project of just a single <code>index.ts</code> file</p>\n<pre><code class=\"language-sh\">example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>Using a <code>tsconfig.json</code> which has <code>explainFiles</code> set to true:</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"explainFiles\": true\n  }\n}\n</code></pre>\n<p>Running TypeScript against this folder would have output like this:</p>\n<pre><code>❯ tsc\nnode_modules/typescript/lib/lib.d.ts\n  Default library for target 'es5'\nnode_modules/typescript/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.dom.d.ts\n  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.webworker.importscripts.d.ts\n  Library referenced via 'webworker.importscripts' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.scripthost.d.ts\n  Library referenced via 'scripthost' from file 'node_modules/typescript/lib/lib.d.ts'\nindex.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'\n</code></pre>\n<p>The output above show:</p>\n<ul>\n<li>The initial lib.d.ts lookup based on <a href=\"#include\"><code>target</code></a>, and the chain of <code>.d.ts</code> files which are referenced</li>\n<li>The <code>index.ts</code> file located via the default pattern of <a href=\"#include\"><code>include</code></a></li>\n</ul>\n<p>This option is intended for debugging how a file has become a part of your compile.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics' aria-labelledby=\"extendedDiagnostics-config\">#</a> Extended Diagnostics - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use this flag to discover where TypeScript is spending its time when compiling.\nThis is a tool used for understanding the performance characteristics of your codebase overall.</p>\n<p>You can learn more about how to measure and understand the output in the performance <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">section of the wiki</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#diagnostics' aria-label=\"Jump to compiler option info for diagnostics\" ><code>diagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames' aria-labelledby=\"forceConsistentCasingInFileNames-config\">#</a> Force Consistent Casing In File Names - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript follows the case sensitivity rules of the file system it’s running on.\nThis can be problematic if some developers are working in a case-sensitive file system and others aren’t.\nIf a file attempts to import <code>fileManager.ts</code> by specifying <code>./FileManager.ts</code> the file will be found in a case-insensitive file system, but not on a case-sensitive file system.</p>\n<p>When this option is set, TypeScript will issue an error if a program tries to include a file by a casing different from the casing on disk.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile' aria-labelledby=\"generateCpuProfile-config\">#</a> Generate CPU Profile - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run. The CPU profile can provide insight into why your builds may be slow.</p>\n<p>This option can only be used from the CLI via: <code>--generateCpuProfile tsc-output.cpuprofile</code>.</p>\n<pre><code class=\"language-sh\">npm run tsc --generateCpuProfile tsc-output.cpuprofile\n</code></pre>\n<p>This file can be opened in a chromium based browser like Chrome or Edge Developer in <a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">the CPU profiler</a> section.\nYou can learn more about understanding the compilers performance in the <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">TypeScript wiki section on performance</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> profile.cpuprofile</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues' aria-labelledby=\"importsNotUsedAsValues-config\">#</a> Imports Not Used As Values - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag controls how <code>import</code> works, there are 3 different options:</p>\n<ul>\n<li><code>remove</code>: The default behavior of dropping <code>import</code> statements which only reference types.</li>\n<li><code>preserve</code>: Preserves all <code>import</code> statements whose values or types are never used. This can cause imports/side-effects to be preserved.</li>\n<li><code>error</code>: This preserves all imports (the same as the preserve option), but will error when a value import is only used as a type. This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.</li>\n</ul>\n<p>This flag works because you can use <code>import type</code> to explicitly create an <code>import</code> statement which should never be emitted into JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>remove,<br/>preserve,<br/>error</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory' aria-labelledby=\"jsxFactory-config\">#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Changes the function called in <code>.js</code> files when compiling JSX Elements using the classic JSX runtime.\nThe most common change is to use <code>\"h\"</code> or <code>\"preact.h\"</code> instead of the default <code>\"React.createElement\"</code> if using <code>preact</code>.</p>\n<p>For example, this TSX file:</p>\n<pre><code class=\"language-tsx\">import { h } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>With <code>jsxFactory: \"h\"</code> looks like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @showEmittedFile: index.js\n// @jsxFactory: h\n// @noErrors\n// @target: esnext\n// @module: commonjs\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel’s <code>/** @jsx h */</code> directive</a>.</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">/** @jsx h */\nimport { h } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>The factory chosen will also affect where the <code>JSX</code> namespace is looked up (for type checking information) before falling back to the global one.</p>\n<p>If the factory is defined as <code>React.createElement</code> (the default), the compiler will check for <code>React.JSX</code> before checking for a global <code>JSX</code>. If the factory is defined as <code>h</code>, it will check for <code>h.JSX</code> before a global <code>JSX</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.createElement</code></p>\n</li>\n<li><span>Allowed:</span><p>Any identifier or dotted identifier</p>\n</li>\n<li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFragmentFactory-config'><a aria-label=\"Link to the compiler option: jsxFragmentFactory\" id='jsxFragmentFactory' href='#jsxFragmentFactory' name='jsxFragmentFactory' aria-labelledby=\"jsxFragmentFactory-config\">#</a> jsxFragmentFactory - <code>jsxFragmentFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the JSX fragment factory function to use when targeting react JSX emit with <code>jsxFactory</code> compiler option is specified, e.g. <code>Fragment</code>.</p>\n<p>For example with this TSConfig:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  }\n}\n</code></pre>\n<p>This TSX file:</p>\n<pre><code class=\"language-tsx\">import { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  &#x3C;>\n    &#x3C;div>Hello&#x3C;/div>\n  &#x3C;/>\n);\n</code></pre>\n<p>Would look like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @showEmittedFile: index.js\n// @jsxFactory: h\n// @jsxFragmentFactory: Fragment\n// @noErrors\n// @target: esnext\n// @module: commonjs\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  &#x3C;>\n    &#x3C;div>Hello&#x3C;/div>\n  &#x3C;/>\n);\n</code></pre>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments\">Babel’s <code>/* @jsxFrag h */</code> directive</a>.</p>\n<p>For example:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">/** @jsx h */\n/** @jsxFrag Fragment */\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  &#x3C;>\n    &#x3C;div>Hello&#x3C;/div>\n  &#x3C;/>\n);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxImportSource-config'><a aria-label=\"Link to the compiler option: jsxImportSource\" id='jsxImportSource' href='#jsxImportSource' name='jsxImportSource' aria-labelledby=\"jsxImportSource-config\">#</a> jsxImportSource - <code>jsxImportSource</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Declares the module specifier to be used for importing the <code>jsx</code> and <code>jsxs</code> factory functions when using <a href=\"#jsx\"><code>jsx</code></a> as <code>\"react-jsx\"</code> or <code>\"react-jsxdev\"</code> which were introduced in TypeScript 4.1.</p>\n<p>With <a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">React 17</a> the library supports a new form of JSX transformation via a separate import.</p>\n<p>For example with this code:</p>\n<pre><code class=\"language-tsx\">import React from \"react\";\n\nfunction App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Using this TSConfig:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\"\n  }\n}\n</code></pre>\n<p>The emitted JavaScript from TypeScript is:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @noErrors\n// @jsx: react-jsx\n// @module: commonjs\n// @target: esnext\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\nimport React from \"react\";\n\nfunction App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>For example if you wanted to use <code>\"jsxImportSource\": \"preact\"</code>, you need a tsconfig like:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\",\n    \"types\": [\"preact\"]\n  }\n}\n</code></pre>\n<p>Which generates code like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @jsxImportSource: preact\n// @types: preact\n// @jsx: react-jsx\n// @target: esnext\n// @module: commonjs\n// @noErrors\n\nexport function App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Alternatively, you can use a per-file pragma to set this option, for example:</p>\n<pre><code class=\"language-tsx\">/** @jsxImportSource preact */\n\nexport function App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Would add <code>preact/jsx-runtime</code> as an import for the <code>_jsx</code> factory.</p>\n<p><em>Note:</em> In order for this to work like you would expect, your <code>tsx</code> file must include an <code>export</code> or <code>import</code> so that it is considered a module.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>react</code></p>\n</li>\n<li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly' aria-labelledby=\"keyofStringsOnly-config\">#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag changes the <code>keyof</code> type operator to return <code>string</code> instead of <code>string | number</code> when applied to a type with a string index signature.</p>\n<p>This flag is used to help people keep this behavior from <a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">before TypeScript 2.9’s release</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles' aria-labelledby=\"listEmittedFiles-config\">#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of generated files part of the compilation to the terminal.</p>\n<p>This flag is useful in two cases:</p>\n<ul>\n<li>You want to transpile TypeScript as a part of a build chain in the terminal where the filenames are processed in the next command.</li>\n<li>You are not sure that TypeScript has included a file you expected, as a part of debugging the <a href=\"#Project_Files_0\">file inclusion settings</a>.</li>\n</ul>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"listFiles\": true\n  }\n}\n</code></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts\n</code></pre>\n<p>Normally, TypeScript would return silently on success.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" id='listFiles' href='#listFiles' name='listFiles' aria-labelledby=\"listFiles-config\">#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files part of the compilation. This is useful when you are not sure that TypeScript has\nincluded a file you expected.</p>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"listFiles\": true\n  }\n}\n</code></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts\n</code></pre>\n<p>Note if using TypeScript 4.2, prefer <a href=\"#explainFiles\"><code>explainFiles</code></a> which offers an explanation of why a file was added too.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#explainFiles' aria-label=\"Jump to compiler option info for explainFiles\" ><code>explainFiles</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth' aria-labelledby=\"maxNodeModuleJsDepth-config\">#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The maximum dependency depth to search under <code>node_modules</code> and load JavaScript files.</p>\n<p>This flag is can only be used when <a href=\"#allowJs\"><code>allowJs</code></a> is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your <code>node_modules</code>.</p>\n<p>Ideally this should stay at 0 (the default), and <code>d.ts</code> files should be used to explicitly define the shape of modules.\nHowever, there are cases where you may want to turn this on at the expense of speed and potential accuracy.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>0</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" id='newLine' href='#newLine' name='newLine' aria-labelledby=\"newLine-config\">#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Platform specific</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers' aria-labelledby=\"noEmitHelpers-config\">#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Instead of importing helpers with <a href=\"#importHelpers\"><code>importHelpers</code></a>, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.</p>\n<p>For example, using this <code>async</code> function in ES5 requires a <code>await</code>-like function and <code>generator</code>-like function to run:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n<p>Which creates quite a lot of JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n<p>Which can be switched out with your own globals via this flag:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @noEmitHelpers\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError' aria-labelledby=\"noEmitOnError-config\">#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.</p>\n<p>This defaults to <code>false</code>, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.4\" href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation' aria-labelledby=\"noErrorTruncation-config\">#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not truncate error messages.</p>\n<p>With <code>false</code>, the default.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322 2454\nvar x: {\n  propertyWithAnExceedinglyLongName1: string;\n  propertyWithAnExceedinglyLongName2: string;\n  propertyWithAnExceedinglyLongName3: string;\n  propertyWithAnExceedinglyLongName4: string;\n  propertyWithAnExceedinglyLongName5: string;\n  propertyWithAnExceedinglyLongName6: string;\n  propertyWithAnExceedinglyLongName7: string;\n  propertyWithAnExceedinglyLongName8: string;\n};\n\n// String representation of type of 'x' should be truncated in error message\nvar s: string = x;\n</code></pre>\n<p>With <code>true</code></p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322 2454\n// @noErrorTruncation: true\nvar x: {\n  propertyWithAnExceedinglyLongName1: string;\n  propertyWithAnExceedinglyLongName2: string;\n  propertyWithAnExceedinglyLongName3: string;\n  propertyWithAnExceedinglyLongName4: string;\n  propertyWithAnExceedinglyLongName5: string;\n  propertyWithAnExceedinglyLongName6: string;\n  propertyWithAnExceedinglyLongName7: string;\n  propertyWithAnExceedinglyLongName8: string;\n};\n\n// String representation of type of 'x' should be truncated in error message\nvar s: string = x;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict' aria-labelledby=\"noImplicitUseStrict-config\">#</a> No Implicit Use Strict - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You shouldn’t need this. By default, when emitting a module file to a non-ES6 target, TypeScript emits a <code>\"use strict\";</code> prologue at the top of the file.\nThis setting disables the prologue.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES3\n// @module: AMD\n// @noImplicitUseStrict\n// @alwaysStrict: false\nexport function fn() {}\n</code></pre>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES3\n// @module: AMD\nexport function fn() {}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" id='noLib' href='#noLib' name='noLib' aria-labelledby=\"noLib-config\">#</a> No Lib - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables the automatic inclusion of any library files.\nIf this option is set, <code>lib</code> is ignored.</p>\n<p>TypeScript <em>cannot</em> compile anything without a set of interfaces for key primitives like: <code>Array</code>, <code>Boolean</code>,<code>Function</code>, <code>IArguments</code>, <code>Number</code>, <code>Object</code>, <code>RegExp</code>, and <code>String</code>. It is expected that if you use <code>noLib</code> you will be including your own type definitions for these.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#lib' aria-label=\"Jump to compiler option info for lib\" ><code>lib</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" id='noResolve' href='#noResolve' name='noResolve' aria-labelledby=\"noResolve-config\">#</a> No Resolve - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript will examine the initial set of files for <code>import</code> and <code>&#x3C;reference</code> directives and add these resolved files to your program.</p>\n<p>If <code>noResolve</code> is set, this process doesn’t happen.\nHowever, <code>import</code> statements are still checked to see if they resolve to a valid module, so you’ll need to make sure this is satisfied by some other means.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks' aria-labelledby=\"noStrictGenericChecks-config\">#</a> No Strict Generic Checks - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript will unify type parameters when comparing two generic functions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\n\ntype A = &#x3C;T, U>(x: T, y: U) => [T, U];\ntype B = &#x3C;S>(x: S, y: S) => [S, S];\n\nfunction f(a: A, b: B) {\n  b = a; // Ok\n  a = b; // Error\n}\n</code></pre>\n<p>This flag can be used to remove that check.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.4\" href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" id='out' href='#out' name='out' aria-labelledby=\"out-config\">#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#outFile\">outFile</a> instead.</p>\n<p>The <code>out</code> option computes the final file location in a way that is not predictable or consistent.\nThis option is retained for backward compatibility only and is deprecated.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums' aria-labelledby=\"preserveConstEnums-config\">#</a> Preserve Const Enums - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not erase <code>const enum</code> declarations in generated code. <code>const enum</code>s provide a way to reduce the overall memory footprint\nof your application at runtime by emitting the enum value instead of a reference.</p>\n<p>For example with this TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>The default <code>const enum</code> behavior is to convert any <code>Album.Something</code> to the corresponding number literal, and to remove a reference\nto the enum from the JavaScript completely.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>With <code>preserveConstEnums</code> set to <code>true</code>, the <code>enum</code> exists at runtime and the numbers are still emitted.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @preserveConstEnums: true\n// @showEmit\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>This essentially makes such <code>const enums</code> a source-code feature only, with no runtime traces.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace' aria-labelledby=\"reactNamespace-config\">#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#jsxFactory\"><code>--jsxFactory</code></a> instead. Specify the object invoked for <code>createElement</code> when targeting <code>react</code> for TSX files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>\"React\"</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule' aria-labelledby=\"resolveJsonModule-config\">#</a> Resolve JSON Module - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes\ngenerating a type for the <code>import</code> based on the static JSON shape.</p>\n<p>TypeScript does not support resolving JSON files by default:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2732\n// @filename: settings.json\n{\n    \"repo\": \"TypeScript\",\n    \"dry\": false,\n    \"debug\": false\n}\n// @filename: index.ts\nimport settings from \"./settings.json\";\n\nsettings.debug === true;\nsettings.dry === 2;\n</code></pre>\n<p>Enabling the option allows importing JSON, and validating the types in that JSON file.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2367\n// @resolveJsonModule\n// @module: commonjs\n// @moduleResolution: node\n// @filename: settings.json\n{\n    \"repo\": \"TypeScript\",\n    \"dry\": false,\n    \"debug\": false\n}\n// @filename: index.ts\nimport settings from \"./settings.json\";\n\nsettings.debug === true;\nsettings.dry === 2;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck' aria-labelledby=\"skipDefaultLibCheck-config\">#</a> Skip Default Lib Check - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#skipLibCheck\"><code>--skipLibCheck</code></a> instead. Skip type checking of default library declaration files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck' aria-labelledby=\"skipLibCheck-config\">#</a> Skip Lib Check - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Skip type checking of declaration files.</p>\n<p>This can save time during compilation at the expense of type-system accuracy. For example, two libraries could\ndefine two copies of the same <code>type</code> in an inconsistent way. Rather than doing a full check of all <code>d.ts</code> files, TypeScript\nwill type check the code you specifically refer to in your app’s source code.</p>\n<p>A common case where you might think to use <code>skipLibCheck</code> is when there are two copies of a library’s types in\nyour <code>node_modules</code>. In these cases, you should consider using a feature like <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a>\nto ensure there is only one copy of that dependency in your tree or investigate how to ensure there is\nonly one copy by understanding the dependency resolution to fix the issue without additional tooling.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal' aria-labelledby=\"stripInternal-config\">#</a> Strip Internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit declarations for code that has an <code>@internal</code> annotation in its JSDoc comment.\nThis is an internal compiler option; use at your own risk, because the compiler does not check that the result is valid.\nIf you are searching for a tool to handle additional levels of visibility within your <code>d.ts</code> files, look at <a href=\"https://api-extractor.com\">api-extractor</a>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>With the flag set to <code>false</code> (default):</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>With <code>stripInternal</code> set to <code>true</code> the <code>d.ts</code> emitted will be redacted.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @stripinternal\n// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>The JavaScript output is still the same.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors' aria-labelledby=\"suppressExcessPropertyErrors-config\">#</a> Suppress Excess Property Errors - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This disables reporting of excess property errors, such as the one shown in the following example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\ntype Point = { x: number; y: number };\nconst p: Point = { x: 1, y: 3, m: 10 };\n</code></pre>\n<p>This flag was added to help people migrate to the stricter checking of new object literals in <a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>.</p>\n<p>We don’t recommend using this flag in a modern codebase, you can suppress one-off cases where you need it using <code>// @ts-ignore</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors' aria-labelledby=\"suppressImplicitAnyIndexErrors-config\">#</a> Suppress Implicit Any Index Errors - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Turning <code>suppressImplicitAnyIndexErrors</code> on suppresses reporting the error about implicit anys when indexing into objects, as shown in the following example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: true\n// @suppressImplicitAnyIndexErrors: false\n// @strict: true\n// @errors: 7053\nconst obj = { x: 10 };\nconsole.log(obj[\"foo\"]);\n</code></pre>\n<p>Using <code>suppressImplicitAnyIndexErrors</code> is quite a drastic approach. It is recommended to use a <code>@ts-ignore</code> comment instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: true\n// @strict: true\nconst obj = { x: 10 };\n// @ts-ignore\nconsole.log(obj[\"foo\"]);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution' aria-labelledby=\"traceResolution-config\">#</a> Trace Resolution - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When you are trying to debug why a module isn’t being included.\nYou can set <code>traceResolutions</code> to <code>true</code> to have TypeScript print information about its resolution process for each processed file.</p>\n<p>You can read more about this in <a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields' aria-labelledby=\"useDefineForClassFields-config\">#</a> Use Define For Class Fields - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag is used as part of migrating to the upcoming standard version of class fields. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScript’s implementation but the same syntax.</p>\n<p>This flag switches to the upcoming ECMA runtime behavior.</p>\n<p>You can read more about the transition in <a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">the 3.7 release notes</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section Línea de comando\" aria-labelledby='Command_line_Options_6171'>#</a>Línea de comando</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput' aria-labelledby=\"preserveWatchOutput-config\">#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" id='pretty' href='#pretty' name='pretty' aria-labelledby=\"pretty-config\">#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Stylize errors and messages using color and context, this is on by default — offers you a chance to have less terse,\nsingle colored messages from the compiler.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='watchOptions'>\n<div>\n<section class='compiler-option'>\n<h3 id='watch-watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" id='watch-watchFile' href='#watch-watchFile' name='watch-watchFile' aria-labelledby=\"watch-watchFile-config\">#</a> watchFile - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The strategy for how individual files are watched.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li>\n<li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li>\n<li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system’s native events for file changes.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Attempt to use the operating system/file system’s native events to listen for changes on a file’s parent directory</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents,<br/>useFsEventsOnParentDirectory</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" id='watch-watchDirectory' href='#watch-watchDirectory' name='watch-watchDirectory' aria-labelledby=\"watch-watchDirectory-config\">#</a> watchDirectory - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every directory for changes several times a second at a fixed interval.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified directories will be checked less often.</li>\n<li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system’s native events for directory changes.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" id='watch-fallbackPolling' href='#watch-fallbackPolling' name='watch-fallbackPolling' aria-labelledby=\"watch-fallbackPolling-config\">#</a> fallbackPolling - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li>\n<li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li>\n<li><code>synchronousWatchDirectory</code>: Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in <code>node_modules</code> from running <code>npm install</code>), but you might want to disable it with this flag for some less-common setups.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-synchronousWatchDirectory-config'><a aria-label=\"Link to the compiler option: synchronousWatchDirectory\" id='watch-synchronousWatchDirectory' href='#watch-synchronousWatchDirectory' name='watch-synchronousWatchDirectory' aria-labelledby=\"watch-synchronousWatchDirectory-config\">#</a> synchronousWatchDirectory - <code>synchronousWatchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively. Instead of giving a small timeout to allow for potentially multiple edits to occur on a file.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"synchronousWatchDirectory\": true\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeDirectories-config'><a aria-label=\"Link to the compiler option: excludeDirectories\" id='watch-excludeDirectories' href='#watch-excludeDirectories' name='watch-excludeDirectories' aria-labelledby=\"watch-excludeDirectories-config\">#</a> excludeDirectories - <code>excludeDirectories</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to drastically reduce the number of files which are watched during <code>--watch</code>. This can be a useful way to reduce the number of open file which TypeScript tracks on Linux.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"excludeDirectories\": [\"**/node_modules\", \"_build\", \"temp/*\"]\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeFiles-config'><a aria-label=\"Link to the compiler option: excludeFiles\" id='watch-excludeFiles' href='#watch-excludeFiles' name='watch-excludeFiles' aria-labelledby=\"watch-excludeFiles-config\">#</a> excludeFiles - <code>excludeFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to remove a set of specific files from the files which are watched.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"excludeFiles\": [\"temp/file.ts\"]\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='typeAcquisition'>\n<h2 id=\"type-acquisition\" style=\"position:relative;\"><a href=\"#type-acquisition\" aria-label=\"type acquisition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Acquisition</h2>\n<p>Type Acquisition is only important for JavaScript projects. In TypeScript projects you need to include the types in your projects explicitly. However, for JavaScript projects, the TypeScript tooling will download types for your modules in the background and outside of your node_modules folder.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='type-enable-config'><a aria-label=\"Link to the compiler option: enable\" id='type-enable' href='#type-enable' name='type-enable' aria-labelledby=\"type-enable-config\">#</a> enable - <code>enable</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling type-acquisition in JavaScript projects:</p>\n<pre><code class=\"language-ts\">{\n  \"typeAcquisition\": {\n    \"enable\": false\n  }\n}\n</code></pre>\n<p>This could potentially remove all of the editor auto-completion for your project, if you want to get them back, you can use the <a href=\"https://www.typescriptlang.org/dt/search\">Type Search</a> to find <code>@types</code> packages or packages with types in them.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-include-config'><a aria-label=\"Link to the compiler option: include\" id='type-include' href='#type-include' name='type-include' aria-labelledby=\"type-include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If you have a JavaScript project where TypeScript needs additional guidance to understand global dependencies, or have disabled the built-in inference via <a href=\"#disableFilenameBasedTypeAcquisition\"><code>disableFilenameBasedTypeAcquisition</code></a>.</p>\n<p>You can use <code>include</code> to specify which types should be used from DefinitelyTyped:</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"include\": [\"jquery\"]\n  }\n}\n</code></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='type-exclude' href='#type-exclude' name='type-exclude' aria-labelledby=\"type-exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling the type-acquisition for a certain module in JavaScript projects. This can be useful for projects which include other libraries in testing infrastructure which aren’t needed in the main application.</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"exclude\": [\"jest\", \"mocha\"]\n  }\n}\n</code></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-disableFilenameBasedTypeAcquisition-config'><a aria-label=\"Link to the compiler option: disableFilenameBasedTypeAcquisition\" id='type-disableFilenameBasedTypeAcquisition' href='#type-disableFilenameBasedTypeAcquisition' name='type-disableFilenameBasedTypeAcquisition' aria-labelledby=\"type-disableFilenameBasedTypeAcquisition-config\">#</a> disableFilenameBasedTypeAcquisition - <code>disableFilenameBasedTypeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript’s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like <code>jquery.js</code> in your project would automatically download the types for JQuery from DefinitelyTyped.</p>\n<p>You can disable this via <code>disableFilenameBasedTypeAcquisition</code>.</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"disableFilenameBasedTypeAcquisition\": true\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"es","tsconfigMDPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/tsconfig-reference/output/es.md","intro":{"html":"<h2>Introducción a la referencia TSConfig</h2>\n<p>Un archivo TSConfig en un directorio indica que ese directorio es la raiz de un proyecto TypeScript or JavaScript. El archivo TSConfig puede ser tanto <code>tsconfig.json</code> o <code>jsconfig.json</code>, teniendo ambos el mismo comportamiento y el mismo conjunto de variables de configuración.</p>\n<p>Esta página cubre todas las diferentes opciones disponibles dentro de un archivo TSConfig. Comienza con una visión general de cada opción, luego se mueve a los atributos raíz en el archivo JSON, luego a las opciones de compilación <code>compilerOptions</code> que son el grueso principal y termina con las opciones de vigilancia <code>watchOptions</code>.</p>\n"},"categories":[{"display":"Top Level","anchor":"Top Level","options":[{"anchor":"files","name":"Files"},{"anchor":"extends","name":"Extends"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"references","name":"References"}]},{"display":"Opciones del Proyecto","anchor":"Basic_Options_6172","options":[{"anchor":"allowJs","name":"Permitir JS"},{"anchor":"checkJs","name":"Check JS"},{"anchor":"composite","name":"Composite"},{"anchor":"declaration","name":"Declaration"},{"anchor":"declarationMap","name":"Declaration Map"},{"anchor":"downlevelIteration","name":"Downlevel Iteration"},{"anchor":"importHelpers","name":"Import Helpers"},{"anchor":"incremental","name":"Incremental"},{"anchor":"isolatedModules","name":"Isolated Modules"},{"anchor":"jsx","name":"JSX"},{"anchor":"lib","name":"Lib"},{"anchor":"module","name":"Module"},{"anchor":"noEmit","name":"No Emit"},{"anchor":"outDir","name":"Out Dir"},{"anchor":"outFile","name":"Out File"},{"anchor":"plugins","name":"Plugins"},{"anchor":"removeComments","name":"Remove Comments"},{"anchor":"rootDir","name":"Root Dir"},{"anchor":"sourceMap","name":"Source Map"},{"anchor":"target","name":"Target"},{"anchor":"tsBuildInfoFile","name":"TS Build Info File"}]},{"display":"Comprobaciones Estrictas","anchor":"Strict_Type_Checking_Options_6173","options":[{"anchor":"alwaysStrict","name":"Siempre estricto"},{"anchor":"noImplicitAny","name":"No Implicit Any"},{"anchor":"noImplicitThis","name":"No Implicit This"},{"anchor":"strict","name":"Strict"},{"anchor":"strictBindCallApply","name":"Strict Bind Call Apply"},{"anchor":"strictFunctionTypes","name":"Strict Function Types"},{"anchor":"strictNullChecks","name":"Strict Null Checks"},{"anchor":"strictPropertyInitialization","name":"Strict Property Initialization"}]},{"display":"Resolución de Módulos","anchor":"Module_Resolution_Options_6174","options":[{"anchor":"allowSyntheticDefaultImports","name":"Permitir las importaciones sintéticas por defecto"},{"anchor":"allowUmdGlobalAccess","name":"Permitir el acceso global a UMD"},{"anchor":"baseUrl","name":"URL Base"},{"anchor":"esModuleInterop","name":"ES Module Interop"},{"anchor":"moduleResolution","name":"Module Resolution"},{"anchor":"paths","name":"Paths"},{"anchor":"preserveSymlinks","name":"Preserve Symlinks"},{"anchor":"rootDirs","name":"Root Dirs"},{"anchor":"typeRoots","name":"Type Roots"},{"anchor":"types","name":"Types"}]},{"display":"Mapas de Fuentes o 'Source Maps'","anchor":"Source_Map_Options_6175","options":[{"anchor":"inlineSourceMap","name":"Inline Source Map"},{"anchor":"inlineSources","name":"Inline Sources"},{"anchor":"mapRoot","name":"Map Root"},{"anchor":"sourceRoot","name":"Source Root"}]},{"display":"Comprobaciones del Linter","anchor":"Additional_Checks_6176","options":[{"anchor":"noFallthroughCasesInSwitch","name":"No Fallthrough Cases In Switch"},{"anchor":"noImplicitOverride","name":"noImplicitOverride"},{"anchor":"noImplicitReturns","name":"No Implicit Returns"},{"anchor":"noPropertyAccessFromIndexSignature","name":"noPropertyAccessFromIndexSignature"},{"anchor":"noUncheckedIndexedAccess","name":"noUncheckedIndexedAccess"},{"anchor":"noUnusedLocals","name":"No Unused Locals"},{"anchor":"noUnusedParameters","name":"No Unused Parameters"}]},{"display":"Experimental","anchor":"Experimental_Options_6177","options":[{"anchor":"emitDecoratorMetadata","name":"Emit Decorator Metadata"},{"anchor":"experimentalDecorators","name":"Experimental Decorators"}]},{"display":"Avanzado","anchor":"Advanced_Options_6178","options":[{"anchor":"allowUnreachableCode","name":"Permitir código inalcanzable"},{"anchor":"allowUnusedLabels","name":"Permite notaciones sin utilizar"},{"anchor":"assumeChangesOnlyAffectDirectDependencies","name":"Asume que los cambios sólo afectan a las dependencias directas"},{"anchor":"charset","name":"Charset"},{"anchor":"declarationDir","name":"Declaration Dir"},{"anchor":"diagnostics","name":"Diagnostics"},{"anchor":"disableReferencedProjectLoad","name":"disableReferencedProjectLoad"},{"anchor":"disableSizeLimit","name":"Disable Size Limit"},{"anchor":"disableSolutionSearching","name":"Disable Solution Searching"},{"anchor":"disableSourceOfProjectReferenceRedirect","name":"Disable Source Project Reference Redirect"},{"anchor":"emitBOM","name":"Emit BOM"},{"anchor":"emitDeclarationOnly","name":"Emit Declaration Only"},{"anchor":"explainFiles","name":"explainFiles"},{"anchor":"extendedDiagnostics","name":"Extended Diagnostics"},{"anchor":"forceConsistentCasingInFileNames","name":"Force Consistent Casing In File Names"},{"anchor":"generateCpuProfile","name":"Generate CPU Profile"},{"anchor":"importsNotUsedAsValues","name":"Imports Not Used As Values"},{"anchor":"jsxFactory","name":"JSX Factory"},{"anchor":"jsxFragmentFactory","name":"jsxFragmentFactory"},{"anchor":"jsxImportSource","name":"jsxImportSource"},{"anchor":"keyofStringsOnly","name":"Keyof Strings Only"},{"anchor":"listEmittedFiles","name":"List Emitted Files"},{"anchor":"listFiles","name":"List Files"},{"anchor":"maxNodeModuleJsDepth","name":"Max Node Module JS Depth"},{"anchor":"newLine","name":"New Line"},{"anchor":"noEmitHelpers","name":"No Emit Helpers"},{"anchor":"noEmitOnError","name":"No Emit On Error"},{"anchor":"noErrorTruncation","name":"No Error Truncation"},{"anchor":"noImplicitUseStrict","name":"No Implicit Use Strict"},{"anchor":"noLib","name":"No Lib"},{"anchor":"noResolve","name":"No Resolve"},{"anchor":"noStrictGenericChecks","name":"No Strict Generic Checks"},{"anchor":"out","name":"Out"},{"anchor":"preserveConstEnums","name":"Preserve Const Enums"},{"anchor":"reactNamespace","name":"React Namespace"},{"anchor":"resolveJsonModule","name":"Resolve JSON Module"},{"anchor":"skipDefaultLibCheck","name":"Skip Default Lib Check"},{"anchor":"skipLibCheck","name":"Skip Lib Check"},{"anchor":"stripInternal","name":"Strip Internal"},{"anchor":"suppressExcessPropertyErrors","name":"Suppress Excess Property Errors"},{"anchor":"suppressImplicitAnyIndexErrors","name":"Suppress Implicit Any Index Errors"},{"anchor":"traceResolution","name":"Trace Resolution"},{"anchor":"useDefineForClassFields","name":"Use Define For Class Fields"}]},{"display":"Línea de comando","anchor":"Command_line_Options_6171","options":[{"anchor":"preserveWatchOutput","name":"Preserve Watch Output"},{"anchor":"pretty","name":"Pretty"}]},{"display":"watchOptions","anchor":"watchOptions","options":[{"anchor":"watchFile","name":"watchFile"},{"anchor":"watchDirectory","name":"watchDirectory"},{"anchor":"fallbackPolling","name":"fallbackPolling"},{"anchor":"synchronousWatchDirectory","name":"synchronousWatchDirectory"},{"anchor":"excludeDirectories","name":"excludeDirectories"},{"anchor":"excludeFiles","name":"excludeFiles"}]},{"display":"typeAcquisition","anchor":"typeAcquisition","options":[{"anchor":"enable","name":"enable"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"disableFilenameBasedTypeAcquisition","name":"disableFilenameBasedTypeAcquisition"}]}]}},"staticQueryHashes":[]}