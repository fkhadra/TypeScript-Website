{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/jsdoc-supported-types.html","result":{"data":{"markdownRemark":{"id":"2f75b1d4-fa44-5fb4-bebb-22939619aa71","excerpt":"Dibawah ini adalah daftar anotasi yang didukung saat menggunakan JSDoc untuk menyediakan informasi di berkas Javscript. Perhatikan semua tag yang tidak secara…","html":"<p>Dibawah ini adalah daftar anotasi yang didukung saat menggunakan JSDoc untuk menyediakan informasi di berkas Javscript.</p>\n<p>Perhatikan semua tag yang tidak secara eksplisit dicantumkan di bawah (seperti <code>@ async</code>) belum didukung.</p>\n<ul>\n<li><code>@type</code></li>\n<li><code>@param</code> (atau <code>@arg</code> atau <code>@argument</code>)</li>\n<li><code>@returns</code> (atau <code>@return</code>)</li>\n<li><code>@typedef</code></li>\n<li><code>@callback</code></li>\n<li><code>@template</code></li>\n<li><code>@class</code> (atau <code>@constructor</code>)</li>\n<li><code>@this</code></li>\n<li><code>@extends</code> (atau <code>@augments</code>)</li>\n<li><code>@enum</code></li>\n</ul>\n<h4 id=\"ekstensi-class\" style=\"position:relative;\"><a href=\"#ekstensi-class\" aria-label=\"ekstensi class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ekstensi <code>class</code></h4>\n<ul>\n<li><a href=\"#jsdoc-property-modifiers\">Property Modifiers</a> <code>@public</code>, <code>@private</code>, <code>@protected</code>, <code>@readonly</code></li>\n</ul>\n<p>Artinya biasanya sama, atau <em>superset</em>, dari arti <em>tag</em> yang diberikan di <a href=\"https://jsdoc.app\">jsdoc.app</a>.\nKode dibawah mendeskripsikan perbedaan dan beberapa contoh dari setiap <em>tag</em>-nya.</p>\n<p><strong>Catatan:</strong> Anda bisa menggunakan <a href=\"/play?useJavaScript=truee=4#example/jsdoc-support\"><em>playground</em> untuk mengeksplor dukungan JSDoc</a>.</p>\n<h2 id=\"type\" style=\"position:relative;\"><a href=\"#type\" aria-label=\"type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@type</code></h2>\n<p>Anda dapat menggunakan <em>tag</em> “@type” dan mereferensikan nama jenis (baik primitif, ditentukan dalam deklarasi TypeScript, atau dalam <em>tag</em> “@typedef” JSDoc).\nAnda dapat menggunakan sebagian besar jenis JSDoc dan jenis TypeScript apa pun, dari <a href=\"/docs/handbookbasic-types.html\">yang paling dasar seperti <code>string</code></a> hingga <a href=\"/docs/handbook/advanced-types.html\">yang paling canggih, seperti jenis bersyarat</a>.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {string}\n */\nvar s;\n\n/** @type {Window} */\nvar win;\n\n/** @type {PromiseLike&#x3C;string>} */\nvar promisedString;\n\n// Anda dapat menentukan Elemen HTML dengan properti DOM\n/** @type {HTMLElement} */\nvar myElement = document.querySelector(selector);\nelement.dataset.myData = \"\";\n</code></pre>\n<p><code>@type</code> dapat menetapkan tipe gabungan — misalnya, sesuatu bisa berupa <em>string</em> atau <em>boolean</em>.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {(string | boolean)}\n */\nvar sb;\n</code></pre>\n<p>Perhatikan bahwa tanda kurung bersifat opsional untuk tipe gabungan.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {string | boolean}\n */\nvar sb;\n</code></pre>\n<p>Anda dapat menentukan tipe <em>array</em> menggunakan berbagai sintaks:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type {number[]} */\nvar ns;\n/** @type {Array.&#x3C;number>} */\nvar nds;\n/** @type {Array&#x3C;number>} */\nvar nas;\n</code></pre>\n<p>Anda juga dapat menentukan tipe <em>literal</em> objek.\nMisalnya, objek dengan properti ‘a’ (<em>string</em>) dan ‘b’ (angka) menggunakan sintaks berikut:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type {{ a: string, b: number }} */\nvar var9;\n</code></pre>\n<p>Anda dapat menentukan objek seperti <em>map</em> dan <em>array</em> menggunakan index signature <em>string</em> dan angka, menggunakan sintaks JSDoc standar atau sintaks TypeScript.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * Objek map yang memetakan kunci string dan nilainya bertipe number.\n *\n * @type {Object.&#x3C;string, number>}\n */\nvar stringToNumber;\n\n/** @type {Object.&#x3C;number, object>} */\nvar arrayLike;\n</code></pre>\n<p>Dua jenis sebelumnya sama dengan tipe TypeScript <code>{ [x: string]: number }</code> dan <code>{ [x: number]: any }</code>. Kompilator memahami kedua sintaks tersebut.</p>\n<p>Anda dapat menentukan jenis fungsi menggunakan sintaks TypeScript atau <em>Closure</em>:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type {function(string, boolean): number} Closure syntax */\nvar sbn;\n/** @type {(s: string, b: boolean) => number} TypeScript syntax */\nvar sbn2;\n</code></pre>\n<p>Atau anda dapat menggunakan type <code>Function</code> yang tidak ditentukan:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type {Function} */\nvar fn7;\n/** @type {function} */\nvar fn6;\n</code></pre>\n<p>Type lainnya dari <em>Closure</em> juga berfungsi:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {*} - can be 'any' type\n */\nvar star;\n/**\n * @type {?} - unknown type (same as 'any')\n */\nvar question;\n</code></pre>\n<h3 id=\"casts\" style=\"position:relative;\"><a href=\"#casts\" aria-label=\"casts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Casts</h3>\n<p>TypeScript meminjam sintaks <em>cast</em> dari <em>Closure</em>.\nIni memungkinkan Anda mentransmisikan tipe ke tipe lain dengan menambahkan tag <code>@type</code> sebelum ekspresi dalam tanda kurung.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {number | string}\n */\nvar numberOrString = Math.random() &#x3C; 0.5 ? \"hello\" : 100;\nvar typeAssertedNumber = /** @type {number} */ (numberOrString);\n</code></pre>\n<h3 id=\"impor-type\" style=\"position:relative;\"><a href=\"#impor-type\" aria-label=\"impor type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impor type</h3>\n<p>Anda bisa juga mengimpor deklarasi dari berkas lain menggunakan impor tipe.\nSintaks ini khusus untuk TypeScript dan berbeda dari standar JSDoc:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: types.d.ts\nexport type Pet = {\n  name: string,\n};\n\n// @filename: main.js\n/**\n * @param p { import(\"./types\").Pet }\n */\nfunction walk(p) {\n  console.log(`Walking ${p.name}...`);\n}\n</code></pre>\n<p>mengimpor tipe juga dapat digunakan di deklarasi tipe alias:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: types.d.ts\nexport type Pet = {\n  name: string,\n};\n// @filename: main.js\n// ---cut---\n/**\n * @typedef { import(\"./types\").Pet } Pet\n */\n\n/**\n * @type {Pet}\n */\nvar myPet;\nmyPet.name;\n</code></pre>\n<p>Mengimpor tipe dapat digunakan untuk mendapatkan tipe nilai dari modul, jika Anda tidak mengetahui jenisnya, atau jika nilai tersebut memiliki tipe yang besar yang dapat mengganggu untuk diketik:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: accounts.d.ts\nexport const userAccount = {\n  name: \"Name\",\n  address: \"An address\",\n  postalCode: \"\",\n  country: \"\",\n  planet: \"\",\n  system: \"\",\n  galaxy: \"\",\n  universe: \"\",\n};\n// @filename: main.js\n// ---cut---\n/**\n * @type {typeof import(\"./accounts\").userAccount }\n */\nvar x = require(\"./accounts\").userAccount;\n</code></pre>\n<h2 id=\"param-and-returns\" style=\"position:relative;\"><a href=\"#param-and-returns\" aria-label=\"param and returns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@param</code> and <code>@returns</code></h2>\n<p><code>@param</code> menggunakan jenis sintaks yang sama dengan <code>@type</code>, tapi dengan tambahan sebuah nama <em>parameter</em>.\n<em>Parameter</em> juga dapat dideklarasikan secara opsional dengan membungkus namanya menggunakan kurung siku:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// Parameter dapat dideklarasikan dalam berbagai bentuk sintaksis\n/**\n * @param {string}  p1 - Parameter string.\n * @param {string=} p2 - Opsional param (sintaks Closure)\n * @param {string} [p3] - Opsional param lainnya (sintaks JSDoc).\n * @param {string} [p4=\"test\"] - Opsional param dengan nilai standar\n * @return {string} Ini adalah hasilnya\n */\nfunction stringsStringStrings(p1, p2, p3, p4) {\n  // MELAKUKAN\n}\n</code></pre>\n<p>Demikian juga, untuk tipe kembalian suatu fungsi:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @return {PromiseLike&#x3C;string>}\n */\nfunction ps() {}\n\n/**\n * @returns {{ a: string, b: number }} - Dapat menggunakan '@returns' serta '@return'\n */\nfunction ab() {}\n</code></pre>\n<h2 id=\"typedef-callback-and-param\" style=\"position:relative;\"><a href=\"#typedef-callback-and-param\" aria-label=\"typedef callback and param permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@typedef</code>, <code>@callback</code>, and <code>@param</code></h2>\n<p><code>@ty[edef</code> juga dapat digunakan untuk mendefinisikan tipe yang kompleks.\nSintaks yang bekerja dengan <code>@params</code>.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @typedef {Object} SpecialType - buat type baru bernama 'SpecialType'\n * @property {string} prop1 - properti string dari SpecialType\n * @property {number} prop2 - properti number dari SpecialType\n * @property {number=} prop3 - properti number opsional dari SpecialType\n * @prop {number} [prop4] - properti number opsional dari SpecialType\n * @prop {number} [prop5=42] - properti number opsional dari SpecialType dengan nilai standar\n */\n\n/** @type {SpecialType} */\nvar specialTypeObject;\nspecialTypeObject.prop3;\n</code></pre>\n<p>Anda bisa menggunakan <code>object</code> atau <code>Object</code> pada baris pertama.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @typedef {object} SpecialType1 - buat tipe baru bernama 'SpecialType'\n * @property {string} prop1 - properti string dari SpecialType\n * @property {number} prop2 - properti number dari SpecialType\n * @property {number=} prop3 - opsional properti number dari SpecialType\n */\n\n/** @type {SpecialType1} */\nvar specialTypeObject1;\n</code></pre>\n<p><code>@params</code> memperbolehkan sintaks yang serupa untuk spesifikasi tipenya.\nPerhatikan bahwa nama properti <em>nested</em> harus diawali dengan nama <em>parameter</em>-nya:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @param {Object} options - Bentuknya sama dengan SpecialType di atas\n * @param {string} options.prop1\n * @param {number} options.prop2\n * @param {number=} options.prop3\n * @param {number} [options.prop4]\n * @param {number} [options.prop5=42]\n */\nfunction special(options) {\n  return (options.prop4 || 1001) + options.prop5;\n}\n</code></pre>\n<p><code>@callback</code> mirip dengan <code>@typedef</code>, tetapi ini menetapkan tipe fungsi daripada tipe objek:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @callback Predicate\n * @param {string} data\n * @param {number} [index]\n * @returns {boolean}\n */\n\n/** @type {Predicate} */\nconst ok = (s) => !(s.length % 2);\n</code></pre>\n<p>Tentu saja, salah satu dari jenis ini dapat dideklarasikan menggunakan sintaks TypeScript dalam satu baris <code>@typedef</code>:</p>\n<pre><code class=\"language-js\">/** @typedef {{ prop1: string, prop2: string, prop3?: number }} SpecialType */\n/** @typedef {(data: string, index?: number) => boolean} Predicate */\n</code></pre>\n<h2 id=\"template\" style=\"position:relative;\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@template</code></h2>\n<p>Anda dapat mendeklarasikan fungsi generik dengan tag <code>@template</code>:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @template T\n * @param {T} x - Parameter umum yang mengalir ke tipe kembalian\n * @return {T}\n */\nfunction id(x) {\n  return x;\n}\n\nconst a = id(\"string\");\nconst b = id(123);\nconst c = id({});\n</code></pre>\n<p>Gunakan koma atau beberapa <em>tag</em> untuk mendeklarasikan beberapa <em>parameter</em> tipe:</p>\n<pre><code class=\"language-js\">/**\n * @template T,U,V\n * @template W,X\n */\n</code></pre>\n<p>Anda juga bisa menentukan batasan tipe sebelum nama <em>parameter</em>-nya.\nHanya <em>parameter</em> tipe pertama dalam sebuah list yang dibatasi.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @template {string} K - K harus berupa string atau string literal\n * @template {{ serious(): string }} Seriousalizable - harus memiliki method serious\n * @param {K} key\n * @param {Seriousalizable} object\n */\nfunction seriousalize(key, object) {\n  // ????\n}\n</code></pre>\n<p>Mendeklarasikan kelas generik atau tipe yang tidak didukung.</p>\n<h2 id=\"classes\" style=\"position:relative;\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h2>\n<p>Kelas yang dapat dideklarasikan sebagai kelas ES6.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">class C {\n  /**\n   * @param {number} data\n   */\n  constructor(data) {\n    // tipe properti yang bisa diketahui\n    this.name = \"foo\";\n\n    // atau mengaturnya secara eksplisit\n    /** @type {string | null} */\n    this.title = null;\n\n    // atau hanya diberi anotasi, jika disetel di tempat lain\n    /** @type {number} */\n    this.size;\n\n    this.initialize(data); // Seharusnya galat, karena inisialisasi mengharapkan string\n  }\n  /**\n   * @param {string} s\n   */\n  initialize = function (s) {\n    this.size = s.length;\n  };\n}\n\nvar c = new C(0);\n\n// C seharusnya hanya dipanggil dengan yang baru,\n// tetapi karena ini adalah JavaScript, ini\n// diperbolehkan dan dianggap sebagai 'any'.\nvar result = C(1);\n</code></pre>\n<p>Mereka juga dapat dideklarasikan sebagai fungsi konstruktor, seperti yang dijelaskan di bagian selanjutnya:</p>\n<h2 id=\"constructor\" style=\"position:relative;\"><a href=\"#constructor\" aria-label=\"constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@constructor</code></h2>\n<p>Kompilator menyimpulkan fungsi konstruktor berdasarkan penetapan properti ini, tetapi Anda dapat membuat pemeriksaan lebih ketat dan saran lebih baik jika Anda menambahkan <em>tag</em> <code>@constructor</code>:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @checkJs\n// @errors: 2345 2348\n/**\n * @constructor\n * @param {number} data\n */\nfunction C(data) {\n  // tipe properti yang dapat diketahui\n  this.name = \"foo\";\n\n  // atau atur secara eksplisit\n  /** @type {string | null} */\n  this.title = null;\n\n  // atau hanya diberi anotasi, jika disetel di tempat lain\n  /** @type {number} */\n  this.size;\n\n  this.initialize(data);\n}\n/**\n * @param {string} s\n */\nC.prototype.initialize = function (s) {\n  this.size = s.length;\n};\n\nvar c = new C(0);\nc.size;\n\nvar result = C(1);\n</code></pre>\n<blockquote>\n<p>Catatan: Pesan galat hanya tampil di basis kode JS dengan <a href=\"/docs/handbook/tsconfig-json.html\">JSConfig</a> dan <a href=\"/tsconfig#checkJs\"><code>checkJS</code></a> yang diaktifkan.</p>\n</blockquote>\n<p>Dengan <code>@constructor</code>, <code>this</code> diperiksa didalam fungsi konstruktor <code>C</code>, jadi anda akan mendapatkan saran untuk method <code>initialize</code> dan sebuah galat jika anda memasukkan sebuah angka. Editor-mu mungkin akan menampilkan peringatan jika memanggil <code>C</code> daripada mengkonstruksikannya.</p>\n<p>Sayangnya, ini berarti bahwa fungsi konstruktor yang juga dapat dipanggil tidak dapat menggunakan <code>@constructor</code>.</p>\n<h2 id=\"this\" style=\"position:relative;\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@this</code></h2>\n<p>Kompilator biasanya dapat mengetahui tipe <code>this</code> ketika ia memiliki beberapa konteks untuk dikerjakan. Jika tidak, Anda dapat secara eksplisit menentukan jenis <code>this</code> dengan <code>@this</code>:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @this {HTMLElement}\n * @param {*} e\n */\nfunction callbackForLater(e) {\n  this.clientHeight = parseInt(e); // seharusnya baik-baik saja!\n}\n</code></pre>\n<h2 id=\"extends\" style=\"position:relative;\"><a href=\"#extends\" aria-label=\"extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@extends</code></h2>\n<p>Ketika kelas JavaScript memperluas <em>base class</em>, tidak ada tempat untuk menentukan seharusnya menggunakan parameter tipe yang seperti apa. <em>Tag</em> <code>@extends</code> menyediakan tempat untuk parameter jenis itu:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @template T\n * @extends {Set&#x3C;T>}\n */\nclass SortableSet extends Set {\n  // ...\n}\n</code></pre>\n<p>Perhatikan bahwa <code>@extends</code> hanya berfungsi dengan kelas. Saat ini, tidak ada cara untuk fungsi konstruktor memperluas kelas.</p>\n<h2 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@enum</code></h2>\n<p>Tag <code>@enum</code> memungkinkan Anda membuat <em>literal</em> objek yang tipe anggotanya spesifik. Tidak seperti kebanyakan <em>literal</em> objek di JavaScript, ini tidak mengizinkan anggota lain.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @enum {number} */\nconst JSDocState = {\n  BeginningOfLine: 0,\n  SawAsterisk: 1,\n  SavingComments: 2,\n};\n\nJSDocState.SawAsterisk;\n</code></pre>\n<p>Perhatikan bahwa <code>@enum</code> sangat berbeda, dan jauh lebih sederhana daripada <code>enum</code> TypeScript. Namun, tidak seperti <em>enum</em> TypeScript, <code>@enum</code> dapat memiliki tipe apa saja:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @enum {function(number): number} */\nconst MathFuncs = {\n  add1: (n) => n + 1,\n  id: (n) => -n,\n  sub1: (n) => n - 1,\n};\n\nMathFuncs.add1;\n</code></pre>\n<h2 id=\"lebih-banyak-contoh\" style=\"position:relative;\"><a href=\"#lebih-banyak-contoh\" aria-label=\"lebih banyak contoh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lebih banyak contoh</h2>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">class Foo {}\n// ---cut---\nvar someObj = {\n  /**\n   * @param {string} param1 - Dokumen tentang tugas properti\n   */\n  x: function (param1) {},\n};\n\n/**\n * Seperti halnya dokumen tentang tugas variabel\n * @return {Window}\n */\nlet someFunc = function () {};\n\n/**\n * Dan method kelas\n * @param {string} greeting Salam untuk digunakan\n */\nFoo.prototype.sayHi = (greeting) => console.log(\"Hi!\");\n\n/**\n * Dan ekspresi arrow function\n * @param {number} x - Pengganda\n */\nlet myArrow = (x) => x * x;\n\n/**\n * Artinya, ini juga berfungsi untuk komponen fungsi stateless di JSX\n * @param {{a: string, b: number}} test - Beberapa param\n */\nvar sfc = (test) => &#x3C;div>{test.a.charAt(0)}&#x3C;/div>;\n\n/**\n * Parameter bisa menjadi konstruktor kelas, menggunakan sintaks Closure.\n *\n * @param {{new(...args: any[]): object}} C - Kelas untuk mendaftar\n */\nfunction registerClass(C) {}\n\n/**\n * @param {...string} p1 - A 'rest' arg (array) of strings. (treated as 'any')\n */\nfunction fn10(p1) {}\n\n/**\n * @param {...string} p1 - A 'rest' arg (array) of strings. (treated as 'any')\n */\nfunction fn9(p1) {\n  return p1.join();\n}\n</code></pre>\n<h2 id=\"pola-yang-diketahui-tidak-didukung\" style=\"position:relative;\"><a href=\"#pola-yang-diketahui-tidak-didukung\" aria-label=\"pola yang diketahui tidak didukung permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pola yang diketahui TIDAK didukung</h2>\n<p>Mengacu pada objek di <em>value space</em> sebagai tipe yang tidak berfungsi, kecuali objek tersebut juga membuat tipe, seperti fungsi konstruktor.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">function aNormalFunction() {}\n/**\n * @type {aNormalFunction}\n */\nvar wrong;\n/**\n * Gunakan 'typeof' sebagai gantinya:\n * @type {typeof aNormalFunction}\n */\nvar right;\n</code></pre>\n<p><em>Postfix</em> sama dengan tipe properti dalam tipe <em>literal</em> objek yang tidak menetapkan properti opsional:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {{ a: string, b: number= }}\n */\nvar wrong;\n/**\n * Gunakan postfix question pada nama properti sebagai gantinya:\n * @type {{ a: string, b?: number }}\n */\nvar right;\n</code></pre>\n<p>Jenis <em>Nullable</em> hanya memiliki arti jika <code>strictNullChecks</code> aktif:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {?number}\n * With strictNullChecks: true  -- number | null\n * With strictNullChecks: false -- number\n */\nvar nullable;\n</code></pre>\n<p>Anda juga bisa menggunakan tipe gabungan:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {number | null}\n * With strictNullChecks: true  -- number | null\n * With strictNullChecks: false -- number\n */\nvar unionNullable;\n</code></pre>\n<p>Tipe <em>non-nullable</em> tidak memiliki arti dan diperlakukan seperti jenis aslinya:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {!number}\n * Hanya bertipe number\n */\nvar normal;\n</code></pre>\n<p>Tidak seperti sistem tipe JSDoc, TypeScript hanya memungkinkan Anda untuk menandai tipe, apakah mengandung null atau tidak.\nTidak ada non-nullability eksplisit - jika strictNullChecks aktif, <code>number</code> tidak dapat dinihilkan.\nJika tidak aktif, maka <code>number</code> adalah nullable.</p>\n<h3 id=\"tag-yang-tidak-didukung\" style=\"position:relative;\"><a href=\"#tag-yang-tidak-didukung\" aria-label=\"tag yang tidak didukung permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Tag</em> yang tidak didukung</h3>\n<p>TypeScript mengabaikan semua <em>tag</em> JSDoc yang tidak didukung.</p>\n<p><em>Tag</em> berikut memiliki isu terbuka untuk mendukungnya:</p>\n<ul>\n<li><code>@const</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/19672\">issue #19672</a>)</li>\n<li><code>@inheritdoc</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23215\">issue #23215</a>)</li>\n<li><code>@memberof</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/7237\">issue #7237</a>)</li>\n<li><code>@yields</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23857\">issue #23857</a>)</li>\n<li><code>{@link …}</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/35524\">issue #35524</a>)</li>\n</ul>\n<h2 id=\"extensi-kelas-js\" style=\"position:relative;\"><a href=\"#extensi-kelas-js\" aria-label=\"extensi kelas js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extensi kelas JS</h2>\n<h3 id=\"modifier-property-jsdoc\" style=\"position:relative;\"><a href=\"#modifier-property-jsdoc\" aria-label=\"modifier property jsdoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Modifier Property</em> JSDoc</h3>\n<p>Dari TypeScript 3.8 dan seterusnya, Anda dapat menggunakan JSDoc untuk mengubah properti kelas. Pertama adalah pengubah aksesibilitas: <code>@public</code>,<code>@private</code>, dan <code>@protected</code>.\nTag ini bekerja persis seperti <code>public</code>,<code>private</code>, dan <code>protected</code>, masing-masing berfungsi di TypeScript.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @errors: 2341\n// @ts-check\n\nclass Car {\n  constructor() {\n    /** @private */\n    this.identifier = 100;\n  }\n\n  printIdentifier() {\n    console.log(this.identifier);\n  }\n}\n\nconst c = new Car();\nconsole.log(c.identifier);\n</code></pre>\n<ul>\n<li><code>@public</code> ini berarti properti dapat diakses dari mana saja.</li>\n<li><code>@private</code> berarti bahwa properti hanya dapat digunakan di dalam kelas yang memuatnya.</li>\n<li><code>@protected</code> berarti bahwa properti hanya dapat digunakan di dalam kelas penampung, dan semua subkelas turunan, tetapi tidak pada instance kelas penampung yang berbeda.</li>\n</ul>\n<p>Selanjutnya, kita juga telah menambahkan <em>modifier</em> <code>@readonly</code> untuk memastikan bahwa sebuah properti hanya dapat di-<em>write</em> selama inisialisasi.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @errors: 2540\n// @ts-check\n\nclass Car {\n  constructor() {\n    /** @readonly */\n    this.identifier = 100;\n  }\n\n  printIdentifier() {\n    console.log(this.identifier);\n  }\n}\n\nconst c = new Car();\nconsole.log(c.identifier);\n</code></pre>","headings":[{"value":"Ekstensi class","depth":4},{"value":"@type","depth":2},{"value":"Casts","depth":3},{"value":"Impor type","depth":3},{"value":"@param and @returns","depth":2},{"value":"@typedef, @callback, and @param","depth":2},{"value":"@template","depth":2},{"value":"Classes","depth":2},{"value":"@constructor","depth":2},{"value":"@this","depth":2},{"value":"@extends","depth":2},{"value":"@enum","depth":2},{"value":"Lebih banyak contoh","depth":2},{"value":"Pola yang diketahui TIDAK didukung","depth":2},{"value":"Tag yang tidak didukung","depth":3},{"value":"Extensi kelas JS","depth":2},{"value":"Modifier Property JSDoc","depth":3}],"frontmatter":{"permalink":"/id/docs/handbook/jsdoc-supported-types.html","title":"Referensi JSDoc","disable_toc":null,"handbook":null,"oneline":"JSDoc apa yang didukung JavaScript dan TypeScript?","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Type Checking JavaScript Files","oneline":"How to add type checking to JavaScript files using TypeScript","permalink":"/docs/handbook/type-checking-javascript-files.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Membuat Berkas .d.ts dari berkas .js","oneline":"Bagaimana cara menambahkan hasil d.ts ke proyek JavaScript","permalink":"/id/docs/handbook/declaration-files/dts-from-js.html"}}}},"pageContext":{"id":"6-referensi-jsdoc","slug":"/id/docs/handbook/jsdoc-supported-types.html","repoPath":"/packages/documentation/copy/id/javascript/JSDoc Reference.md","previousID":"cedd21fa-eeaa-55f3-9c1b-b658afa2602a","nextID":"9513a7bc-b387-5f9b-8093-e2aa326da72b","lang":"id","modifiedTime":"2021-05-31T12:18:20.863Z"}},"staticQueryHashes":[]}