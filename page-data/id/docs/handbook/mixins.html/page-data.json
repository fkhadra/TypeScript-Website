{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/mixins.html","result":{"data":{"markdownRemark":{"id":"75c6e274-e79e-5f9f-b4d5-7c98ed1b42e8","excerpt":"Bersamaan dengan hierarki OO tradisional, cara populer lainnya untuk membangun kelas dari komponen yang dapat digunakan kembali adalah membangunnya denganâ€¦","html":"<p>Bersamaan dengan hierarki OO tradisional, cara populer lainnya untuk membangun kelas dari komponen yang dapat digunakan kembali adalah membangunnya dengan menggabungkan kelas parsial yang lebih sederhana.\nAnda mungkin sudah familiar dengan ide <em>mixin</em> atau ciri untuk bahasa seperti Scala, dan polanya juga mendapatkan popularitas di komunitas JavaScript.</p>\n<h2 id=\"bagaimana-cara-kerja-mixin\" style=\"position:relative;\"><a href=\"#bagaimana-cara-kerja-mixin\" aria-label=\"bagaimana cara kerja mixin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bagaimana Cara Kerja Mixin?</h2>\n<p>Pola ini bergantung pada penggunaan Generik dengan warisan kelas untuk memperluas kelas dasar.\nDukungan <em>mixin</em> terbaik TypeScript dilakukan melalui pola ekspresi kelas.\nAnda dapat membaca lebih lanjut mengenai bagaimana pola ini bekerja di <a href=\"https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\">Javscript disini</a>.</p>\n<p>Untuk memulai, kita akan butuh kelas yang akan diterapkan <em>mixin</em>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Sprite {\n  name = \"\";\n  x = 0;\n  y = 0;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n</code></pre>\n<p>Kemudian kamu butuh sebuah tipe dan sebuah fungsi factory yang mengembalikan sebuah ekspresi kelas untuk meng-<em>extend</em> kelas dasar.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Untuk memulai, kita membutuhkan tipe yang akan kita gunakan untuk memperluas kelas lain.\n// Tanggung jawab utama adalah mendeklarasikan bahwa tipe yang diteruskan adalah sebuah kelas.\n\ntype Constructor = new (...args: any[]) => {};\n\n// Mixin ini menambahkan properti scale, dengan getter dan setter\n// untuk mengubahnya dengan properti private yang dienkapsulasi:\n\nfunction Scale&#x3C;TBase extends Constructor>(Base: TBase) {\n  return class Scaling extends Base {\n    // Mixin mungkin tidak mendeklarasikan properti private/protected\n    // namun, Anda dapat menggunakan field private ES2020\n    _scale = 1;\n\n    setScale(scale: number) {\n      this._scale = scale;\n    }\n\n    get scale(): number {\n      return this._scale;\n    }\n  };\n}\n</code></pre>\n<p>Setelah hal-hal diatas siap, Anda dapat membuat kelas yang mewakili kelas dasar dengan <em>mixin</em> yang diterapkan:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Sprite {\n  name = \"\";\n  x = 0;\n  y = 0;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\ntype Constructor = new (...args: any[]) => {};\nfunction Scale&#x3C;TBase extends Constructor>(Base: TBase) {\n  return class Scaling extends Base {\n    // Mixin mungkin tidak mendeklarasikan properti private/protected\n    // namun, Anda dapat menggunakan field private ES2020\n    _scale = 1;\n\n    setScale(scale: number) {\n      this._scale = scale;\n    }\n\n    get scale(): number {\n      return this._scale;\n    }\n  };\n}\n// ---potong---\n// Buat kelas baru dari kelas Sprite,\n// dengan Mixin Scale:\nconst EightBitSprite = Scale(Sprite);\n\nconst flappySprite = new EightBitSprite(\"Bird\");\nflappySprite.setScale(0.8);\nconsole.log(flappySprite.scale);\n</code></pre>\n<h2 id=\"mixin-yang-dibatasi\" style=\"position:relative;\"><a href=\"#mixin-yang-dibatasi\" aria-label=\"mixin yang dibatasi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Mixin</em> yang Dibatasi</h2>\n<p>Dalam bentuk di atas, <em>mixin</em> tidak memiliki pengetahuan yang mendasari kelas yang dapat menyulitkan pembuatan desain yang diinginkan.</p>\n<p>Untuk memodelkan ini, kami memodifikasi tipe konstruktor asli untuk menerima argumen <em>generic</em>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Ini adalah konstruktor kita sebelumnya:\ntype Constructor = new (...args: any[]) => {};\n// Sekarang kami menggunakan versi generik yang dapat menerapkan batasan\n// pada kelas tempat mixin ini diterapkan\ntype GConstructor&#x3C;T = {}> = new (...args: any[]) => T;\n</code></pre>\n<p>Ini memungkinkan untuk membuat kelas yang hanya bekerja dengan kelas dasar yang dibatasi:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type GConstructor&#x3C;T = {}> = new (...args: any[]) => T;\nclass Sprite {\n  name = \"\";\n  x = 0;\n  y = 0;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n// ---potong---\ntype Positionable = GConstructor&#x3C;{ setPos: (x: number, y: number) => void }>;\ntype Spritable = GConstructor&#x3C;typeof Sprite>;\ntype Loggable = GConstructor&#x3C;{ print: () => void }>;\n</code></pre>\n<p>Kemudian Anda dapat membuat <em>mixin</em> yang hanya berfungsi jika Anda memiliki basis tertentu untuk dibangun:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type GConstructor&#x3C;T = {}> = new (...args: any[]) => T;\nclass Sprite {\n  name = \"\";\n  x = 0;\n  y = 0;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\ntype Positionable = GConstructor&#x3C;{ setPos: (x: number, y: number) => void }>;\ntype Spritable = GConstructor&#x3C;typeof Sprite>;\ntype Loggable = GConstructor&#x3C;{ print: () => void }>;\n// ---potong---\n\nfunction Jumpable&#x3C;TBase extends Positionable>(Base: TBase) {\n  return class Jumpable extends Base {\n    jump() {\n      // Mixin ini hanya akan berfungsi jika itu melewati kelas dasar\n      // yang telah ditetapkan setPos\n      // karena kendala Positionable.\n      this.setPos(0, 20);\n    }\n  };\n}\n</code></pre>\n<h2 id=\"pola-alternatif\" style=\"position:relative;\"><a href=\"#pola-alternatif\" aria-label=\"pola alternatif permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pola Alternatif</h2>\n<p>Versi sebelumnya dari dokumen ini merekomendasikan cara untuk menulis <em>mixin</em> di mana Anda membuat runtime dan hierarki tipe secara terpisah, lalu menggabungkannya di akhir:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\n// Setiap mixin adalah kelas ES tradisional\nclass Jumpable {\n  jump() {}\n}\n\nclass Duckable {\n  duck() {}\n}\n\n// Termasuk basisnya\nclass Sprite {\n  x = 0;\n  y = 0;\n}\n\n// Kemudian Anda membuat antarmuka yang menggabungkan mixin\n// yang diharapkan dengan nama yang sama sebagai basis Anda\ninterface Sprite extends Jumpable, Duckable {}\n// Terapkan mixin ke dalam kelas dasar melalui\n// JS saat runtime\napplyMixins(Sprite, [Jumpable, Duckable]);\n\nlet player = new Sprite();\nplayer.jump();\nconsole.log(player.x, player.y);\n\n// Ini dapat hidup di mana saja di basis kode Anda:\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name)\n      );\n    });\n  });\n}\n</code></pre>\n<p>Pola ini tidak terlalu bergantung pada kompilator, dan lebih banyak pada basis kode Anda untuk memastikan runtime dan sistem tipe tetap sinkron dengan benar.</p>\n<h2 id=\"kendala\" style=\"position:relative;\"><a href=\"#kendala\" aria-label=\"kendala permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kendala</h2>\n<p>Pola <em>mixin</em> didukung secara native di dalam kompilator TypeScript oleh <em>code flow analysis</em>.\nAda beberapa kasus di mana Anda dapat mencapai tepi dukungan <em>native</em>.</p>\n<h4 id=\"decorator-dan-mixin-4881\" style=\"position:relative;\"><a href=\"#decorator-dan-mixin-4881\" aria-label=\"decorator dan mixin 4881 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Decorator</em> dan <em>Mixin</em> <a href=\"https://github.com/microsoft/TypeScript/issues/4881\"><code>#4881</code></a></h4>\n<p>Anda tidak bisa menggunakan decorator untuk menyediakan <em>mixin</em> melalui <em>code flow analysis</em>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\n// @errors: 2339\n// Fungsi dekorator yang mereplikasi pola mixin:\nconst Pausable = (target: typeof Player) => {\n  return class Pausable extends target {\n    shouldFreeze = false;\n  };\n};\n\n@Pausable\nclass Player {\n  x = 0;\n  y = 0;\n}\n\n// Kelas Player tidak menggabungkan type dekorator:\nconst player = new Player();\nplayer.shouldFreeze;\n\n// Aspek runtime ini dapat direplikasi secara manual\n// melalui komposisi tipe atau penggabungan interface.\ntype FreezablePlayer = typeof Player &#x26; { shouldFreeze: boolean };\n\nconst playerTwo = (new Player() as unknown) as FreezablePlayer;\nplayerTwo.shouldFreeze;\n</code></pre>\n<h4 id=\"static-property-mixins-17829\" style=\"position:relative;\"><a href=\"#static-property-mixins-17829\" aria-label=\"static property mixins 17829 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Static Property Mixins</em> <a href=\"https://github.com/microsoft/TypeScript/issues/17829\"><code>#17829</code></a></h4>\n<p>Pola ekspresi kelas membuat <em>singletons</em>, jadi mereka tidak dapat dipetakan pada sistem tipe untuk mendukung tipe variabel yang berbeda.</p>\n<p>Anda bisa mengatasinya dengan menggunakan fungsi untuk mengembalikan kelas Anda yang berbeda berdasarkan generik:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function base&#x3C;T>() {\n  class Base {\n    static prop: T;\n  }\n  return Base;\n}\n\nfunction derived&#x3C;T>() {\n  class Derived extends base&#x3C;T>() {\n    static anotherProp: T;\n  }\n  return Derived;\n}\n\nclass Spec extends derived&#x3C;string>() {}\n\nSpec.prop; // string\nSpec.anotherProp; // string\n</code></pre>","headings":[{"value":"Bagaimana Cara Kerja Mixin?","depth":2},{"value":"Mixin yang Dibatasi","depth":2},{"value":"Pola Alternatif","depth":2},{"value":"Kendala","depth":2},{"value":"Decorator dan Mixin #4881","depth":4},{"value":"Static Property Mixins #17829","depth":4}],"frontmatter":{"permalink":"/id/docs/handbook/mixins.html","title":"Mixins","disable_toc":null,"handbook":null,"oneline":"Menggunakan pola mixin dengan TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"2-mixins","slug":"/id/docs/handbook/mixins.html","repoPath":"/packages/documentation/copy/id/reference/Mixins.md","lang":"id","modifiedTime":"2021-05-31T12:18:20.863Z"}},"staticQueryHashes":[]}