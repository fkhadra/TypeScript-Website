{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/id/tsconfig","result":{"data":{"markdownRemark":{"id":"985959c1-8bc2-568b-b8c4-e36e1546285f","html":"<div class=\"tsconfig raised main-content-block markdown\"><article id='Top Level'>\n<h3 id=\"root-fields\" style=\"position:relative;\"><a href=\"#root-fields\" aria-label=\"root fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Fields</h3>\n<p>Starting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" id='files' href='#files' name='files' aria-labelledby=\"files-config\">#</a> Files - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menentukan daftar berkas yang diijinkan untuk disertakan dalam program. Kesalahan terjadi jika salah satu berkas tidak dapat ditemukan.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {},\n  \"files\": [\n    \"core.ts\",\n    \"sys.ts\",\n    \"types.ts\",\n    \"scanner.ts\",\n    \"parser.ts\",\n    \"utilities.ts\",\n    \"binder.ts\",\n    \"checker.ts\",\n    \"tsc.ts\"\n  ]\n}\n</code></pre>\n<p>Ini berguna ketika Anda hanya memiliki sejumlah berkas kecil dan tidak perlu menggunakan <em>glob</em> untuk mereferensikan banyak berkas.\nJika Anda membutuhkannya, gunakan <a href=\"#include\"><code>include</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" id='extends' href='#extends' name='extends' aria-labelledby=\"extends-config\">#</a> Extends - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Nilai <code>extends</code> adalah string yang berisi jalur ke berkas konfigurasi lain untuk mewarisi.\nJalur tersebut mungkin menggunakan resolusi gaya Node.js.</p>\n<p>Konfigurasi dari berkas dasar dimuat terlebih dahulu, kemudian diganti dengan yang ada di berkas konfigurasi pewarisan. Semua jalur relatif yang ditemukan di berkas konfigurasi akan diselesaikan secara relatif terhadap berkas konfigurasi tempat asalnya.</p>\n<p>Perlu diperhatikan bahwa <code>files</code>,<code>include</code> dan <code>exclude</code> dari berkas konfigurasi pewaris menimpa konfigurasi yang berasal dari berkas konfigurasi asal, dan sirkularitas antara berkas konfigurasi tidak diperbolehkan.</p>\n<p>Saat ini, satu-satunya properti tingkat atas yang dikecualikan dari pewarisan adalah <a href=\"#references\"><code>referensi</code></a>.</p>\n<h4 id=\"contoh\" style=\"position:relative;\"><a href=\"#contoh\" aria-label=\"contoh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contoh</h4>\n<p><code>configs/base.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true\n  }\n}\n</code></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"extends\": \"./configs/base\",\n  \"files\": [\"main.ts\", \"supplemental.ts\"]\n}\n</code></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"extends\": \"./tsconfig\",\n  \"compilerOptions\": {\n    \"strictNullChecks\": false\n  }\n}\n</code></pre>\n<p>Properti dengan jalur relatif yang ditemukan di berkas konfigurasi, yang tidak dikecualikan dari pewarisan, akan diresolusikan secara relatif terhadap berkas konfigurasi tempat asalnya.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" id='include' href='#include' name='include' aria-labelledby=\"include-config\">#</a> Disertakan (_Include_) - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menentukan sebuah susunan nama berkas atau contoh berkas untuk dimasukkan ke dalam program.\nNama berkas ini diselesaikan dengan direktori yang berisi berkas <code>tsconfig.json</code>.</p>\n<pre><code class=\"language-json\">{\n  \"include\": [\"src/**/*\", \"tests/**/*\"]\n}\n</code></pre>\n<p>Yang akan mencakup:</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre><code>.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock\n</code></pre>\n<p><code>include</code> dan <code>exclude</code> mendukung karakter untuk membuat pola <em>global</em>:</p>\n<ul>\n<li><code>*</code> cocok dengan nol atau lebih karakter (tidak termasuk pemisah direktori)</li>\n<li><code>?</code> cocok dengan salah satu karakter (tidak termasuk pemisah direktori)</li>\n<li><code>**/</code> cocok dengan direktori apa pun yang bertingkat.</li>\n</ul>\n<p>Jika contoh umum tidak menyertakan ekstensi berkas, maka hanya berkas dengan ekstensi yang didukung yang disertakan (misalnya <code>.ts</code>,<code>.tsx</code>, dan <code>.d.ts</code> secara default, dengan<code>.js</code> dan <code>. jsx</code> jika <code>allowJs</code> disetel ke true).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> <code>[]</code> if <code>files</code> is specified, otherwise <code>[\"**/*\"]</code></p>\n</li>\n<li><span>Related:</span><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='exclude' href='#exclude' name='exclude' aria-labelledby=\"exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menentukan <em>array</em> nama berkas atau pola yang harus dilewati saat menyelesaikan <code>include</code>.</p>\n<p><strong>Penting</strong>: <code>exclude</code> <em>hanya</em> mengubah berkas mana yang disertakan sebagai hasil dari pengaturan <code>include</code>.\nBerkas yang ditentukan oleh <code>exclude</code> masih bisa menjadi bagian dari basis kode Anda karena pernyataan <code>import</code> dalam kode Anda, penyertaan <code>types</code>, perintah <code>/// &#x3C;reference</code>, atau ditentukan dalam daftar <code>files</code>.</p>\n<p>Ini bukan mekanisme yang <strong>mencegah</strong> berkas untuk disertakan dalam basis kode - ini hanya mengubah apa yang ditemukan oleh setelan <code>include</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>[\"node_modules\", \"bower_components\", \"jspm_packages\"]</code>, plus the value of <code>outDir</code> if one is specified.</p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" id='references' href='#references' name='references' aria-labelledby=\"references-config\">#</a> Referensi - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Referensi proyek adalah cara untuk menyusun program TypeScript Anda menjadi bagian-bagian yang lebih kecil.\nMenggunakan Referensi Proyek dapat sangat meningkatkan waktu interaksi build dan editor, menerapkan pemisahan logika antar komponen, dan mengatur kode Anda dengan cara yang baru dan lebih baik.</p>\n<p>Anda dapat membaca lebih lanjut tentang bagaimana cara kerja referensi di bagian <a href=\"/docs/handbook/project-references.html\">Referensi Proyek</a> dari buku pegangan</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='compilerOptions'>\n<h3 id=\"pilihan---pilihan-kompiler\" style=\"position:relative;\"><a href=\"#pilihan---pilihan-kompiler\" aria-label=\"pilihan   pilihan kompiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pilihan - Pilihan Kompiler</h3>\n<p>Banyak pilihan yang membuat jumlah besar di pengaturan Typescript’s dan itu juga meliputi bagaimana bahasa seharusnya bekerja.</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Basic_Options_6172\">Opsi Proyek</a></li>\n<li><a href=\"#Strict_Type_Checking_Options_6173\">Pemeriksaan Ketat</a></li>\n<li><a href=\"#Module_Resolution_Options_6174\">Resolusi Modul</a></li>\n<li><a href=\"#Source_Map_Options_6175\">Source Maps</a></li>\n<li><a href=\"#Additional_Checks_6176\">Pemeriksaan Linter</a></li>\n<li><a href=\"#Experimental_Options_6177\">Eksperimental</a></li>\n<li><a href=\"#Advanced_Options_6178\">Tingkat Lanjut</a></li>\n<li><a href=\"#Command_line_Options_6171\">Baris Perintah</a></li>\n</ul></nav>\n<div>\n<div class='category'>\n<h2 id='Basic_Options_6172' ><a href='#Basic_Options_6172' name='Basic_Options_6172' aria-label=\"Link to the section Opsi Proyek\" aria-labelledby='Basic_Options_6172'>#</a>Opsi Proyek</h2>\n<p>Pengaturan-pengaturan berikut digunakan untuk mendefinisikan target kompilasi dari proyek Anda, bagaimana dan dimana Anda ingin JavaScript dihasilkan dan level integrasi yang Anda inginkan dengan kode JavaScript yang telah ada.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" id='allowJs' href='#allowJs' name='allowJs' aria-labelledby=\"allowJs-config\">#</a> Allow JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Izinkan berkas JavaScript diimpor ke dalam proyek Anda, bukan hanya berkas <code>.ts</code> dan<code>.tsx</code>. Contoh, berkas JS ini:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: card.js\nexport const defaultCardDeck = \"Heart\";\n</code></pre>\n<p>Ketika diimpor ke berkas TypeScript akan menimbulkan galat seperti berikut:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2307\n// @filename: card.js\nmodule.exports.defaultCardDeck = \"Heart\";\n// ---cut---\n// @filename: index.ts\nimport { defaultCardDeck } from \"./card\";\n\nconsole.log(defaultCardDeck);\n</code></pre>\n<p>Impor berkas akan baik-baik saja saat <code>allowJs</code> diaktifkan:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: card.js\nmodule.exports.defaultCardDeck = \"Heart\";\n// ---cut---\n// @allowJs\n// @filename: index.ts\nimport { defaultCardDeck } from \"./card\";\n\nconsole.log(defaultCardDeck);\n</code></pre>\n<p>Opsi ini dapat digunakan sebagai cara untuk menambahkan berkas TypeScript secara bertahap ke dalam proyek JS dengan mengizinkan berkas <code>.ts</code> dan<code>.tsx</code> untuk hidup berdampingan dengan berkas JavaScript yang ada.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#checkJs' aria-label=\"Jump to compiler option info for checkJs\" ><code>checkJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" id='checkJs' href='#checkJs' name='checkJs' aria-labelledby=\"checkJs-config\">#</a> Check JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Bekerja sama dengan <code>allowJs</code>. Kapan <code>checkJs</code> diaktifkan kemudian kesalahan dilaporkan dalam berkas JavaScript. Ini termasuk <code>// @ts-check</code> di bagian atas semua berkas JavaScript yang disertakan dalam proyek Anda.</p>\n<p>Misalnya, ini adalah JavaScript yang salah menurut definisi jenis <code>parseFloat</code> yang disertakan dengan TypeScript:</p>\n<pre><code class=\"language-js\">// parseFloat only takes a string\nmodule.exports.pi = parseFloat(3.124);\n</code></pre>\n<p>Saat diimpor ke modul TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @allowJs\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.124);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n</code></pre>\n<p>Anda tidak akan mendapatkan kesalahan apapun. Namun, jika Anda mengaktifkan <code>checkJs</code> maka Anda akan mendapatkan pesan kesalahan dari berkas JavaScript.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\n// @allowjs: true\n// @checkjs: true\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.124);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowJs' aria-label=\"Jump to compiler option info for allowJs\" ><code>allowJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" id='composite' href='#composite' name='composite' aria-labelledby=\"composite-config\">#</a> Composite - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Opsi <code>composite</code> memberlakukan batasan tertentu yang memungkinkan untuk membangun (termasuk TypeScript\nsendiri, di bawah mode <code>--build</code>) untuk menentukan dengan cepat apakah proyek telah dibangun.</p>\n<p>Saat pengaturan ini aktif:</p>\n<ul>\n<li>Setelan <code>rootDir</code>, jika tidak disetel secara eksplisit, lokasi penyimpanan akan berisi berkas <code>tsconfig.json</code>.</li>\n<li>Semua berkas implementasi harus cocok dengan sebuah <code>include</code> contoh atau terdaftar dalam aturan <code>files</code>. Jika batasan ini dilanggar, <code>tsc</code> akan memberi tahu Anda berkas mana yang tidak ditentukan.</li>\n<li><code>declaration</code> defaults ke <code>true</code></li>\n</ul>\n<p>Anda dapat menemukan dokumentasi tentang proyek TypeScript di <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.0\" href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" id='declaration' href='#declaration' name='declaration' aria-labelledby=\"declaration-config\">#</a> Declaration - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Buat berkas <code>.d.ts</code> untuk setiap berkas TypeScript atau JavaScript di dalam proyek Anda.\nBerkas <code>.d.ts</code> ini adalah berkas definisi tipe yang menjelaskan API eksternal modul Anda.\nDengan berkas <code>.d.ts</code>, alat seperti TypeScript dapat menyediakan tipe yang masuk akal di dalam sumber kode tanpa definisi tipe data.</p>\n<p>Jika <code>declaration</code> disetel ke<code>true</code>, jalankan compiler dengan kode TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">export let helloWorld = \"hi\";\n</code></pre>\n<p>Akan menghasilkan berkas <code>index.js</code> seperti ini:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nexport let helloWorld = \"hi\";\n</code></pre>\n<p>Dengan <code>helloWorld.d.ts</code> yang sesuai:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\nexport let helloWorld = \"hi\";\n</code></pre>\n<p>Saat bekerja dengan berkas <code>.d.ts</code> untuk file JavaScript, Anda mungkin ingin menggunakan <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a> atau menggunakan <a href=\"#outDir\"><code>outDir</code></a> untuk memastikan bahwa berkas JavaScript tidak ditimpa.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code>, unless <code>composite</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#declarationDir' aria-label=\"Jump to compiler option info for declarationDir\" ><code>declarationDir</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap' aria-labelledby=\"declarationMap-config\">#</a> _Declaration Map_ - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menghasilkan peta sumber untuk berkas <code>.d.ts</code> yang mengarahkan kembali ke berkas sumber <code>.ts</code> asli.\nIni akan memungkinkan editor seperti VS Code untuk pergi ke file <code>.ts</code> asli saat menggunakan fitur seperti <em>Go to Definition</em>.</p>\n<p>Anda harus mempertimbangkan untuk mengaktifkan ini jika Anda menggunakan referensi proyek.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration' aria-labelledby=\"downlevelIteration-config\">#</a> Iterasi tingkat bawah - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Downleveling</em> adalah istilah TypeScript untuk mentranspilasi ke versi JavaScript yang lebih lama.\nSaran ini untuk mengaktifkan dukungan implementasi yang lebih akurat tentang bagaimana JavaScript modern melakukan iterasi melalui konsep baru di <em>runtime</em> JavaScript yang lebih lama.</p>\n<p>ECMAScript 6 menambahkan beberapa iterasi primitif baru: loop <code>for / of</code> (<code>for (el of arr)</code>), Array <em>spread</em> (<code>[a, ...b]</code>), penyebaran argumen (<code>fn(...args)</code>), dan <code>Symbol.iterator</code>.\n<code>--downlevelIteration</code> memungkinkan iterasi primitif ini digunakan secara lebih akurat dalam lingkungan ES5 jika ada implementasi <code>Symbol.iterator</code>.</p>\n<h4 id=\"contoh-efek-pada-for--of\" style=\"position:relative;\"><a href=\"#contoh-efek-pada-for--of\" aria-label=\"contoh efek pada for  of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contoh: Efek pada <code>for / of</code></h4>\n<p>Tanpa <code>downlevelIteration</code> aktif, loop <code>for / of</code> pada objek apa pun diturunkan levelnya menjadi loop <code>for</code> tradisional:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES5\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<p>Hal ini sering kali diharapkan orang, tetapi tidak 100% sesuai dengan perilaku ECMAScript 6.\nString tertentu, seperti emoji (😜), memiliki <code>.length</code> 2 (atau bahkan lebih!), Tetapi harus diiterasi sebagai 1 unit dalam loop <code>for-of</code>.\nLihat <a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">postingan blog oleh Jonathan New</a> untuk penjelasan yang lebih lengkap.</p>\n<p>Jika <code>downlevelIteration</code> diaktifkan, TypeScript akan menggunakan fungsi bantuan yang memeriksa implementasi <code>Symbol.iterator</code> (baik <em>native</em> maupun <em>polyfill</em>).\nJika implementasi ini hilang, Anda akan kembali ke iterasi berbasis <em>indeks</em>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES5\n// @downlevelIteration\n// @showEmit\nconst str = \"Hello!\";\nfor (const s of str) {\n  console.log(s);\n}\n</code></pre>\n<blockquote>\n<blockquote>\n<p><strong>Catatan:</strong> memungkinkan <code>downlevelIteration</code> tidak meningkatkan kepatuhan jika <code>Symbol.iterator</code> tidak ada saat runtime.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"contoh-efek-pada-array-spreads\" style=\"position:relative;\"><a href=\"#contoh-efek-pada-array-spreads\" aria-label=\"contoh efek pada array spreads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contoh: Efek pada Array <em>Spreads</em></h4>\n<p>ini adalah array <em>spread</em>:</p>\n<pre><code class=\"language-js\">// Buat array baru yang elemennya 1 diikuti dengan elemen arr2\nconst arr = [1, ...arr2];\n</code></pre>\n<p>Berdasarkan uraian tersebut, sepertinya mudah untuk menurunkan ke ES5:</p>\n<pre><code class=\"language-js\">// Sama kan?\nconst arr = [1].concat(arr2);\n</code></pre>\n<p>Namun, ini sangat berbeda dalam kasus tertentu yang jarang terjadi.\nMisalnya, jika sebuah array memiliki “lubang” di dalamnya, indeks yang hilang akan membuat properti <em>own</em> jika disebarkan, tetapi tidak akan jika dibuat menggunakan <code>concat</code>:</p>\n<pre><code class=\"language-js\">// Buatlah array dimana elemen '1' hilang\nlet missing = [0, , 1];\nlet spreaded = [...missing];\nlet concated = [].concat(missing);\n\n// benar\n\"1\" in spreaded;\n// salah\n\"1\" in concated;\n</code></pre>\n<p>Seperti halnya dengan <code>for / of</code>, <code>downlevelIteration</code> akan menggunakan <code>Symbol.iterator</code> (jika ada) untuk meniru perilaku ES 6 dengan lebih akurat.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers' aria-labelledby=\"importHelpers-config\">#</a> Import Helpers - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Untuk operasi penurunan tingkat tertentu, TypeScript menggunakan beberapa kode penunjang untuk operasi seperti memperluas kelas, himpunan(spread) susunan atau objek, dan menyambungkan operasi.\nSecara umum, penunjang ini dimasukkan ke dalam berkas yang menggunakannya.\nIni dapat mengakibatkan duplikasi kode jika penunjang yang sama digunakan di banyak berkas yang berbeda.</p>\n<p>Jika <code>importHelpers</code> kode ini aktif, fungsi penunjang ini diimpor dari <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> modul.\nAnda perlu memastikan bahwa berkas <code>tslib</code> modul dapat diimpor saat dijalankan.\nIni hanya mempengaruhi modul, berkas kode tidak akan mencoba mengimpor modul.</p>\n<p>Misalnya, dengan TypeScript:</p>\n<pre><code class=\"language-ts\">export function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>Memasang <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> dan <code>importHelpers</code> masih salah:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @downleveliteration\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>Lalu aktifkan keduanya <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> dan <code>importHelpers</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @downleveliteration\n// @importhelpers\n// @noErrors\nexport function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n</code></pre>\n<p>Anda bisa menggunakan <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a> saat menyediakan implementasi untuk fungsi-fungsi ini.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noEmitHelpers' aria-label=\"Jump to compiler option info for noEmitHelpers\" ><code>noEmitHelpers</code></a>, <a href='#downlevelIteration' aria-label=\"Jump to compiler option info for downlevelIteration\" ><code>downlevelIteration</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" id='incremental' href='#incremental' name='incremental' aria-labelledby=\"incremental-config\">#</a> Incremental - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Memberi tahu TypeScript untuk menyimpan informasi tentang grafik proyek dari kompilasi terakhir ke berkas yang disimpan di penyimpanan. Ini membuat serangkaian berkas <code>.tsbuildinfo</code> di folder yang sama dengan keluaran kompilasi Anda. Mereka tidak menggunakan JavaScript saat runtime dan dapat dihapus dengan aman. Anda dapat membaca lebih lanjut di <a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 release notes</a>.</p>\n<p>Anda dapat mengontrol nama folder dengan menggunakan pilihan <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <code>composite</code>, <code>false</code> otherwise</p>\n</li>\n<li><span>Related:</span><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules' aria-labelledby=\"isolatedModules-config\">#</a> Modul Terisolasi (_Isolated Modules_) - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Meskipun Anda dapat menggunakan TypeScript untuk menghasilkan ke kode JavaScript, penggunaan <em>transpiler</em> lain seperti <a href=\"https://babeljs.io\">Babel</a> juga umum untuk dilakukan. Namun, <em>transpiler</em> lain hanya beroperasi di satu berkas pada satu waktu, yang berarti mereka tidak dapat menerapkan transformasi kode yang bergantung pada pemahaman sistem tipe penuh.\nPembatasan ini juga berlaku untuk API <code>ts.transpileModule</code> TypeScript yang digunakan oleh beberapa alat pengembang.</p>\n<p>Batasan ini dapat menyebabkan masalah waktu proses dengan beberapa fitur TypeScript seperti <code>const enum</code>s dan <code>namespace</code>s.\nPilihan <code>isolatedModules</code> memberi tahu TypeScript untuk memperingatkan Anda jika menulis kode tertentu yang tidak dapat diartikan dengan benar oleh proses transpilasi berkas tunggal.</p>\n<p>Itu tidak mengubah kode Anda atau mengubah perilaku proses pemeriksaan dan pengecekan kode TypeScript.</p>\n<p>Beberapa contoh kode yang tidak berfungsi saat <code>isolatedModules</code> diaktifkan.</p>\n<h4 id=\"ekspor-pengenal-non-nilai\" style=\"position:relative;\"><a href=\"#ekspor-pengenal-non-nilai\" aria-label=\"ekspor pengenal non nilai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ekspor Pengenal Non-Nilai</h4>\n<p>Di TypeScript, Anda dapat mengimpor <em>type</em> dan kemudian mengekspornya:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\nimport { someType, someFunction } from \"someModule\";\n\nsomeFunction();\n\nexport { someType, someFunction };\n</code></pre>\n<p>Karena tidak ada nilai untuk <code>someType</code>, <code>export</code> yang ditampilkan tidak akan mencoba mengekspornya (ini akan menjadi galat waktu proses di JavaScript):</p>\n<pre><code class=\"language-js\">export { someFunction };\n</code></pre>\n<p><em>Transpiler</em> satu berkas tidak tahu apakah <code>someType</code> menghasilkan nilai atau tidak, jadi itu adalah galat untuk mengekspor nama yang hanya mengacu pada sebuah tipe.</p>\n<h4 id=\"non-module-files\" style=\"position:relative;\"><a href=\"#non-module-files\" aria-label=\"non module files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Module Files</h4>\n<p>Jika <code>isolatedModules</code> dipilih, semua berkas implementasi harus dalam <em>modules</em> (yang berarti memiliki beberapa bentuk <code>import</code> / <code>export</code>). galat terjadi jika berkas:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 1208\n// @isolatedModules\nfunction fn() {}\n</code></pre>\n<p>Pembatasan ini tidak berlaku untuk berkas <code>.d.ts</code></p>\n<h4 id=\"referensi-ke-anggota-const-enum\" style=\"position:relative;\"><a href=\"#referensi-ke-anggota-const-enum\" aria-label=\"referensi ke anggota const enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referensi ke anggota <code>const enum</code></h4>\n<p>Di TypeScript, saat mereferensikan anggota <code>const enum</code>, referensi tersebut diganti dengan nilai sebenarnya di JavaScript yang ditampilkan.</p>\n<p>Mengubah TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n</code></pre>\n<p>Ini untuk JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments\ndeclare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n</code></pre>\n<p>Tanpa pengetahuan tentang nilai anggota ini, <em>transpiler</em> lain tidak dapat menggantikan referensi ke <code>Number</code>, yang akan menjadi galat dijalankan jika dibiarkan (karena tidak ada objek <code>Numbers</code> pada waktu proses).\nKarena itu, ketika <code>isolatedModules</code> dipilih, akan terjadi galat yang mereferensikan anggota <code>const enum</code> di sekelilingnya.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" id='jsx' href='#jsx' name='jsx' aria-labelledby=\"jsx-config\">#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mengatur bagaimana konstruksi JSX dihasilkan di dalam file Javascript.\nIni hanya akan berpengaruh pada keluaran file JS yang dimulai di file <code>.tsx</code>.</p>\n<ul>\n<li><code>react</code>: Menghasilkan file <code>.js</code> dengan JSX yang diubah seperti pemanggilan <code>React.createElement</code></li>\n<li><code>preserve</code>: Menghasilkan file <code>.jsx</code> tanpa mengubah JSX</li>\n<li><code>react-native</code>: Menghasilkan file <code>.jsx</code> tanpa mengubah JSX</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Allowed:</span><p><code>react</code>,<br/><code>react-jsx</code>,<br/><code>react-jsxdev</code>,<br/><code>react-native</code>,<br/><code>preserve</code></p>\n</li>\n<li><span>Related:</span><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a>, <a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.2\" href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" id='lib' href='#lib' name='lib' aria-labelledby=\"lib-config\">#</a> Lib - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript includes a default set of type definitions for built-in JS APIs (like <code>Math</code>), as well as type definitions for things found in browser environments (like <code>document</code>).\nTypeScript also includes APIs for newer JS features matching the <code>target</code> you specify; for example the definition for <code>Map</code> is available if <code>target</code> is <code>ES6</code> or newer.</p>\n<p>You may want to change these for a few reasons:</p>\n<ul>\n<li>Your program doesn’t run in a browser, so you don’t want the <code>\"dom\"</code> type definitions</li>\n<li>Your runtime platform provides certain JavaScript API objects (maybe through polyfills), but doesn’t yet support the full syntax of a given ECMAScript version</li>\n<li>You have polyfills or native implementations for some, but not all, of a higher level ECMAScript version</li>\n</ul>\n<h3 id=\"high-level-libraries\" style=\"position:relative;\"><a href=\"#high-level-libraries\" aria-label=\"high level libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Level libraries</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>Core definitions for all ES3 and ES5 functionality</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>Additional APIs available in ES2015 (also known as ES6) - <code>array.find</code>, <code>Promise</code>, <code>Proxy</code>, <code>Symbol</code>, <code>Map</code>, <code>Set</code>, <code>Reflect</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>Alias for “ES2015”</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>Additional APIs available in ES2016 - <code>array.include</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>Alias for “ES2016”</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>Additional APIs available in ES2017 - <code>Object.entries</code>, <code>Object.values</code>, <code>Atomics</code>, <code>SharedArrayBuffer</code>, <code>date.formatToParts</code>, typed arrays, etc.</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>Additional APIs available in ES2018 - <code>async</code> iterables, <code>promise.finally</code>, <code>Intl.PluralRules</code>, <code>rexexp.groups</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>Additional APIs available in ES2019 - <code>array.flat</code>, <code>array.flatMap</code>, <code>Object.fromEntries</code>, <code>string.trimStart</code>, <code>string.trimEnd</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>Additional APIs available in ES2020 - <code>string.matchAll</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>Additional APIs available in ESNext - This changes as the JavaScript specification evolves</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a> definitions - <code>window</code>, <code>document</code>, etc.</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td>APIs available in <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a> contexts</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td>APIs for the <a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"individual-library-components\" style=\"position:relative;\"><a href=\"#individual-library-components\" aria-label=\"individual library components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Individual library components</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>This list may be out of date, you can see the full list in the <a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">TypeScript source code</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>See main content</p>\n</li>\n<li><span>Related:</span><p><a href='#noLib' aria-label=\"Jump to compiler option info for noLib\" ><code>noLib</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" id='module' href='#module' name='module' aria-labelledby=\"module-config\">#</a> Module - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Sets the module system for the program. See the <a href='/docs/handbook/modules.html'>Modules</a> reference page for more information. You very likely want <code>\"CommonJS\"</code> for node projects.</p>\n<p>Changing <code>module</code> affects <a href=\"#moduleResolution\"><code>moduleResolution</code></a> which <a href=\"/docs/handbook/module-resolution.html\">also has a reference page</a>.</p>\n<p>Here’s some example output for this file:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// ---cut---\n// @filename: index.ts\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: commonjs\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: umd\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: amd\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: system\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"esnext\" style=\"position:relative;\"><a href=\"#esnext\" aria-label=\"esnext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: esnext\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2020</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: es2020\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<p>If you are wondering about the difference between ES2015 and ES2020, ES2020 adds support for dynamic <code>import</code>s, and <code>import.meta</code>.</p>\n<h3 id=\"none\" style=\"position:relative;\"><a href=\"#none\" aria-label=\"none permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>None</code></h3>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: none\n// @noErrors\nimport { valueOfPi } from \"./constants\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p><code>CommonJS</code> (default if <code>target</code> is <code>ES3</code> or <code>ES5</code>),<br/>,<br/><code>ES2015</code>,<br/><code>ES2020</code>,<br/>,<br/><code>None</code>,<br/><code>UMD</code>,<br/><code>AMD</code>,<br/><code>System</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Related:</span><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" id='noEmit' href='#noEmit' name='noEmit' aria-labelledby=\"noEmit-config\">#</a> No Emit - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations.</p>\n<p>This makes room for another tool like <a href=\"https://babeljs.io\">Babel</a>, or <a href=\"https://github.com/swc-project/swc\">swc</a> to handle converting the TypeScript file to a file which can run inside a JavaScript environment.</p>\n<p>You can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" id='outDir' href='#outDir' name='outDir' aria-labelledby=\"outDir-config\">#</a> Out Dir - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika ditentukan, berkas-berkas <code>.js</code> (maupun <code>.d.ts</code>, <code>.js.map</code>, dsb.) akan disertakan ke dalam direktori ini.\nStruktur direktori dari sumber awal berkas-berkas juga dipertahankan; lihat <a href=\"#rootDir\">rootDir</a> jika akar yang di perhitungkan bukan yang anda inginkan.</p>\n<p>Jika tidak ditentukan, berkas-berkas <code>.js</code> akan disertakan di direktori yang sama dengan berkas-berkas <code>.ts</code> dari mana mereka di hasilkan:</p>\n<pre><code class=\"language-sh\">$ tsc\n\ncontoh\n├── index.js\n└── index.ts\n</code></pre>\n<p>Dengan suatu <code>tsconfig.json</code> seperti ini:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\"\n  }\n}\n</code></pre>\n<p>Menjalankan <code>tsc</code> dengan pengaturan ini dapat memindahkan berkas-berkas ke direktori <code>dist</code>:</p>\n<pre><code class=\"language-sh\">$ tsc\n\ncontoh\n├── dist\n│   └── index.js\n├── index.ts\n└── tsconfig.json\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" id='outFile' href='#outFile' name='outFile' aria-labelledby=\"outFile-config\">#</a> Out File - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika ditentukan, semua berkas <em>global</em> (non-module) akan digabung menjadi satu berkas keluaran tertentu.</p>\n<p>Jika <code>module</code> adalah <code>system</code> atau <code>amd</code>, semua berkas modul juga akan digabungkan menjadi berkas ini setelah semua konten global.</p>\n<p>Catatan: <code>outFile</code> tidak dapat digunakan kecuali <code>module</code> adalah <code>None</code>, <code>System</code>, atau <code>AMD</code>.\nOpsi ini <em>tidak bisa</em> digunakan untuk membundel modul CommonJS atau ES6.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" id='plugins' href='#plugins' name='plugins' aria-labelledby=\"plugins-config\">#</a> Plugins - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>List of language service plugins to run inside the editor.</p>\n<p>Language service plugins are a way to provide additional information to a user based on existing TypeScript files. They can enhance existing messages between TypeScript and an editor, or to provide their own error messages.</p>\n<p>For example:</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — Adds SQL linting with a template strings SQL builder.</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — Provides CSS linting inside template strings .</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — Provides eslint error messaging and fix-its inside the compiler’s output.</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> — Provides validation and auto-completion inside GraphQL query template strings.</li>\n</ul>\n<p>VS Code has the ability for a extension to <a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">automatically include language service plugins</a>, and so you may have some running in your editor without needing to define them in your <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" id='removeComments' href='#removeComments' name='removeComments' aria-labelledby=\"removeComments-config\">#</a> Menghapus Komentar - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menghapus semua komentar pada berkas Typescript pada saat mengonversi ke berkas Javascript. Pengaturan bawaannya adalah <code>false</code></p>\n<p>Sebagai contoh, ini adalah berkas TypeScript yang memiliki komentar JSDoc:</p>\n<pre><code class=\"language-ts\">/** Terjemahan dari 'Hello world' ke bahasa Indonesia */\nexport const helloWorldID = \"Halo Dunia\";\n</code></pre>\n<p>Ketika <code>removeComments</code> disetel ke <code>true</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments: true\n/** Terjemahan dari 'Hello world' ke bahasa Indonesia */\nexport const helloWorldID = \"Halo Dunia\";\n</code></pre>\n<p>Tanpa menyetel <code>removeComments</code> atau menjadikannya sebagai <code>false</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments: false\n/** Terjemahan dari 'Hello world' ke bahasa Indonesia */\nexport const helloWorldID = \"Halo Dunia\";\n</code></pre>\n<p>Artinya, komentar anda akan muncul di kode Javascript</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" id='rootDir' href='#rootDir' name='rootDir' aria-labelledby=\"rootDir-config\">#</a> Root Dir - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>Bawaan</strong>: Jalur umum terpanjang dari semua berkas masukan non-deklarasi. Jika <code>composite</code> disetel, bawaannya adalah direktori yang berisi berkas <code>tsconfig.json</code>.</p>\n<p>Ketika TypeScript mengkompilasi berkas, ia mempertahankan struktur direktori yang sama pada direktori keluaran seperti struktur di direktori masukan.</p>\n<p>Misalnya, Anda memiliki beberapa berkas masukan:</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n</code></pre>\n<p>Kesimpulan untuk <code>rootDir</code> adalah jalur umum terpanjang dari semua berkas masukan non-deklarasi, yang dalam hal ini adalah<code>core/</code>.</p>\n<p>Jika nilai <code>outDir</code> anda adalah <code>dist</code>, maka TypeScript akan membuat struktur direktori seperti ini:</p>\n<pre><code>MyProj\n├── dist\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n</code></pre>\n<p>Namun, anda mungkin mengharapkan <code>core</code> menjadi bagian dari struktur direktori keluaran.\nDengan menyetel <code>rootDir: \".\"</code> pada <code>tsconfig.json</code>, TypeScript akan menghasilkan struktur direktori seperti ini:</p>\n<pre><code>MyProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js\n</code></pre>\n<p>Yang terpenting, <code>rootDir</code> <strong>tidak memengaruhi berkas mana yang menjadi bagian dari kompilasi</strong>.\n<code>rootDir</code> tidak memiliki hubungan dengan pengaturan <code>include</code>, <code>exclude</code>, atau <code>files</code> pada <code>tsconfig.json</code></p>\n<p>Perhatikan bahwa TypeScript tidak akan pernah menulis berkas keluaran (<em>file output</em>) ke direktori di luar dari <code>outDir</code>, dan tidak akan pernah melewatkan pengeluaran berkas.\nKarena alasan ini, <code>rootDir</code> mengharuskan semua berkas yang perlu dikeluarkan berada dibawah jalur <code>rootDir</code>.</p>\n<p>Misalnya, Anda memiliki struktur direktori seperti ini:</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts\n</code></pre>\n<p>Ini akan menimbulkan galat ketika menentukan <code>rootDir</code> sebagai <code>core</code> dan <code>include</code> sebagai <code>*</code> karena ini membuat berkas (<code>helpers.ts</code>) yang perlu diletakkan di luar dari <code>outDir</code> (yaitu <code>../helpers.js</code>)</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap' aria-labelledby=\"sourceMap-config\">#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables the generation of <a href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\">sourcemap files</a>.\nThese files allow debuggers and other tools to display the original TypeScript source code when actually working with the emitted JavaScript files.\nSource map files are emitted as <code>.js.map</code> (or <code>.jsx.map</code>) files next to the corresponding <code>.js</code> output file.</p>\n<p>The <code>.js</code> files will in turn contain a sourcemap comment to indicate where the files are to external tools, for example:</p>\n<pre><code class=\"language-ts\">// helloWorld.ts\nexport declare const helloWorld = \"hi\";\n</code></pre>\n<p>Compiling with <code>sourceMap</code> set to <code>true</code> creates the following JavaScript file:</p>\n<pre><code class=\"language-js\">// helloWorld.js\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.helloWorld = \"hi\";\n//# sourceMappingURL=// helloWorld.js.map\n</code></pre>\n<p>And this also generates this json map:</p>\n<pre><code class=\"language-json\">// helloWorld.js.map\n{\n  \"version\": 3,\n  \"file\": \"ex.js\",\n  \"sourceRoot\": \"\",\n  \"sources\": [\"../ex.ts\"],\n  \"names\": [],\n  \"mappings\": \";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" id='target' href='#target' name='target' aria-labelledby=\"target-config\">#</a> Target - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Beberapa <em>browser</em> modern mendukung semua fitur ES6, jadi <code>ES6</code> merupakan pilihan yang baik.\nAnda dapat memilih untuk menyetel sasaran yang lebih rendah apabila kode Anda diluncurkan untuk lingkungan yang lebih lama, atau sebuah sasaran yang lebih tinggi apabila kode Anda dijamin untuk dapat berjalan di lingkungan yang lebih baru.</p>\n<p>Pengaturan <code>target</code> mengubah fitur JS mana yang diturunkan levelnya dan mana yang dibiarkan utuh.\nSebagai contoh, sebuah <em>arrow</em>function_ <code>() => this</code> akan berubah menjadi sebuah ekspresi yang ekuivalen dengan <code>function</code> apabila <code>target</code> merupakan ES5 atau versi yang lebih rendah.</p>\n<p>Mengubah <code>target</code> berarti juga mengubah nilai default dari <a href=\"#lib\"><code>lib</code></a>.\nAnda dapat mengatur <code>target</code> dan<code>lib</code> sesuai keinginan, tetapi Anda dapat menyetel <code>target</code> untuk alasan kenyamanan.</p>\n<p>Jika Anda hanya bekerja dengan Node.js, berikut adalah beberapa <code>target</code> yang direkomendasikan berdasarkan versi Node:</p>\n<table>\n<thead>\n<tr>\n<th>Nama</th>\n<th>Target yang didukung</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 8</td>\n<td><code>ES2017</code></td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td><code>ES2018</code></td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td><code>ES2019</code></td>\n</tr>\n</tbody>\n</table>\n<p>Ini didasarkan pada database dukungan <a href=\"https://node.green\">node.green</a>.</p>\n<p>Nilai khusus <code>ESNext</code> merujuk pada versi tertinggi yang didukung oleh versi TypeScript Anda.\nPengaturan ini harus dilakukan secara hati-hati, karena ini tidak berarti hal yang sama pada versi TypeScript yang berbeda dan dapat membuat peningkatan kurang dapat diprediksi.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>ES3</code></p>\n</li>\n<li><span>Allowed:</span><p><code>ES3</code> (default),<br/><code>ES5</code>,<br/><code>ES6</code>/<code>ES2015</code> (synonymous),<br/><code>ES7</code>/<code>ES2016</code>,<br/><code>ES2017</code>,<br/><code>ES2018</code>,<br/><code>ES2019</code>,<br/><code>ES2020</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile' aria-labelledby=\"tsBuildInfoFile-config\">#</a> TS Build Info File - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting lets you specify a file for storing incremental compilation information as a part of composite projects which enables faster\nbuilding of larger TypeScript codebases. You can read more about composite projects <a href=\"/docs/handbook/project-references.html\">in the handbook</a>.</p>\n<p>This option offers a way to configure the place where TypeScript keeps track of the files it stores on the disk to\nindicate a project’s build state — by default, they are in the same folder as your emitted JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>.tsbuildinfo</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Strict_Type_Checking_Options_6173' ><a href='#Strict_Type_Checking_Options_6173' name='Strict_Type_Checking_Options_6173' aria-label=\"Link to the section Pemeriksaan Ketat\" aria-labelledby='Strict_Type_Checking_Options_6173'>#</a>Pemeriksaan Ketat</h2>\n<p>Kami merekomendasikan (untuk) menggunakan <a href=\"#strict\">opsi kompiler <code>strict</code></a> untuk mengikutsertakan semua kemungkinan penyempurnaan saat berkas <code>.ts</code> dikompilasi.</p>\n<p>TypeScript mendukung jangkauan pola JavaScript yang luas dan secara standar memperbolehkan cukup banyak fleksibilitas untuk mengakomodasi gaya ini.\nSeringnya keamanaan dan potensi skalabilitas basis kode dapat berada pada posisi aneh dengan beberapa teknis berikut.</p>\n<p>Karena banyaknya jenis JavaScript yang didukung, pemutakhiran ke TypeScript versi terbaru dapat menghasilkan dua jenis kesalahan:</p>\n<ul>\n<li>Kesalahan yang telah ada pada basis kode Anda, yang TypeScript telah temukan karena telah menyempurnakan pemahaman terhadap JavaScript.</li>\n<li>Serangkaian kesalahan baru yang mengatasi domain permasalahan baru.</li>\n</ul>\n<p>TypeScript biasanya akan menambahkan opsi kompiler untuk kesalahan yang kedua, dan biasanya (opsi tersebut) tidak dinyalakan.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict' aria-labelledby=\"alwaysStrict-config\">#</a> Selalu Tepat - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Pastikan bahwa berkas Anda diurai di Mode strict EcmaScript, dan mengeluarkan “use strict” untuk setiap berkas asal.</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">ECMAScript strict</a> mode strict diperkenalkan di ES5 dan memberikan perubahan perilaku pada waktu proses mesin JavaScript untuk meningkatkan kinerja dan membuat kesalahan muncul agar diabaikan.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny' aria-labelledby=\"noImplicitAny-config\">#</a> No Implicit Any - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Di beberapa kasus, dimana tidak ada anotasi tipe yang ada, TypeScript akan kembali ke suatu tipe dari <code>any</code> untuk suatu variabel yang saat itu tidakbisa simpulkan tipenya.</p>\n<p>Ini dapat menyebabkan beberapa kesalahan untuk dilewatkan, sebagai contoh:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: false\nfunction fn(s) {\n  // Bukan kesalahan?\n  console.log(s.subtr(3));\n}\nfn(42);\n</code></pre>\n<p>Menyalakan opsi <code>noImplicitAny</code> namun TypeScript akan mengeluarkan kesalahan setiap kali <code>any</code> yang ia simpulkan:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7006\nfunction fn(s) {\n  console.log(s.subtr(3));\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis' aria-labelledby=\"noImplicitThis-config\">#</a> No Implicit This - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menimbulkan kesalahan kepada pernyataan ‘this’ dengan tersiratnya tipe ‘any’.</p>\n<p>Sebagai contoh, class dibawah ini mengembalikan suatu fungsi yang mencoba mengakses <code>this.width</code> dan <code>this.height</code> – tapi konteksnya\nuntuk <code>this</code> didalam fungsi yang didalam <code>getAreaFunction</code> ini, bukanlah instansi dari class Rectangle.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2683\nclass Rectangle {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  getAreaFunction() {\n    return function () {\n      return this.width * this.height;\n    };\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" id='strict' href='#strict' name='strict' aria-labelledby=\"strict-config\">#</a> Strict - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The <code>strict</code> flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.\nTurning this on is equivalent to enabling all of the <em>strict mode family</em> options, which are outlined below.\nYou can then turn off individual strict mode family checks as needed.</p>\n<p>Future versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program.\nWhen appropriate and possible, a corresponding flag will be added to disable that behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#alwaysStrict' aria-label=\"Jump to compiler option info for alwaysStrict\" ><code>alwaysStrict</code></a>, <a href='#strictNullChecks' aria-label=\"Jump to compiler option info for strictNullChecks\" ><code>strictNullChecks</code></a>, <a href='#strictBindCallApply' aria-label=\"Jump to compiler option info for strictBindCallApply\" ><code>strictBindCallApply</code></a>, <a href='#strictFunctionTypes' aria-label=\"Jump to compiler option info for strictFunctionTypes\" ><code>strictFunctionTypes</code></a>, <a href='#strictPropertyInitialization' aria-label=\"Jump to compiler option info for strictPropertyInitialization\" ><code>strictPropertyInitialization</code></a>, <a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a>, <a href='#noImplicitThis' aria-label=\"Jump to compiler option info for noImplicitThis\" ><code>noImplicitThis</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply' aria-labelledby=\"strictBindCallApply-config\">#</a> Strict Bind Call Apply - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will check that the built-in methods of functions <code>call</code>, <code>bind</code>, and <code>apply</code> are invoked with correct argument for the underlying function:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictBindCallApply: true\n// @errors: 2345\n\n// With strictBindCallApply on\nfunction fn(x: string) {\n  return parseInt(x);\n}\n\nconst n1 = fn.call(undefined, \"10\");\n\nconst n2 = fn.call(undefined, false);\n</code></pre>\n<p>Otherwise, these functions accept any arguments and will return <code>any</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictBindCallApply: false\n\n// With strictBindCallApply off\nfunction fn(x: string) {\n  return parseInt(x);\n}\n\n// Note: No error; return type is 'any'\nconst n = fn.call(undefined, false);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.2\" href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes' aria-labelledby=\"strictFunctionTypes-config\">#</a> Strict Function Types - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, this flag causes functions parameters to be checked more correctly.</p>\n<p>Here’s a basic example with <code>strictFunctionTypes</code> off:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictFunctionTypes: false\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\ntype StringOrNumberFunc = (ns: string | number) => void;\n\n// Unsafe assignment\nlet func: StringOrNumberFunc = fn;\n// Unsafe call - will crash\nfunc(10);\n</code></pre>\n<p>With <code>strictFunctionTypes</code> <em>on</em>, the error is correctly detected:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\ntype StringOrNumberFunc = (ns: string | number) => void;\n\n// Unsafe assignment is prevented\nlet func: StringOrNumberFunc = fn;\n</code></pre>\n<p>During development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM.\nBecause of this, the setting only applies to functions written in <em>function</em> syntax, not to those in <em>method</em> syntax:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Methodish = {\n  func(x: string | number): void;\n};\n\nfunction fn(x: string) {\n  console.log(\"Hello, \" + x.toLowerCase());\n}\n\n// Ultimately an unsafe assignment, but not detected\nconst m: Methodish = {\n  func: fn,\n};\nm.func(10);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.6\" href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks' aria-labelledby=\"strictNullChecks-config\">#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When <code>strictNullChecks</code> is <code>false</code>, <code>null</code> and <code>undefined</code> are effectively ignored by the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>, <code>null</code> and <code>undefined</code> have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example with this TypeScript code, <code>users.find</code> has no guarantee that it will actually find a user, but you can\nwrite code as though it will:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictNullChecks: false\n// @target: ES2015\ndeclare const loggedInUsername: string;\n\nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n\nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\n</code></pre>\n<p>Setting <code>strictNullChecks</code> to <code>true</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339 2532\n// @target: ES2020\n// @strictNullChecks\ndeclare const loggedInUsername: string;\n\nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n\nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\n</code></pre>\n<p>The second example failed because the array’s <code>find</code> function looks a bit like this simplification:</p>\n<pre><code class=\"language-ts\">// When strictNullChecks: true\ntype Array = {\n  find(predicate: (value: any, index: number) => boolean): S | undefined;\n};\n\n// When strictNullChecks: false the undefined is removed from the type system,\n// allowing you to write code which assumes it always found a result\ntype Array = {\n  find(predicate: (value: any, index: number) => boolean): S;\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization' aria-labelledby=\"strictPropertyInitialization-config\">#</a> Strict Property Initialization - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2564\nclass UserAccount {\n  name: string;\n  accountType = \"user\";\n\n  email: string;\n  address: string | undefined;\n\n  constructor(name: string) {\n    this.name = name;\n    // Note that this.email is not set\n  }\n}\n</code></pre>\n<p>In the above case:</p>\n<ul>\n<li><code>this.name</code> is set specifically.</li>\n<li><code>this.accountType</code> is set by default.</li>\n<li><code>this.email</code> is not set and raises an error.</li>\n<li><code>this.address</code> is declared as potentially <code>undefined</code> which means it does not have to be set.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Module_Resolution_Options_6174' ><a href='#Module_Resolution_Options_6174' name='Module_Resolution_Options_6174' aria-label=\"Link to the section Resolusi Modul\" aria-labelledby='Module_Resolution_Options_6174'>#</a>Resolusi Modul</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports' aria-labelledby=\"allowSyntheticDefaultImports-config\">#</a> Izinkan Setelan Standar Impor Sintetis - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika disetel ke true <code>allowSyntheticDefaultImports</code> memungkinkan Anda untuk menulis impor seperti:</p>\n<pre><code class=\"language-ts\">import React from \"react\";\n</code></pre>\n<p>daripada:</p>\n<pre><code class=\"language-ts\">import * as React from \"react\";\n</code></pre>\n<p>Jika modul <strong>tidak</strong> secara eksplisit menentukan ekspor default.</p>\n<p>Misalnya, tanpa<code>allowSyntheticDefaultImports</code> disetel ke <em>true</em>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 1259 1192\n// @checkJs\n// @allowJs\n// @esModuleInterop: false\n// @filename: utilFunctions.js\n// @noImplicitAny: false\nconst getStringLength = (str) => str.length;\n\nmodule.exports = {\n  getStringLength,\n};\n\n// @filename: index.ts\nimport utils from \"./utilFunctions\";\n\nconst count = utils.getStringLength(\"Check JS\");\n</code></pre>\n<p>Kode ini menimbulkan galat karena tidak ada objek <code>default</code> yang dapat Anda impor. Meski rasanya seperti itu seharusnya.\nUntuk kenyamanan, <em>transpiler</em> seperti Babel akan secara otomatis membuat setelan standar jika tidak dibuat. Membuat modul terlihat lebih seperti:</p>\n<pre><code class=\"language-js\">// @filename: utilFunctions.js\nconst getStringLength = (str) => str.length;\nconst allFunctions = {\n  getStringLength,\n};\n\nmodule.exports = allFunctions;\nmodule.exports.default = allFunctions;\n</code></pre>\n<p>Opsi ini tidak memengaruhi JavaScript yang dihasilkan oleh TypeScript, ini hanya untuk <em>type checking</em>.\nOpsi ini membuat perilaku TypeScript sejalan dengan Babel, di mana kode ekstra akan ditambahkan kedalam setelan standar ekspor untuk membuat sebuah modul lebih ergonomis.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === \"system\" or esModuleInterop</p>\n</li>\n<li><span>Related:</span><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess' aria-labelledby=\"allowUmdGlobalAccess-config\">#</a> Izinkan Akses Global Umd - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika disetel ke <em>true</em>, <code>allowUmdGlobalAccess</code> memungkinkan Anda mengakses ekspor UMD sebagai global dari dalam berkas modul. Berkas modul adalah berkas yang telah diimpor dan/atau diekspor. Tanpa opsi ini, menggunakan ekspor dari modul UMD memerlukan deklarasi impor.</p>\n<p>Contoh kasus penggunaan untuk opsi ini adalah proyek web yang anda tahu bahwa pustaka tertentu (seperti jQuery atau Lodash) akan selalu tersedia saat runtime, tetapi Anda tidak dapat mengaksesnya dengan impor.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.5\" href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl' aria-labelledby=\"baseUrl-config\">#</a> Base Url - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Memungkinkan Anda menyetel direktori dasar untuk menyelesaikan nama modul dengan benar.</p>\n<p>Anda dapat menentukan folder root di mana Anda dapat melakukan keputusan berkas yang sesungguhnya, misalnya :</p>\n<pre><code>baseUrl\n├── ex.ts\n├── hello\n│   └── world.ts\n└── tsconfig.json\n</code></pre>\n<p>Dengan <code>\"baseUrl\": \"./\"</code> di dalam proyek ini TypeScript akan mencari berkas yang dimulai dari folder yang sama dengan <code>tsconfig.json</code>.</p>\n<pre><code class=\"language-ts\">import { helloWorld } from \"hello/world\";\n\nconsole.log(helloWorld);\n</code></pre>\n<p>Jika Anda lelah cara impor selalu seperti <code>\"../\"</code> atau <code>\"./\"</code>. Atau harus untuk merubah saat Anda memindahkan berkas, ini adalah cara terbaik untuk memperbaikinya.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop' aria-labelledby=\"esModuleInterop-config\">#</a> Interop Modul ES - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Secara bawaan (dengan <code>esModuleInterop</code> <em>false</em> atau tidak disetel) TypeScript memperlakukan modul CommonJS/AMD/UMD mirip dengan modul ES6. Dalam melakukan ini, ada dua bagian tertentu yang ternyata merupakan asumsi yang salah:</p>\n<ul>\n<li>Impor namespace seperti <code>import * as moment from \"moment\"</code> bertindak sama seperti <code>const moment = require(\"moment\")</code></li>\n<li>Impor bawaan seperti <code>import moment from \"moment\"</code> berfungsi sama seperti <code>const moment = require(\"moment\").default</code></li>\n</ul>\n<p>Ketidakcocokan ini menyebabkan dua masalah berikut:</p>\n<ul>\n<li>Spesifikasi modul ES6 menyatakan bahwa impor namespace (<code>import * as x</code>) hanya dapat menjadi objek, dengan memiliki TypeScript\nmemperlakukannya sama dengan <code>= require (\"x\")</code> maka TypeScript diizinkan untuk impor diperlakukan sebagai fungsi dan dapat dipanggil. Ini melanggar rekomendasi spesifikasi.</li>\n<li>Meskipun akurat untuk spesifikasi modul ES6, sebagian besar pustaka dengan modul CommonJS/AMD/UMD tidak seketat implementasi TypeScript.</li>\n</ul>\n<p>Mengaktifkan <code>esModuleInterop</code> akan memperbaiki kedua masalah ini dalam kode yang ditranspilasi oleh TypeScript. Perubahan pertama perilaku di kompilator, yang kedua diperbaiki oleh dua fungsi pembantu baru yang menyediakan <em>shim</em> untuk memastikan kompatibilitas dalam JavaScript yang dihasilkan:</p>\n<pre><code class=\"language-ts\">import * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>Dengan menonaktifkan <code>esModuleInterop</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop: false\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>Dengan <code>esModuleInterop</code> disetel ke <code>true</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p><em>Catatan</em>: Anda dapat meminimalisir ukuran keluaran dengan mengaktifkan <a href=\"#importHelpers\"><code>importHelpers</code></a>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\n// @showEmit\n// @esModuleInterop\n// @importHelpers\n// @module: commonjs\nimport * as fs from \"fs\";\nimport _ from \"lodash\";\n\nfs.readFileSync(\"file.txt\", \"utf8\");\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n</code></pre>\n<p>Mengaktifkan <code>esModuleInterop</code> juga akan mengaktifkan <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowSyntheticDefaultImports' aria-label=\"Jump to compiler option info for allowSyntheticDefaultImports\" ><code>allowSyntheticDefaultImports</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution' aria-labelledby=\"moduleResolution-config\">#</a> Module Resolution - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the module resolution strategy: <code>'node'</code> (Node.js) or <code>'classic'</code> (used in TypeScript before the release of 1.6).\nYou probably won’t need to use <code>classic</code> in modern code.</p>\n<p>There is a handbook reference page on <a href=\"/docs/handbook/module-resolution.html\">Module Resolution</a></p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === <code>AMD</code> or <code>UMD</code> or <code>System</code> or <code>ES6</code>, then <code>Classic</code><br/><br/>Otherwise <code>Node</code></p>\n</li>\n<li><span>Related:</span><p><a href='#module' aria-label=\"Jump to compiler option info for module\" ><code>module</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" id='paths' href='#paths' name='paths' aria-labelledby=\"paths-config\">#</a> Paths - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A series of entries which re-map imports to lookup locations relative to the <code>baseUrl</code>, there is a larger coverage of <code>paths</code> in <a href=\"/docs/handbook/module-resolution.html#path-mapping\">the handbook</a>.</p>\n<p><code>paths</code> lets you declare how TypeScript should resolve an import in your <code>require</code>/<code>import</code>s.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\", // this must be specified if \"paths\" is specified.\n    \"paths\": {\n      \"jquery\": [\"node_modules/jquery/dist/jquery\"] // this mapping is relative to \"baseUrl\"\n    }\n  }\n}\n</code></pre>\n<p>This would allow you to be able to write <code>import \"jquery\"</code>, and get all of the correct typing locally.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"paths\": {\n        \"app/*\": [\"app/*\"],\n        \"config/*\": [\"app/_config/*\"],\n        \"environment/*\": [\"environments/*\"],\n        \"shared/*\": [\"app/_shared/*\"],\n        \"helpers/*\": [\"helpers/*\"],\n        \"tests/*\": [\"tests/*\"]\n    },\n}\n</code></pre>\n<p>In this case, you can tell the TypeScript file resolver to support a number of custom prefixes to find code.\nThis pattern can be used to avoid long relative paths within your codebase.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks' aria-labelledby=\"preserveSymlinks-config\">#</a> Preserve Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This is to reflect the same flag in Node.js; which does not resolve the real path of symlinks.</p>\n<p>This flag also exhibits the opposite behavior to Webpack’s <code>resolve.symlinks</code> option (i.e. setting TypeScript’s <code>preserveSymlinks</code> to true parallels setting Webpack’s <code>resolve.symlinks</code> to false, and vice-versa).</p>\n<p>With this enabled, references to modules and packages (e.g. <code>import</code>s and <code>/// &#x3C;reference type=\"...\" /></code> directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs' aria-labelledby=\"rootDirs-config\">#</a> Root Dirs - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Dengan menggunakan <code>rootDirs</code>, Anda dapat memberi tahu kompilator bahwa ada banyak direktori “virtual” yang bertindak sebagai salah satu akar (root).\nHal ini memungkinkan kompilator untuk menyelesaikan impor pada modul relatif dalam direktori “virtual”, seolah-olah digabungkan menjadi satu direktori.</p>\n<p>Sebagai contoh:</p>\n<pre><code> src\n └── views\n     └── view1.ts (bisa impor \"./template1\", \"./view2`)\n     └── view2.ts (bisa impor \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (bisa impor \"./view1\", \"./view2\")\n</code></pre>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src/views\", \"generated/templates/views\"]\n  }\n}\n</code></pre>\n<p>Ini tidak memengaruhi bagaimana Typescript menghasilkan Javascript, ini hanya mengemulasi asumsi bahwa mereka akan mampu melakukan perkerjaan melalui Jalur relatif tersebut saat runtime.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots' aria-labelledby=\"typeRoots-config\">#</a> Type Roots - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default all <em>visible</em> ”<code>@types</code>” packages are included in your compilation.\nPackages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>.\nFor example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p>\n<p>If <code>typeRoots</code> is specified, <em>only</em> packages under <code>typeRoots</code> will be included. For example:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"typeRoots\": [\"./typings\", \"./vendor/types\"]\n  }\n}\n</code></pre>\n<p>This config file will include <em>all</em> packages under <code>./typings</code> and <code>./vendor/types</code>, and no packages from <code>./node_modules/@types</code>.\nAll paths are relative to the <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#types' aria-label=\"Jump to compiler option info for types\" ><code>types</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" id='types' href='#types' name='types' aria-labelledby=\"types-config\">#</a> Types - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Secara <em>default</em>, semua <em>visible package</em> ”<code>@types</code>” diikutsertakan dalam kompilasi Anda.\n<em>Package</em> dalam <code>node_modules/@types</code> yang terletak dalam folder lain dianggap sebagai <em>visible</em>.\nSebagai contoh, <em>package</em> yang berada di <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, dan seterusnya dianggap sebagai <em>visible</em>.</p>\n<p>Jika <code>types</code> telah ditentukan, hanya <em>package</em> yang didaftarkan yang akan disertakan pada lingkup global, misalnya:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"types\": [\"node\", \"jest\", \"express\"]\n  }\n}\n</code></pre>\n<p>Berkas <code>tsconfig.json</code> ini hanya akan menyertakan <code>./node_modules/@types/node</code>, <code>./node_modules/@types/jest</code> dan <code>./node_modules/@types/express</code>.\n<em>Package</em> lainnya di bawah direktori <code>node_modules/@types/*</code> tidak akan diikutsertakan.</p>\n<h3 id=\"apa-dampaknya\" style=\"position:relative;\"><a href=\"#apa-dampaknya\" aria-label=\"apa dampaknya permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apa dampaknya?</h3>\n<p>Opsi ini tidak memengaruhi bagaimana <code>@types/*</code> diikutsertakan dalam kode aplikasi Anda, Sebagai contoh, apabila Anda memiliki <code>compilerOptions</code> seperti di pada contoh di atas dan kode seperti berikut:</p>\n<pre><code class=\"language-ts\">import * as moment from \"moment\";\n\nmoment().format(\"MMMM Do YYYY, h:mm:ss a\");\n</code></pre>\n<p>Import <code>moment</code> akan sepenuhnya diketik.</p>\n<p>Ketika Anda memiliki opsi ini pada pengaturan tanpa menyertakan sebuah modul dalam <em>array</em> <code>types</code>, maka:</p>\n<ul>\n<li><em>globals</em> tidak akan ditambahkan ke dalam proyek Anda (contoh: <code>process</code> pada node atau <code>expect</code> pada Jest)</li>\n<li>Ekspor tidak akan muncul sebagai rekomendasi <em>auto-import</em></li>\n</ul>\n<p>Pengaturan pada fitur ini hanya tentang menentukan <code>types</code> yang ingin Anda sertakan, sedangkan <a href=\"#typeRoots\"><code>typeRoots</code></a> mendukung apabila Anda hanya menginginkan folder-folder tertentu saja.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#typeRoots' aria-label=\"Jump to compiler option info for typeRoots\" ><code>typeRoots</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Source_Map_Options_6175' ><a href='#Source_Map_Options_6175' name='Source_Map_Options_6175' aria-label=\"Link to the section Source Maps\" aria-labelledby='Source_Map_Options_6175'>#</a>Source Maps</h2>\n<p>Bertujuan untuk menyediakan alat debug dan pelaporan kesalahan yang masuk akal untuk pengembang, TypeScript mendukung (untuk) menghasilkan berkas tambahan yang sesuai dengan standar JavaScript Source Map.</p>\n<p>Berkas tersebut dihasilkan sebagai berkas <code>.map</code> yang terletak bersamaan dengan berkas yang direpresentasikannya.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap' aria-labelledby=\"inlineSourceMap-config\">#</a> Peta Sumber Sebaris - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika disetel, ketika menulis berkas <code>.js.map</code> untuk menyediakan peta sumber, TypeScript akan menyematkan konten peta sumber di berkas <code>.js</code>.\nMeskipun ini menghasilkan berkas JS yang lebih besar, tapi dapat memudahkan dalam beberapa tahap.\nMisalnya anda mungkin ingin mencoba berkas JS pada server web, tapi tidak mengizinkan berkas <code>.map</code> untuk ditampilkan.</p>\n<p>Saling terpisah dengan <a href=\"#sourceMap\"><code>sourceMap</code></a>.</p>\n<p>Misalnya, dengan TypeScript:</p>\n<pre><code class=\"language-ts\">const helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Di ubah menjadi JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Kemudian aktifkan pembuatannya dengan <code>inlineSourceMap</code>, ada komentar di bagian bawah berkas yang menyertakan peta sumber untuk berkas tersebut.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @inlineSourceMap\n// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources' aria-labelledby=\"inlineSources-config\">#</a> Sumber Sebaris - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika dilihat, TypeScript akan menyertakan konten asli dari berkas <code>.ts</code> sebagai string yang disematkan di peta sumber.\nIni sering kali berguna dalam kasus yang sama seperti <code>inlineSourceMap</code>.</p>\n<p>Membutuhkan <code>sourceMap</code> atau <code>inlineSourceMap</code> untuk disetel.</p>\n<p>Misalnya, dengan TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Di ubah menjadi JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n<p>Kemudian dengan <code>inlineSources</code> dan <code>inlineSourceMap</code> diaktifkan, ada komentar di bagian bawah berkas yang menyertakan peta sumber untuk berkas tersebut.\nPerhatikan bahwa ada yang berbeda di akhir [<code>inlineSourceMap</code>] (# inlineSourceMap) karena peta sumber sekarang berisi kode sumber asli.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @inlineSources\n// @inlineSourceMap\n// @showEmit\nconst helloWorld = \"hi\";\nconsole.log(helloWorld);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot' aria-labelledby=\"mapRoot-config\">#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where debugger should locate map files instead of generated locations.\nThis string is treated verbatim inside the source-map, for example:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"mapRoot\": \"https://my-website.com/debug/sourcemaps/\"\n  }\n}\n</code></pre>\n<p>Would declare that <code>index.js</code> will have sourcemaps at <code>https://my-website.com/debug/sourcemaps/index.js.map</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot' aria-labelledby=\"sourceRoot-config\">#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where a debugger should locate TypeScript files instead of relative source locations.\nThis string is treated verbatim inside the source-map where you can use a path or a URL:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"sourceRoot\": \"https://my-website.com/debug/source/\"\n  }\n}\n</code></pre>\n<p>Would declare that <code>index.js</code> will have a source file at <code>https://my-website.com/debug/source/index.ts</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Additional_Checks_6176' ><a href='#Additional_Checks_6176' name='Additional_Checks_6176' aria-label=\"Link to the section Pemeriksaan Linter\" aria-labelledby='Additional_Checks_6176'>#</a>Pemeriksaan Linter</h2>\n<p>Sekumpulan pemeriksaan ekstra, yang agak melewati batas antara kompiler (<em>compiler</em>) vs <em>linter</em>. Anda mungkin lebih suka menggunakan alat seperti <a href=\"https://github.com/typescript-eslint/typescript-eslint#typescript-eslint\">eslint</a> daripada opsi ini jika Anda mencari aturan yang mendalam.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch' aria-labelledby=\"noFallthroughCasesInSwitch-config\">#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors for fallthrough cases in switch statements.\nEnsures that any non-empty case inside a switch statement includes either <code>break</code> or <code>return</code>.\nThis means you won’t accidentally ship a case fallthrough bug.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noFallthroughCasesInSwitch\n// @errors: 7029\nconst a: number = 6;\n\nswitch (a) {\n  case 0:\n    console.log(\"even\");\n  case 1:\n    console.log(\"odd\");\n    break;\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitOverride-config'><a aria-label=\"Link to the compiler option: noImplicitOverride\" id='noImplicitOverride' href='#noImplicitOverride' name='noImplicitOverride' aria-labelledby=\"noImplicitOverride-config\">#</a> noImplicitOverride - <code>noImplicitOverride</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.</p>\n<p>For example, imagine you are modeling a music album syncing system:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Album {\n  download() {\n    // Default behavior\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n</code></pre>\n<p>Then when you add support for machine-learning generated playlists, you refactor the <code>Album</code> class to have a ‘setup’ function instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Album {\n  setup() {\n    // Default behavior\n  }\n}\n\nclass MLAlbum extends Album {\n  setup() {\n    // Override to get info from algorithm\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n</code></pre>\n<p>In this case, TypeScript has provided no warning that <code>download</code> on <code>SharedAlbum</code> <em>expected</em> to override a function in the base class.</p>\n<p>Using <code>noImplicitOverride</code> you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword <code>override</code>.</p>\n<p>The following example has <code>noImplicitOverride</code> enabled, and you can see the error received when <code>override</code> is missing:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitOverride\n// @errors: 4114\nclass Album {\n  setup() {}\n}\n\nclass MLAlbum extends Album {\n  override setup() {}\n}\n\nclass SharedAlbum extends Album {\n  setup() {}\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.3\" href=\"/docs/handbook/release-notes/typescript-4-3.html\">4.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns' aria-labelledby=\"noImplicitReturns-config\">#</a> No Implicit Returns - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Saat diaktifkaan, TypeScript akan melakukan pengecekan semua jalur kode di suatu fungsi untuk memastikan mereka mengembalikan suatu nilai.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2366 2322\nfunction lookupHeadphonesManufacturer(color: \"blue\" | \"black\"): string {\n  if (color === \"blue\") {\n    return \"beats\";\n  } else {\n    \"bose\";\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noPropertyAccessFromIndexSignature-config'><a aria-label=\"Link to the compiler option: noPropertyAccessFromIndexSignature\" id='noPropertyAccessFromIndexSignature' href='#noPropertyAccessFromIndexSignature' name='noPropertyAccessFromIndexSignature' aria-labelledby=\"noPropertyAccessFromIndexSignature-config\">#</a> noPropertyAccessFromIndexSignature - <code>noPropertyAccessFromIndexSignature</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting ensures consistency between accessing a field via the “dot” (<code>obj.key</code>) syntax, and “indexed” (<code>obj[\"key\"]</code>) and the way which the property is declared in the type.</p>\n<p>Without this flag, TypeScript will allow you to use the dot syntax to access fields which are not defined:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 4111\ndeclare function getSettings(): GameSettings;\n// ---cut---\ninterface GameSettings {\n  // Known up-front properties\n  speed: \"fast\" | \"medium\" | \"slow\";\n  quality: \"high\" | \"low\";\n\n  // Assume anything unknown to the interface\n  // is a string.\n  [key: string]: string;\n}\n\nconst settings = getSettings();\nsettings.speed;\n//       ^?\nsettings.quality;\n//       ^?\n\n// Unknown key accessors are allowed on\n// this object, and are `string`\nsettings.username;\n//       ^?\n</code></pre>\n<p>Turning the flag on will raise an error because the unknown field uses dot syntax instead of indexed syntax.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 4111\n// @noPropertyAccessFromIndexSignature\ndeclare function getSettings(): GameSettings;\ninterface GameSettings {\n  speed: \"fast\" | \"medium\" | \"slow\";\n  quality: \"high\" | \"low\";\n  [key: string]: string;\n}\n// ---cut---\nconst settings = getSettings();\nsettings.speed;\nsettings.quality;\n\n// This would need to be settings[\"username\"];\nsettings.username;\n//       ^?\n</code></pre>\n<p>The goal of this flag is to signal intent in your calling syntax about how certain you are this property exists.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUncheckedIndexedAccess-config'><a aria-label=\"Link to the compiler option: noUncheckedIndexedAccess\" id='noUncheckedIndexedAccess' href='#noUncheckedIndexedAccess' name='noUncheckedIndexedAccess' aria-labelledby=\"noUncheckedIndexedAccess-config\">#</a> noUncheckedIndexedAccess - <code>noUncheckedIndexedAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript has a way to describe objects which have unknown keys but known values on an object, via index signatures.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface EnvironmentVars {\n  NAME: string;\n  OS: string;\n\n  // Unknown properties are covered by this index signature.\n  [propName: string]: string;\n}\n\ndeclare const env: EnvironmentVars;\n\n// Declared as existing\nconst sysName = env.NAME;\nconst os = env.OS;\n//    ^?\n\n// Not declared, but because of the index\n// signature, then it is considered a string\nconst nodeEnv = env.NODE_ENV;\n//    ^?\n</code></pre>\n<p>Turning on <code>noUncheckedIndexedAccess</code> will add <code>undefined</code> to any un-declared field in the type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface EnvironmentVars {\n  NAME: string;\n  OS: string;\n\n  // Unknown properties are covered by this index signature.\n  [propName: string]: string;\n}\n// @noUncheckedIndexedAccess\n// ---cut---\ndeclare const env: EnvironmentVars;\n\n// Declared as existing\nconst sysName = env.NAME;\nconst os = env.OS;\n//    ^?\n\n// Not declared, but because of the index\n// signature, then it is considered a string\nconst nodeEnv = env.NODE_ENV;\n//    ^?\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals' aria-labelledby=\"noUnusedLocals-config\">#</a> No Unused Locals - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused local variables.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noUnusedLocals\n// @errors: 6133\nconst createKeyboard = (modelID: number) => {\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID };\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters' aria-labelledby=\"noUnusedParameters-config\">#</a> No Unused Parameters - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused parameters in functions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noUnusedParameters\n// @errors: 6133\nconst createDefaultKeyboard = (modelID: number) => {\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID: defaultModelID };\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Experimental_Options_6177' ><a href='#Experimental_Options_6177' name='Experimental_Options_6177' aria-label=\"Link to the section Eksperimental\" aria-labelledby='Experimental_Options_6177'>#</a>Eksperimental</h2>\n<p>TypeScript berusaha hanya untuk menyertakan fitur-fitur yang telah terkonfirmasi akan ditambahkan pada bahasa JavaScript.</p>\n<p>Ada beberapa kasus dimana fitur tersebut cukup menarik untuk menjadi pengecualian pada aturan tersebut, dan fitur tersebut berada di dalam opsi kompiler eksperimental.\nMungkin versi yang terdapat pada fitur ini berbeda ketika/jika mereka ditambahkan pada bahasa JavaScript, dan oleh karena itu dianggap berisiko.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata' aria-labelledby=\"emitDecoratorMetadata-config\">#</a> Menghasilkan Dekorator Metadata - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mengaktifkan dukungan eksperimental untuk menghasilkan tipe data metadata untuk dekorator yang bekerja dengan modul <a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>.</p>\n<p>Sebagai contoh, berikut adalah JavaScript</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n<p>Dengan <code>emitDecoratorMetadata</code> tidak disetel ke true (bawaan):</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\n// @showEmit\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n<p>Dengan <code>emitDecorationMetadata</code> di setel ke true:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @experimentalDecorators\n// @showEmit\n// @emitDecoratorMetadata\nfunction LogMethod(\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  console.log(target);\n  console.log(propertyKey);\n  console.log(descriptor);\n}\n\nclass Demo {\n  @LogMethod\n  public foo(bar: number) {\n    // do nothing\n  }\n}\n\nconst demo = new Demo();\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#experimentalDecorators' aria-label=\"Jump to compiler option info for experimentalDecorators\" ><code>experimentalDecorators</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators' aria-labelledby=\"experimentalDecorators-config\">#</a> Decorators Eksperimental - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menyalakan <a href=\"https://github.com/tc39/proposal-decorators\">dukungan eksperimental untuk <em>decorator</em></a>, yang terdapat pada tahap ke 2 proses standarisasi TC39.</p>\n<p><em>Decorator</em> adalah fitur bahasa pemrograman yang belum diadaptasi secara penuh ke dalam spesifikasi JavaScript.\nHal ini berarti bahwa versi implementasi di TypeScript mungkin berbeda dengan implementasi pada JavaScript ketika fitur tersebut telah diputuskan oleh TC39.</p>\n<p>Anda dapat mencari tahu lebih lanjut mengenai dukungan <em>decorator</em> di TypeScript pada <a href=\"/docs/handbook/decorators.html\">buku petunjuk</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#emitDecoratorMetadata' aria-label=\"Jump to compiler option info for emitDecoratorMetadata\" ><code>emitDecoratorMetadata</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Advanced_Options_6178' ><a href='#Advanced_Options_6178' name='Advanced_Options_6178' aria-label=\"Link to the section Tingkat Lanjut\" aria-labelledby='Advanced_Options_6178'>#</a>Tingkat Lanjut</h2>\n<p>Opsi (<em>flags</em>) yang membantu proses debug</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode' aria-labelledby=\"allowUnreachableCode-config\">#</a> Izinkan Kode Tak Terjangkau - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Kapan:</p>\n<ul>\n<li><code>undefined</code> <em>default</em> memberikan saran sebagai peringatan kepada editor</li>\n<li><code>true</code> kode yang tidak dapat dijangkau diabaikan</li>\n<li><code>false</code> menimbulkan galat kompiler tentang kode yang tidak dapat dijangkau</li>\n</ul>\n<p>Peringatan ini hanya tentang kode yang terbukti tidak dapat dijangkau karena penggunaan sintaks JavaScript, misalnya:</p>\n<pre><code class=\"language-ts\">function fn(n: number) {\n  if (n > 5) {\n    return true;\n  } else {\n    return false;\n  }\n  return true;\n}\n</code></pre>\n<p>Dengan <code>\"allowUnreachableCode\": false</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7027\n// @allowUnreachableCode: false\nfunction fn(n: number) {\n  if (n > 5) {\n    return true;\n  } else {\n    return false;\n  }\n  return true;\n}\n</code></pre>\n<p>Ini tidak mempengaruhi galat atas dasar kode yang <em>muncul</em> menjadi tidak dapat dijangkau karena menggolongkan uraian.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels' aria-labelledby=\"allowUnusedLabels-config\">#</a> Izinkan Label yang Tidak Digunakan - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Setel ke <em>false</em> untuk menonaktifkan peringatan tentang label yang tidak digunakan.</p>\n<p>Label sangat jarang di JavaScript dan biasanya menunjukkan upaya untuk menulis objek dengan tepat:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7028\n// @allowUnusedLabels: false\nfunction verifikasiUmur(umur: number) {\n  // Lupa menulis pernyataan 'return'\n  if (umur > 18) {\n    terverifikasi: true;\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies' aria-labelledby=\"assumeChangesOnlyAffectDirectDependencies-config\">#</a> Menganggap Perubahan Hanya Mempengaruhi Dependensi Langsung - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ketika opsi ini diaktifkan, TypeScript akan menghindari pemeriksaan ulang/membangun kembali semua berkas yang benar-benar mungkin terpengaruh dan hanya memeriksa ulang/membangun kembali berkas yang telah berubah serta berkas yang langsung mengimpornya.</p>\n<p>Ini dapat dianggap sebagai implementasi ‘fast &#x26; loose’ dari algoritma pengawas, yang mana bisa secara drastis dapat mengurangi waktu <em>rebuild</em> dengan sesekali harus menjalankan <em>build</em> lengkap untuk mendapatkan semua pesan penyusun kesalahan.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" id='charset' href='#charset' name='charset' aria-labelledby=\"charset-config\">#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Di TypeScript versi sebelumnya, ini mengontrol pengkodean yang digunakan saat membaca berkas teks dari memori.\nSaat ini, TypeScript mengasumsikan pengkodean UTF-8, tetapi akan mendeteksi dengan benar UTF-16 (BE dan LE) atau UTF-8 BOMs.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>utf8</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir' aria-labelledby=\"declarationDir-config\">#</a> Declaration Dir - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menawarkan cara untuk mengonfigurasi direktori <em>root</em> tempat berkas deklarasi dihasilkan.</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>dengan <code>tsconfig.json</code>;</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"declarationDir\": \"./types\"\n  }\n}\n</code></pre>\n<p>Akan menempatkan d.ts untuk <code>index.ts</code> di direktori <code>types</code>:</p>\n<pre><code>example\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> n/a</p>\n</li>\n<li><span>Related:</span><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics' aria-labelledby=\"diagnostics-config\">#</a> Diagnostics - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Digunakan untuk mengeluarkan informasi diagnostik untuk <em>debugging</em>. Perintah ini adalah <em>subset</em> dari <a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a> yang lebih merupakan hasil yang dilihat pengguna, dan lebih mudah ditafsirkan.</p>\n<p>Jika Anda telah diminta oleh kompilator engineer TypeScript untuk memberikan hasil menggunakan tanda ini dalam sebuah kompilasi, di mana tidak ada salahnya menggunakan <a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a> sebagai gantinya.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#extendedDiagnostics' aria-label=\"Jump to compiler option info for extendedDiagnostics\" ><code>extendedDiagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableReferencedProjectLoad-config'><a aria-label=\"Link to the compiler option: disableReferencedProjectLoad\" id='disableReferencedProjectLoad' href='#disableReferencedProjectLoad' name='disableReferencedProjectLoad' aria-labelledby=\"disableReferencedProjectLoad-config\">#</a> disableReferencedProjectLoad - <code>disableReferencedProjectLoad</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Dalam program TypeScript multi-proyek, TypeScript akan memuat semua proyek yang tersedia ke dalam memori untuk memberikan hasil yang akurat untuk tanggapan editor yang memerlukan grafik pengetahuan lengkap seperti ‘Temukan Semua Referensi’.</p>\n<p>Jika proyek Anda besar, Anda dapat menggunakan saran <code>disableReferencedProjectLoad</code> untuk menonaktifkan pemuatan otomatis semua proyek. Sebaliknya, proyek dimuat secara dinamis saat Anda membuka file melalui editor Anda.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit' aria-labelledby=\"disableSizeLimit-config\">#</a> Nonaktifkan Batas Ukuran - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Untuk menghindari kemungkinan masalah pembengkakan memori saat bekerja dengan proyek JavaScript yang sangat besar, ada batas atas jumlah memori yang akan dialokasikan TypeScript. Mengaktifkan saran ini akan menghapus batas.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching' aria-labelledby=\"disableSolutionSearching-config\">#</a> Nonaktifkan Pencarian Solusi - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Saat bekerja dengan <a href=\"/docs/handbook/project-references.html\">proyek TypeScript komposit</a>, opsi ini menyediakan cara untuk menyatakan bahwa Anda tidak ingin proyek disertakan saat menggunakan fitur seperti <em>find all reference</em> atau <em>jump to definition</em> di editor.</p>\n<p>Saran ini untuk sesuatu yang dapat Anda gunakan untuk meningkatkan daya tanggap dalam proyek komposit besar.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect' aria-labelledby=\"disableSourceOfProjectReferenceRedirect-config\">#</a> Nonaktifkan Pengalihan Referensi Proyek Sumber - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Saat bekerja dengan <a href=\"/docs/handbook/project-references.html\">proyek TypeScript komposit</a>, opsi ini menyediakan cara untuk menuju <a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references\">kembali ke pra-3.7</a> perilaku di mana berkas d.ts digunakan sebagai batas antar modul.\nDi 3.7, sumber kebenaran sekarang adalah berkas TypeScript Anda.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM' aria-labelledby=\"emitBOM-config\">#</a> _Emit BOM_ - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mengontrol apakah TypeScript akan menghasilkan <a href=\"https://wikipedia.org/wiki/Byte_order_mark\">tanda urutan byte (<em>byte order mark</em> - BOM)</a> saat menulis berkas output.\nBeberapa lingkungan <em>runtime</em> memerlukan <em>BOM</em> untuk menafsirkan berkas JavaScript dengan benar; yang lain mengharuskan itu tidak ada.\nNilai bawaan dari <code>false</code> umumnya paling baik kecuali Anda memiliki alasan untuk mengubahnya.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly' aria-labelledby=\"emitDeclarationOnly-config\">#</a> Menghasilkan Deklarasi Saja - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Hanya</em> menghasilkan berkas <code>.d.ts</code>; jangan mengirimkan berkas <code>.js</code>.</p>\n<p>Pengaturan ini berguna dalam dua kasus:</p>\n<ul>\n<li>Anda menggunakan <em>transpiler</em> selain TypeScript untuk membuat JavaScript Anda.</li>\n<li>Anda menggunakan TypeScript hanya untuk menghasilkan berkas <code>d.ts</code> untuk konsumen Anda.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.8\" href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='explainFiles-config'><a aria-label=\"Link to the compiler option: explainFiles\" id='explainFiles' href='#explainFiles' name='explainFiles' aria-labelledby=\"explainFiles-config\">#</a> explainFiles - <code>explainFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.</p>\n<p>For example, with this project of just a single <code>index.ts</code> file</p>\n<pre><code class=\"language-sh\">example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>Using a <code>tsconfig.json</code> which has <code>explainFiles</code> set to true:</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"explainFiles\": true\n  }\n}\n</code></pre>\n<p>Running TypeScript against this folder would have output like this:</p>\n<pre><code>❯ tsc\nnode_modules/typescript/lib/lib.d.ts\n  Default library for target 'es5'\nnode_modules/typescript/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.dom.d.ts\n  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.webworker.importscripts.d.ts\n  Library referenced via 'webworker.importscripts' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.scripthost.d.ts\n  Library referenced via 'scripthost' from file 'node_modules/typescript/lib/lib.d.ts'\nindex.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'\n</code></pre>\n<p>The output above show:</p>\n<ul>\n<li>The initial lib.d.ts lookup based on <a href=\"#include\"><code>target</code></a>, and the chain of <code>.d.ts</code> files which are referenced</li>\n<li>The <code>index.ts</code> file located via the default pattern of <a href=\"#include\"><code>include</code></a></li>\n</ul>\n<p>This option is intended for debugging how a file has become a part of your compile.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics' aria-labelledby=\"extendedDiagnostics-config\">#</a> Diagnosa yang Diperpanjang - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Anda dapat menggunakan opsi ini untuk menemukan dimana TypeScript menghabiskan waktunya selama proses kompilasi.\nPeralatan ini digunakan untuk memahami karakteristik peforma basis kode Anda secara keseluruhan.</p>\n<p>Anda dapat mempelajari lebih lanjut bagaimana mengukur dan memahami hasil keluaran pada <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">bagian wiki peforma</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#diagnostics' aria-label=\"Jump to compiler option info for diagnostics\" ><code>diagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames' aria-labelledby=\"forceConsistentCasingInFileNames-config\">#</a> Paksa Jenis Huruf Konsisten Dalam Nama berkas - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript mengikuti aturan sensitifitas huruf besar dari sistem berkas yang menjalankannya.\nIni bisa menjadi masalah jika beberapa pengembang bekerja dalam sistem berkas sensitifitas huruf besar dan kecil dan yang lainnya tidak.\nJika sebuah berkas mencoba mengimpor <code>fileManager.ts</code> dengan menetapkan <code>./FileManager.ts</code>, berkas tersebut akan ditemukan dalam sistem berkas yang tidak peka huruf besar/kecil, tetapi tidak pada sistem berkas yang peka huruf besar kecil.</p>\n<p>Ketika opsi ini disetel, TypeScript akan mengeluarkan galat jika program mencoba memasukkan berkas dengan jenis huruf yang berbeda dari jenis huruf pada disk.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile' aria-labelledby=\"generateCpuProfile-config\">#</a> Hasilkan Profil CPU - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Opsi ini memberi Anda kesempatan untuk meminta TypeScript mengeluarkan profil CPU v8 selama penyusun dijalankan. Profil CPU dapat memberikan wawasan tentang mengapa proyek Anda bisa lambat.</p>\n<p>Opsi ini hanya dapat digunakan dari CLI melalui: <code>--generateCpuProfile tsc-output.cpuprofile</code>.</p>\n<pre><code class=\"language-sh\">npm run tsc --generateCpuProfile tsc-output.cpuprofile\n</code></pre>\n<p>Berkas ini dapat dibuka di peramban berbasis chromium seperti Chrome atau Edge Developer di bagian <a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">Riwayat CPU</a>.\nAnda dapat mempelajari lebih lanjut tentang memahami kinerja penyusun di <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">Bagian wiki TypeScript tentang kinerja</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> profile.cpuprofile</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues' aria-labelledby=\"importsNotUsedAsValues-config\">#</a> Impor Tidak Digunakan Sebagai Nilai - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Kode ini mengontrol cara kerja <code>import</code>, ada 3 opsi berbeda:</p>\n<ul>\n<li><code>remove</code>: Perilaku umum untuk menghapus pernyataan <code>import</code> yang hanya merupakan acuan dari kata.</li>\n<li><code>preserve</code>: Mempertahankan semua pernyataan <code>import</code> yang nilai atau katanya tidak pernah digunakan. Hal ini dapat menyebabkan impor/efek samping yang tetap dipertahankan.</li>\n<li><code>error</code>: Ini mempertahankan semua impor (sama seperti pilihan), tetapi akan mengalami galat jika impor nilai hanya digunakan sebagai tipe data. Ini mungkin berguna jika Anda ingin memastikan tidak ada nilai yang diimpor secara tidak sengaja, tetapi tetap membuat impor dengan jelas.</li>\n</ul>\n<p>Kode ini berfungsi karena Anda dapat menggunakan <code>import type</code> secara jelas dengan pernyataan <code>import</code> yang tidak boleh dimasukkan ke JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>remove,<br/>preserve,<br/>error</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory' aria-labelledby=\"jsxFactory-config\">#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mengubah fungsi yang dipanggil pada file <code>.js</code> ketika melakukan kompilasi elemen-elemen JSX.\nPerubahan yang paling umum adalah dengan menggunakan <code>\"h\"</code> atau <code>\"preact.h\"</code> dibandingkan penggunaan bawaan <code>\"React.createElement\"</code> jika menggunakan <code>preact</code>.</p>\n<p>Opsi ini dapat digunakan pada basis per file juga seperti halnya <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel’s <code>/** @jsx h */</code> directive</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.createElement</code></p>\n</li>\n<li><span>Allowed:</span><p>Any identifier or dotted identifier</p>\n</li>\n<li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFragmentFactory-config'><a aria-label=\"Link to the compiler option: jsxFragmentFactory\" id='jsxFragmentFactory' href='#jsxFragmentFactory' name='jsxFragmentFactory' aria-labelledby=\"jsxFragmentFactory-config\">#</a> jsxFragmentFactory - <code>jsxFragmentFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menentukan fungsi penghasil fragmen JSX yang akan digunakan ketika menargetkan kompiler react JSX <code>jsxFactory</code> sudah ditentukan, misalnya seperti <code>Fragment</code>.</p>\n<p>Opsi ini dapat digunakan pada basis per file juga seperti halnya <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments\">Babel’s <code>/** @jsxFrag h */</code> directive</a>.</p>\n<p>Contoh dengan menggunakan TSConfig berikut ini:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  }\n}\n</code></pre>\n<p>TSX file berikut:</p>\n<pre><code class=\"language-tsx\">import { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  &#x3C;>\n    &#x3C;div>Hello&#x3C;/div>\n  &#x3C;/>\n);\n</code></pre>\n<p>Akan terlihat seperti:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @showEmittedFile: index.js\n// @jsxFactory: h\n// @jsxFragmentFactory: Fragment\n// @noErrors\n// @target: esnext\n// @module: commonjs\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => (\n  &#x3C;>\n    &#x3C;div>Hello&#x3C;/div>\n  &#x3C;/>\n);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxImportSource-config'><a aria-label=\"Link to the compiler option: jsxImportSource\" id='jsxImportSource' href='#jsxImportSource' name='jsxImportSource' aria-labelledby=\"jsxImportSource-config\">#</a> jsxImportSource - <code>jsxImportSource</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Declares the module specifier to be used for importing the <code>jsx</code> and <code>jsxs</code> factory functions when using <a href=\"#jsx\"><code>jsx</code></a> as <code>\"react-jsx\"</code> or <code>\"react-jsxdev\"</code> which were introduced in TypeScript 4.1.</p>\n<p>With <a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">React 17</a> the library supports a new form of JSX transformation via a separate import.</p>\n<p>For example with this code:</p>\n<pre><code class=\"language-tsx\">import React from \"react\";\n\nfunction App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Using this TSConfig:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\"\n  }\n}\n</code></pre>\n<p>The emitted JavaScript from TypeScript is:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @noErrors\n// @jsx: react-jsx\n// @module: commonjs\n// @target: esnext\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\nimport React from \"react\";\n\nfunction App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>For example if you wanted to use <code>\"jsxImportSource\": \"preact\"</code>, you need a tsconfig like:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\",\n    \"types\": [\"preact\"]\n  }\n}\n</code></pre>\n<p>Which generates code like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @jsxImportSource: preact\n// @types: preact\n// @jsx: react-jsx\n// @target: esnext\n// @module: commonjs\n// @noErrors\n\nexport function App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Alternatively, you can use a per-file pragma to set this option, for example:</p>\n<pre><code class=\"language-tsx\">/** @jsxImportSource preact */\n\nexport function App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Would add <code>preact/jsx-runtime</code> as an import for the <code>_jsx</code> factory.</p>\n<p><em>Note:</em> In order for this to work like you would expect, your <code>tsx</code> file must include an <code>export</code> or <code>import</code> so that it is considered a module.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>react</code></p>\n</li>\n<li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly' aria-labelledby=\"keyofStringsOnly-config\">#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag changes the <code>keyof</code> type operator to return <code>string</code> instead of <code>string | number</code> when applied to a type with a string index signature.</p>\n<p>This flag is used to help people keep this behavior from <a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">before TypeScript 2.9’s release</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles' aria-labelledby=\"listEmittedFiles-config\">#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of generated files part of the compilation to the terminal.</p>\n<p>This flag is useful in two cases:</p>\n<ul>\n<li>You want to transpile TypeScript as a part of a build chain in the terminal where the filenames are processed in the next command.</li>\n<li>You are not sure that TypeScript has included a file you expected, as a part of debugging the <a href=\"#Project_Files_0\">file inclusion settings</a>.</li>\n</ul>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"listFiles\": true\n  }\n}\n</code></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts\n</code></pre>\n<p>Normally, TypeScript would return silently on success.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" id='listFiles' href='#listFiles' name='listFiles' aria-labelledby=\"listFiles-config\">#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files part of the compilation. This is useful when you are not sure that TypeScript has\nincluded a file you expected.</p>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"listFiles\": true\n  }\n}\n</code></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts\n</code></pre>\n<p>Note if using TypeScript 4.2, prefer <a href=\"#explainFiles\"><code>explainFiles</code></a> which offers an explanation of why a file was added too.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#explainFiles' aria-label=\"Jump to compiler option info for explainFiles\" ><code>explainFiles</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth' aria-labelledby=\"maxNodeModuleJsDepth-config\">#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The maximum dependency depth to search under <code>node_modules</code> and load JavaScript files.</p>\n<p>This flag is can only be used when <a href=\"#allowJs\"><code>allowJs</code></a> is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your <code>node_modules</code>.</p>\n<p>Ideally this should stay at 0 (the default), and <code>d.ts</code> files should be used to explicitly define the shape of modules.\nHowever, there are cases where you may want to turn this on at the expense of speed and potential accuracy.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>0</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" id='newLine' href='#newLine' name='newLine' aria-labelledby=\"newLine-config\">#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Platform specific</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers' aria-labelledby=\"noEmitHelpers-config\">#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Instead of importing helpers with <a href=\"#importHelpers\"><code>importHelpers</code></a>, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.</p>\n<p>For example, using this <code>async</code> function in ES5 requires a <code>await</code>-like function and <code>generator</code>-like function to run:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n<p>Which creates quite a lot of JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n<p>Which can be switched out with your own globals via this flag:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES5\n// @noEmitHelpers\nconst getAPI = async (url: string) => {\n  // Get API\n  return {};\n};\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError' aria-labelledby=\"noEmitOnError-config\">#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.</p>\n<p>This defaults to <code>false</code>, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.4\" href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation' aria-labelledby=\"noErrorTruncation-config\">#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not truncate error messages.</p>\n<p>With <code>false</code>, the default.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322 2454\nvar x: {\n  propertyWithAnExceedinglyLongName1: string;\n  propertyWithAnExceedinglyLongName2: string;\n  propertyWithAnExceedinglyLongName3: string;\n  propertyWithAnExceedinglyLongName4: string;\n  propertyWithAnExceedinglyLongName5: string;\n  propertyWithAnExceedinglyLongName6: string;\n  propertyWithAnExceedinglyLongName7: string;\n  propertyWithAnExceedinglyLongName8: string;\n};\n\n// String representation of type of 'x' should be truncated in error message\nvar s: string = x;\n</code></pre>\n<p>With <code>true</code></p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322 2454\n// @noErrorTruncation: true\nvar x: {\n  propertyWithAnExceedinglyLongName1: string;\n  propertyWithAnExceedinglyLongName2: string;\n  propertyWithAnExceedinglyLongName3: string;\n  propertyWithAnExceedinglyLongName4: string;\n  propertyWithAnExceedinglyLongName5: string;\n  propertyWithAnExceedinglyLongName6: string;\n  propertyWithAnExceedinglyLongName7: string;\n  propertyWithAnExceedinglyLongName8: string;\n};\n\n// String representation of type of 'x' should be truncated in error message\nvar s: string = x;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict' aria-labelledby=\"noImplicitUseStrict-config\">#</a> No Implicit Use Strict - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Anda seharusnya tidak memerlukan ini. Secara bawaan, saat memancarkan sebuah berkas modul kepada sebuah target non-ES6, TypeScript memancarkan sebuah kata pengantar <code>\"use strict\";</code> di bagian atas berkas.\nIni dapat menonaktifkan setelan kata pengantar itu.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES3\n// @module: AMD\n// @noImplicitUseStrict\n// @alwaysStrict: false\nexport function fn() {}\n</code></pre>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @target: ES3\n// @module: AMD\nexport function fn() {}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" id='noLib' href='#noLib' name='noLib' aria-labelledby=\"noLib-config\">#</a> No Lib - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables the automatic inclusion of any library files.\nIf this option is set, <code>lib</code> is ignored.</p>\n<p>TypeScript <em>cannot</em> compile anything without a set of interfaces for key primitives like: <code>Array</code>, <code>Boolean</code>,<code>Function</code>, <code>IArguments</code>, <code>Number</code>, <code>Object</code>, <code>RegExp</code>, and <code>String</code>. It is expected that if you use <code>noLib</code> you will be including your own type definitions for these.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#lib' aria-label=\"Jump to compiler option info for lib\" ><code>lib</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" id='noResolve' href='#noResolve' name='noResolve' aria-labelledby=\"noResolve-config\">#</a> No Resolve - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript will examine the initial set of files for <code>import</code> and <code>&#x3C;reference</code> directives and add these resolved files to your program.</p>\n<p>If <code>noResolve</code> is set, this process doesn’t happen.\nHowever, <code>import</code> statements are still checked to see if they resolve to a valid module, so you’ll need to make sure this is satisfied by some other means.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks' aria-labelledby=\"noStrictGenericChecks-config\">#</a> No Strict Generic Checks - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript will unify type parameters when comparing two generic functions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\n\ntype A = &#x3C;T, U>(x: T, y: U) => [T, U];\ntype B = &#x3C;S>(x: S, y: S) => [S, S];\n\nfunction f(a: A, b: B) {\n  b = a; // Ok\n  a = b; // Error\n}\n</code></pre>\n<p>This flag can be used to remove that check.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.4\" href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" id='out' href='#out' name='out' aria-labelledby=\"out-config\">#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gunakan <a href=\"#outFile\">outFile</a> sebagai gantinya.</p>\n<p>Opsi <code>out</code> memproses lokasi akhir dengan dengan cara yang tidak dapat diprediksi atau konsisten.\nOpsi ini dipertahankan hanya untuk kompatibilitas dengan versi lama dan sudah usang.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums' aria-labelledby=\"preserveConstEnums-config\">#</a> Preserve Const Enums - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not erase <code>const enum</code> declarations in generated code. <code>const enum</code>s provide a way to reduce the overall memory footprint\nof your application at runtime by emitting the enum value instead of a reference.</p>\n<p>For example with this TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>The default <code>const enum</code> behavior is to convert any <code>Album.Something</code> to the corresponding number literal, and to remove a reference\nto the enum from the JavaScript completely.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>With <code>preserveConstEnums</code> set to <code>true</code>, the <code>enum</code> exists at runtime and the numbers are still emitted.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @preserveConstEnums: true\n// @showEmit\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n\nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n</code></pre>\n<p>This essentially makes such <code>const enums</code> a source-code feature only, with no runtime traces.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace' aria-labelledby=\"reactNamespace-config\">#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gunakan <a href=\"#jsxFactory\"><code>--jsxFactory</code></a> sebagai gantinya. Tentukan objek yang dipanggil oleh <code>createElement</code> ketika menargetkan <code>react</code> pada berkas TSX.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>\"React\"</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule' aria-labelledby=\"resolveJsonModule-config\">#</a> Menyelesaikan Module JSON - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Memperbolehkan mengimpor modul dengan ekstensi ‘.json’ merupakan praktik umum pada proyek node.\nIni termasuk membuat jenis untuk <code>import</code> berdasarkan bentuk JSON statis.</p>\n<p>TypeScript tidak mendukung penyelesaian berkas JSON secara bawaan:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2732\n// @filename: settings.json\n{\n    \"repo\": \"TypeScript\",\n    \"dry\": false,\n    \"debug\": false\n}\n// @filename: index.ts\nimport settings from \"./settings.json\";\n\nsettings.debug === true;\nsettings.dry === 2;\n</code></pre>\n<p>Mengaktifkan opsi memungkinkan impor JSON, dan memvalidasi jenis dalam berkas JSON tersebut.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2367\n// @resolveJsonModule\n// @module: commonjs\n// @moduleResolution: node\n// @filename: settings.json\n{\n    \"repo\": \"TypeScript\",\n    \"dry\": false,\n    \"debug\": false\n}\n// @filename: index.ts\nimport settings from \"./settings.json\";\n\nsettings.debug === true;\nsettings.dry === 2;\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck' aria-labelledby=\"skipDefaultLibCheck-config\">#</a> Melewati pemeriksaan pustaka bawaan - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gunakan <a href=\"#%20skipLibCheck\"><code>--skipLibCheck</code></a> sebagai gantinya. Lewati pemeriksaan jenis file deklarasi pustaka bawaan.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck' aria-labelledby=\"skipLibCheck-config\">#</a> Melewati pengecekan pustaka - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Melewati pemeriksaan jenis berkas deklarasi.</p>\n<p>Ini dapat menghemat waktu selama kompilasi dengan mengorbankan akurasi dari sistem type. Misalnya, dua pustaka bisa mendefinisikan dua salinan dari <code>type</code> (tipe) yang sama dengan cara yang tidak konsisten. Dibandingkan melakukan pengecekan menyeluruh pada semua berkas <code>d.ts</code>, TypeScript akan mengecek tipe data dari kode yang Anda acu secara spesifik di dalam kode sumber aplikasi.</p>\n<p>Kasus umum dimana Anda mungkin berpikir untuk menggunakan <code>skipLibCheck</code> adalah ketika ada dua salinan pustaka di <code>node_modules</code> Anda. Dalam kasus ini, Anda harus mempertimbangkan untuk menggunakan fitur seperti <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a> untuk memastikan hanya ada satu salinan dependency di root Anda atau menyelidiki bagaimana cara memastikan hanya ada satu resolusi dependency untuk memperbaiki masalah tanpa ada alat tambahan.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal' aria-labelledby=\"stripInternal-config\">#</a> Strip Internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit declarations for code that has an <code>@internal</code> annotation in its JSDoc comment.\nThis is an internal compiler option; use at your own risk, because the compiler does not check that the result is valid.\nIf you are searching for a tool to handle additional levels of visibility within your <code>d.ts</code> files, look at <a href=\"https://api-extractor.com\">api-extractor</a>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>With the flag set to <code>false</code> (default):</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>With <code>stripInternal</code> set to <code>true</code> the <code>d.ts</code> emitted will be redacted.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @stripinternal\n// @showEmittedFile: index.d.ts\n// @showEmit\n// @declaration\n/**\n * Days available in a week\n * @internal\n */\nexport const daysInAWeek = 7;\n\n/** Calculate how much someone earns in a week */\nexport function weeklySalary(dayRate: number) {\n  return daysInAWeek * dayRate;\n}\n</code></pre>\n<p>The JavaScript output is still the same.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors' aria-labelledby=\"suppressExcessPropertyErrors-config\">#</a> Suppress Excess Property Errors - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This disables reporting of excess property errors, such as the one shown in the following example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\ntype Point = { x: number; y: number };\nconst p: Point = { x: 1, y: 3, m: 10 };\n</code></pre>\n<p>This flag was added to help people migrate to the stricter checking of new object literals in <a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>.</p>\n<p>We don’t recommend using this flag in a modern codebase, you can suppress one-off cases where you need it using <code>// @ts-ignore</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors' aria-labelledby=\"suppressImplicitAnyIndexErrors-config\">#</a> Suppress Implicit Any Index Errors - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Turning <code>suppressImplicitAnyIndexErrors</code> on suppresses reporting the error about implicit anys when indexing into objects, as shown in the following example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: true\n// @suppressImplicitAnyIndexErrors: false\n// @strict: true\n// @errors: 7053\nconst obj = { x: 10 };\nconsole.log(obj[\"foo\"]);\n</code></pre>\n<p>Using <code>suppressImplicitAnyIndexErrors</code> is quite a drastic approach. It is recommended to use a <code>@ts-ignore</code> comment instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: true\n// @strict: true\nconst obj = { x: 10 };\n// @ts-ignore\nconsole.log(obj[\"foo\"]);\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution' aria-labelledby=\"traceResolution-config\">#</a> Trace Resolution - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When you are trying to debug why a module isn’t being included.\nYou can set <code>traceResolutions</code> to <code>true</code> to have TypeScript print information about its resolution process for each processed file.</p>\n<p>You can read more about this in <a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields' aria-labelledby=\"useDefineForClassFields-config\">#</a> Use Define For Class Fields - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag is used as part of migrating to the upcoming standard version of class fields. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScript’s implementation but the same syntax.</p>\n<p>This flag switches to the upcoming ECMA runtime behavior.</p>\n<p>You can read more about the transition in <a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">the 3.7 release notes</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section Baris Perintah\" aria-labelledby='Command_line_Options_6171'>#</a>Baris Perintah</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput' aria-labelledby=\"preserveWatchOutput-config\">#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" id='pretty' href='#pretty' name='pretty' aria-labelledby=\"pretty-config\">#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Stylize errors and messages using color and context, this is on by default — offers you a chance to have less terse,\nsingle colored messages from the compiler.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='watchOptions'>\n<div>\n<section class='compiler-option'>\n<h3 id='watch-watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" id='watch-watchFile' href='#watch-watchFile' name='watch-watchFile' aria-labelledby=\"watch-watchFile-config\">#</a> watchFile - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Strategi bagaimana setiap berkas diamati.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Memeriksa setiap berkas apakah terjadi perubahan pada interval waktu tertentu.</li>\n<li><code>priorityPollingInterval</code>: Memeriksa setiap berkas apakah terjadi perubahan, tetapi menggunakan metode heuristik untuk memeriksa tipe berkas tertentu yang jarang berubah daripada yang lain.</li>\n<li><code>dynamicPriorityPolling</code>: Menggunakan antrian dinamis dimana berkas yang jarang diubah akan jarang diperiksa.</li>\n<li><code>useFsEvents</code> (the default): Berusaha menggunakan even asli sistem operasi/berkas sistem untuk memeriksa perubahan berkas.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Berusaha menggunakan event asli sistem operasi/berkas sistem untuk memeriksa perubahan berkas pada direktori <em>parent</em> dari berkas tersebut.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents,<br/>useFsEventsOnParentDirectory</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" id='watch-watchDirectory' href='#watch-watchDirectory' name='watch-watchDirectory' aria-labelledby=\"watch-watchDirectory-config\">#</a> watchDirectory - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Strategi untuk bagaimana seluruh direktori diperhatikan dalam sistem yang tidak memiliki fungsi pengawasan berkas secara rekursif.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Memeriksa setiap direktori untuk memantau perubahan beberapa kali dalam satu detik secara periodik pada interval yang telah ditentukan.</li>\n<li><code>dynamicPriorityPolling</code>: Menggunakan sebuah <em>queue</em> dinamis dimana direktori-direktori yang jarang mengalami modifikasi akan lebih jarang diperiksa.</li>\n<li><code>useFsEvents</code> (the default): Mencoba menggunakan sistem operasi / kejadian asli dari sistem berkas untuk perubahan direktori.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" id='watch-fallbackPolling' href='#watch-fallbackPolling' name='watch-fallbackPolling' aria-labelledby=\"watch-fallbackPolling-config\">#</a> fallbackPolling - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Saat menggunakan peristiwa sistem berkas, opsi ini menetapkan strategi <em>polling</em> yang akan digunakan saat sistem kehabisan pengamat berkas asli dan / atau tidak mendukung pengamat berkas asli.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Periksa setiap berkas apakah ada perubahan beberapa kali dalam satu detik pada interval tetap.</li>\n<li><code>priorityPollingInterval</code>: Periksa setiap berkas apakah ada perubahan beberapa kali dalam satu detik, tetapi gunakan heuristik untuk memeriksa jenis berkas tertentu lebih jarang daripada yang lain.</li>\n<li><code>dynamicPriorityPolling</code>: Gunakan antrian dinamis di mana berkas yang lebih jarang diubah akan lebih jarang diperiksa.</li>\n<li><code>synchronousWatchDirectory</code>: Menonaktifkan pengawas yang ditunda pada direktori. Menonton yang ditunda berguna ketika banyak perubahan berkas mungkin terjadi sekaligus (misal. Perubahan dalam <code>node_modules</code> dari menjalankan <code>npm install</code>), tetapi Anda mungkin ingin menonaktifkannya dengan tanda ini untuk beberapa penyiapan yang kurang umum.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-synchronousWatchDirectory-config'><a aria-label=\"Link to the compiler option: synchronousWatchDirectory\" id='watch-synchronousWatchDirectory' href='#watch-synchronousWatchDirectory' name='watch-synchronousWatchDirectory' aria-labelledby=\"watch-synchronousWatchDirectory-config\">#</a> synchronousWatchDirectory - <code>synchronousWatchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively. Instead of giving a small timeout to allow for potentially multiple edits to occur on a file.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"synchronousWatchDirectory\": true\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeDirectories-config'><a aria-label=\"Link to the compiler option: excludeDirectories\" id='watch-excludeDirectories' href='#watch-excludeDirectories' name='watch-excludeDirectories' aria-labelledby=\"watch-excludeDirectories-config\">#</a> excludeDirectories - <code>excludeDirectories</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to drastically reduce the number of files which are watched during <code>--watch</code>. This can be a useful way to reduce the number of open file which TypeScript tracks on Linux.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"excludeDirectories\": [\"**/node_modules\", \"_build\", \"temp/*\"]\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeFiles-config'><a aria-label=\"Link to the compiler option: excludeFiles\" id='watch-excludeFiles' href='#watch-excludeFiles' name='watch-excludeFiles' aria-labelledby=\"watch-excludeFiles-config\">#</a> excludeFiles - <code>excludeFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to remove a set of specific files from the files which are watched.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"watchOptions\": {\n    \"excludeFiles\": [\"temp/file.ts\"]\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='typeAcquisition'>\n<h2 id=\"type-acquisition\" style=\"position:relative;\"><a href=\"#type-acquisition\" aria-label=\"type acquisition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Acquisition</h2>\n<p>Type Acquisition is only important for JavaScript projects. In TypeScript projects you need to include the types in your projects explicitly. However, for JavaScript projects, the TypeScript tooling will download types for your modules in the background and outside of your node_modules folder.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='type-enable-config'><a aria-label=\"Link to the compiler option: enable\" id='type-enable' href='#type-enable' name='type-enable' aria-labelledby=\"type-enable-config\">#</a> enable - <code>enable</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling type-acquisition in JavaScript projects:</p>\n<pre><code class=\"language-ts\">{\n  \"typeAcquisition\": {\n    \"enable\": false\n  }\n}\n</code></pre>\n<p>This could potentially remove all of the editor auto-completion for your project, if you want to get them back, you can use the <a href=\"https://www.typescriptlang.org/dt/search\">Type Search</a> to find <code>@types</code> packages or packages with types in them.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-include-config'><a aria-label=\"Link to the compiler option: include\" id='type-include' href='#type-include' name='type-include' aria-labelledby=\"type-include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If you have a JavaScript project where TypeScript needs additional guidance to understand global dependencies, or have disabled the built-in inference via <a href=\"#disableFilenameBasedTypeAcquisition\"><code>disableFilenameBasedTypeAcquisition</code></a>.</p>\n<p>You can use <code>include</code> to specify which types should be used from DefinitelyTyped:</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"include\": [\"jquery\"]\n  }\n}\n</code></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='type-exclude' href='#type-exclude' name='type-exclude' aria-labelledby=\"type-exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling the type-acquisition for a certain module in JavaScript projects. This can be useful for projects which include other libraries in testing infrastructure which aren’t needed in the main application.</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"exclude\": [\"jest\", \"mocha\"]\n  }\n}\n</code></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-disableFilenameBasedTypeAcquisition-config'><a aria-label=\"Link to the compiler option: disableFilenameBasedTypeAcquisition\" id='type-disableFilenameBasedTypeAcquisition' href='#type-disableFilenameBasedTypeAcquisition' name='type-disableFilenameBasedTypeAcquisition' aria-labelledby=\"type-disableFilenameBasedTypeAcquisition-config\">#</a> disableFilenameBasedTypeAcquisition - <code>disableFilenameBasedTypeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript’s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like <code>jquery.js</code> in your project would automatically download the types for JQuery from DefinitelyTyped.</p>\n<p>You can disable this via <code>disableFilenameBasedTypeAcquisition</code>.</p>\n<pre><code class=\"language-json\">{\n  \"typeAcquisition\": {\n    \"disableFilenameBasedTypeAcquisition\": true\n  }\n}\n</code></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"id","tsconfigMDPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/tsconfig-reference/output/id.md","intro":{"html":"<h2>Pengantar Referensi TSConfig</h2>\n<p>Berkas TSConfig di dalam sebuah direktori menunjukkan bahwa direktori tersebut adalah akar dari proyek TypeScript atau JavaScript.\nBerkas TSConfig dapat berupa <code>tsconfig.json</code> atau <code>jsconfig.json</code>, keduanya memiliki efek serupa dan kumpulan konfigurasi variabel yang sama.</p>\n<p>Halaman ini mencakup semua opsi (<em>flag</em>) yang tersedia di dalam berkas TSConfig. Dimulai dari gambaran umum setiap opsi, kemudian pindah ke atribut akar pada berkas JSON, kemudian <code>compilerOptions</code> yang berisi banyak opsi dan diakhiri dengan <code>watchOptions</code>.</p>\n"},"categories":[{"display":"Top Level","anchor":"Top Level","options":[{"anchor":"files","name":"Files"},{"anchor":"extends","name":"Extends"},{"anchor":"include","name":"Disertakan (_Include_)"},{"anchor":"exclude","name":"Exclude"},{"anchor":"references","name":"Referensi"}]},{"display":"Opsi Proyek","anchor":"Basic_Options_6172","options":[{"anchor":"allowJs","name":"Allow JS"},{"anchor":"checkJs","name":"Check JS"},{"anchor":"composite","name":"Composite"},{"anchor":"declaration","name":"Declaration"},{"anchor":"declarationMap","name":"_Declaration Map_"},{"anchor":"downlevelIteration","name":"Iterasi tingkat bawah"},{"anchor":"importHelpers","name":"Import Helpers"},{"anchor":"incremental","name":"Incremental"},{"anchor":"isolatedModules","name":"Modul Terisolasi (_Isolated Modules_)"},{"anchor":"jsx","name":"JSX"},{"anchor":"lib","name":"Lib"},{"anchor":"module","name":"Module"},{"anchor":"noEmit","name":"No Emit"},{"anchor":"outDir","name":"Out Dir"},{"anchor":"outFile","name":"Out File"},{"anchor":"plugins","name":"Plugins"},{"anchor":"removeComments","name":"Menghapus Komentar"},{"anchor":"rootDir","name":"Root Dir"},{"anchor":"sourceMap","name":"Source Map"},{"anchor":"target","name":"Target"},{"anchor":"tsBuildInfoFile","name":"TS Build Info File"}]},{"display":"Pemeriksaan Ketat","anchor":"Strict_Type_Checking_Options_6173","options":[{"anchor":"alwaysStrict","name":"Selalu Tepat"},{"anchor":"noImplicitAny","name":"No Implicit Any"},{"anchor":"noImplicitThis","name":"No Implicit This"},{"anchor":"strict","name":"Strict"},{"anchor":"strictBindCallApply","name":"Strict Bind Call Apply"},{"anchor":"strictFunctionTypes","name":"Strict Function Types"},{"anchor":"strictNullChecks","name":"Strict Null Checks"},{"anchor":"strictPropertyInitialization","name":"Strict Property Initialization"}]},{"display":"Resolusi Modul","anchor":"Module_Resolution_Options_6174","options":[{"anchor":"allowSyntheticDefaultImports","name":"Izinkan Setelan Standar Impor Sintetis"},{"anchor":"allowUmdGlobalAccess","name":"Izinkan Akses Global Umd"},{"anchor":"baseUrl","name":"Base Url"},{"anchor":"esModuleInterop","name":"Interop Modul ES"},{"anchor":"moduleResolution","name":"Module Resolution"},{"anchor":"paths","name":"Paths"},{"anchor":"preserveSymlinks","name":"Preserve Symlinks"},{"anchor":"rootDirs","name":"Root Dirs"},{"anchor":"typeRoots","name":"Type Roots"},{"anchor":"types","name":"Types"}]},{"display":"Source Maps","anchor":"Source_Map_Options_6175","options":[{"anchor":"inlineSourceMap","name":"Peta Sumber Sebaris"},{"anchor":"inlineSources","name":"Sumber Sebaris"},{"anchor":"mapRoot","name":"Map Root"},{"anchor":"sourceRoot","name":"Source Root"}]},{"display":"Pemeriksaan Linter","anchor":"Additional_Checks_6176","options":[{"anchor":"noFallthroughCasesInSwitch","name":"No Fallthrough Cases In Switch"},{"anchor":"noImplicitOverride","name":"noImplicitOverride"},{"anchor":"noImplicitReturns","name":"No Implicit Returns"},{"anchor":"noPropertyAccessFromIndexSignature","name":"noPropertyAccessFromIndexSignature"},{"anchor":"noUncheckedIndexedAccess","name":"noUncheckedIndexedAccess"},{"anchor":"noUnusedLocals","name":"No Unused Locals"},{"anchor":"noUnusedParameters","name":"No Unused Parameters"}]},{"display":"Eksperimental","anchor":"Experimental_Options_6177","options":[{"anchor":"emitDecoratorMetadata","name":"Menghasilkan Dekorator Metadata"},{"anchor":"experimentalDecorators","name":"Decorators Eksperimental"}]},{"display":"Tingkat Lanjut","anchor":"Advanced_Options_6178","options":[{"anchor":"allowUnreachableCode","name":"Izinkan Kode Tak Terjangkau"},{"anchor":"allowUnusedLabels","name":"Izinkan Label yang Tidak Digunakan"},{"anchor":"assumeChangesOnlyAffectDirectDependencies","name":"Menganggap Perubahan Hanya Mempengaruhi Dependensi Langsung"},{"anchor":"charset","name":"Charset"},{"anchor":"declarationDir","name":"Declaration Dir"},{"anchor":"diagnostics","name":"Diagnostics"},{"anchor":"disableReferencedProjectLoad","name":"disableReferencedProjectLoad"},{"anchor":"disableSizeLimit","name":"Nonaktifkan Batas Ukuran"},{"anchor":"disableSolutionSearching","name":"Nonaktifkan Pencarian Solusi"},{"anchor":"disableSourceOfProjectReferenceRedirect","name":"Nonaktifkan Pengalihan Referensi Proyek Sumber"},{"anchor":"emitBOM","name":"_Emit BOM_"},{"anchor":"emitDeclarationOnly","name":"Menghasilkan Deklarasi Saja"},{"anchor":"explainFiles","name":"explainFiles"},{"anchor":"extendedDiagnostics","name":"Diagnosa yang Diperpanjang"},{"anchor":"forceConsistentCasingInFileNames","name":"Paksa Jenis Huruf Konsisten Dalam Nama berkas"},{"anchor":"generateCpuProfile","name":"Hasilkan Profil CPU"},{"anchor":"importsNotUsedAsValues","name":"Impor Tidak Digunakan Sebagai Nilai"},{"anchor":"jsxFactory","name":"JSX Factory"},{"anchor":"jsxFragmentFactory","name":"jsxFragmentFactory"},{"anchor":"jsxImportSource","name":"jsxImportSource"},{"anchor":"keyofStringsOnly","name":"Keyof Strings Only"},{"anchor":"listEmittedFiles","name":"List Emitted Files"},{"anchor":"listFiles","name":"List Files"},{"anchor":"maxNodeModuleJsDepth","name":"Max Node Module JS Depth"},{"anchor":"newLine","name":"New Line"},{"anchor":"noEmitHelpers","name":"No Emit Helpers"},{"anchor":"noEmitOnError","name":"No Emit On Error"},{"anchor":"noErrorTruncation","name":"No Error Truncation"},{"anchor":"noImplicitUseStrict","name":"No Implicit Use Strict"},{"anchor":"noLib","name":"No Lib"},{"anchor":"noResolve","name":"No Resolve"},{"anchor":"noStrictGenericChecks","name":"No Strict Generic Checks"},{"anchor":"out","name":"Out"},{"anchor":"preserveConstEnums","name":"Preserve Const Enums"},{"anchor":"reactNamespace","name":"React Namespace"},{"anchor":"resolveJsonModule","name":"Menyelesaikan Module JSON"},{"anchor":"skipDefaultLibCheck","name":"Melewati pemeriksaan pustaka bawaan"},{"anchor":"skipLibCheck","name":"Melewati pengecekan pustaka"},{"anchor":"stripInternal","name":"Strip Internal"},{"anchor":"suppressExcessPropertyErrors","name":"Suppress Excess Property Errors"},{"anchor":"suppressImplicitAnyIndexErrors","name":"Suppress Implicit Any Index Errors"},{"anchor":"traceResolution","name":"Trace Resolution"},{"anchor":"useDefineForClassFields","name":"Use Define For Class Fields"}]},{"display":"Baris Perintah","anchor":"Command_line_Options_6171","options":[{"anchor":"preserveWatchOutput","name":"Preserve Watch Output"},{"anchor":"pretty","name":"Pretty"}]},{"display":"watchOptions","anchor":"watchOptions","options":[{"anchor":"watchFile","name":"watchFile"},{"anchor":"watchDirectory","name":"watchDirectory"},{"anchor":"fallbackPolling","name":"fallbackPolling"},{"anchor":"synchronousWatchDirectory","name":"synchronousWatchDirectory"},{"anchor":"excludeDirectories","name":"excludeDirectories"},{"anchor":"excludeFiles","name":"excludeFiles"}]},{"display":"typeAcquisition","anchor":"typeAcquisition","options":[{"anchor":"enable","name":"enable"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"disableFilenameBasedTypeAcquisition","name":"disableFilenameBasedTypeAcquisition"}]}]}},"staticQueryHashes":[]}