{"componentChunkName":"component---src-templates-glossary-tsx","path":"/glossary","result":{"data":{"markdownRemark":{"id":"11f47f89-eb8c-514f-9070-21e393985e9c","html":"<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='declare' ><a href='#declare' name='Declare' aria-label=\"Link to the section Declare\" aria-labelledby='declare'>#</a> Declare</h3>\n<p>The <code>declare</code> keyword is used to inform the TypeScript <a href=\"#type-system\">Type System</a> that a variable exists even if it cannot be found in the current source code.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Declare that a ghost exists, and that it has a function called \"boo\"\ndeclare const ghost: { boo: () => void };\n\nghost.boo();\n</code></pre>\n<p>TypeScript would <a href=\"#emit\">emit</a> JavaScript code like:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// Declare that a ghost exists, and that it has a function called \"boo\"\ndeclare const ghost: { boo: () => void };\n\nghost.boo();\n</code></pre>\n<p>This code could crash if there isn’t other code setting up the <code>ghost</code> object elsewhere.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='emit' ><a href='#emit' name='Emit' aria-label=\"Link to the section Emit\" aria-labelledby='emit'>#</a> Emit</h3>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='index-signatures' ><a href='#index-signatures' name='Index Signature' aria-label=\"Link to the section Index Signature\" aria-labelledby='index-signatures'>#</a> Index Signature</h3>\n<p>A type in TypeScript usually describes an exact set of fields to match on an object.\nAn index signature is a way to define the <a href=\"#shape\">Shape</a> of fields which are not known ahead of time.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type MathConstants = {\n  pi: 3.14159;\n  phi: 1.61803;\n\n  [key: string]: number;\n};\n\ninterface ModernConstants {\n  taniguchi: 0.6782344919;\n  raabe: 0.9189385332;\n\n  [key: string]: number;\n}\n</code></pre>\n<p>The <code>[key: string]: number;</code> is the index signature, which indicates to TypeScript that any fields on the object which are not mentioned will be a particular types.</p>\n<p>For example, with a <a href=\"#declare\">Declared</a> instance of <code>ModernConstants</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface ModernConstants {\n  taniguchi: 0.6782344919;\n  raabe: 0.9189385332;\n\n  [key: string]: number;\n}\n// ---cut---\ndeclare const modernConstants: ModernConstants;\n\n// This was defined earlier\nmodernConstants.raabe;\n//              ^?\n\n// This field was not defined above, so it is just `number`\nmodernConstants.lebesgue;\n//              ^?\n</code></pre>\n<p>In TypeScript 4.1 you can use the TSConfig flag <a href=\"/tsconfig#noPropertyAccessFromIndexSignature\"><code>noPropertyAccessFromIndexSignature</code></a> to enforce using quote notation (<code>modernConstants[\"lebesgue\"]</code>) instead of dot notation (<code>modernConstants.lebesgue</code>) to make using an index signature explicit in the calling code.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='interface' ><a href='#interface' name='Interface' aria-label=\"Link to the section Interface\" aria-labelledby='interface'>#</a> Interface</h3>\n<p>An interface is a way to describe the <a href=\"#shape\">Shape</a> of a JavaScript object. For example, a dog could be described in the following format:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Dog {\n  name: string;\n  dateOfBirth: Date;\n  markings: string[];\n}\n</code></pre>\n<p>This means that only an object with a <code>name</code>, <code>dateOfBirth</code> and <code>markings</code> could be classed as a “Dog” in the <a href=\"#type-system\">Type System</a>.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='parser' ><a href='#parser' name='Parser' aria-label=\"Link to the section Parser\" aria-labelledby='parser'>#</a> Parser</h3>\n<p>The parser is a part of the TypeScript compiler which takes the text from a <a href=\"#source-file\">Source File</a> and converts it into an <a href=\"#abstract-syntax-tree\">Abstract Syntax Tree</a>.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='runtime' ><a href='#runtime' name='JavaScript Runtime' aria-label=\"Link to the section JavaScript Runtime\" aria-labelledby='runtime'>#</a> JavaScript Runtime</h3>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='shape' ><a href='#shape' name='Shape' aria-label=\"Link to the section Shape\" aria-labelledby='shape'>#</a> Shape</h3>\n<p>The term “shape” is used to describe the fields and values on a JavaScript object. For example, you could say that this JavaScript object:</p>\n<pre><code class=\"language-ts\">const house = {\n  name: \"Shibden hall\",\n  road: \"Lister's Road\",\n  town: \"Halifax\",\n  county: \"West Yorkshire\",\n};\n</code></pre>\n<p>has the shape:</p>\n<ul>\n<li><code>name</code>: <code>string</code></li>\n<li><code>road</code>: <code>string</code></li>\n<li><code>town</code>: <code>string</code></li>\n<li><code>country</code>: <code>string</code></li>\n</ul>\n<p>TypeScript can describe this shape using two different syntaxes: <a href=\"#interface\">Interfaces</a> and <a href=\"#type-literal\">Types</a></p>\n<pre><code class=\"language-ts\">interface House {\n  name: string;\n  road: string;\n  town: string;\n  country: string;\n}\n\n// or\n\ntype House = {\n  name: string;\n  road: string;\n  town: string;\n  country: string;\n};\n</code></pre>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='source-file' ><a href='#source-file' name='Source File' aria-label=\"Link to the section Source File\" aria-labelledby='source-file'>#</a> Source File</h3>\n<p>The representation of text which TypeScript would recognize as JavaScript or TypeScript source code.</p>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='type-system' ><a href='#type-system' name='Type System' aria-label=\"Link to the section Type System\" aria-labelledby='type-system'>#</a> Type System</h3>\n<p>The JavaScript language has types like <code>string</code>, <code>object</code>, <code>symbol</code>, <code>boolean</code> etc, but it does not have a static type system.</p>\n<p>Often when the term “type system” is used, it is referring to a <em>static</em> type system like TypeScript provides.\nA static type system does not need to run your code in order to understand what the <a href=\"#shape\">Shape</a> of code at a particular location of a <a href=\"#source-file\">Source File</a> looks like.</p>\n<p>TypeScript uses a static type system to offer editing tools:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\nconst shop = {\n  name: \"Table Store\",\n  address: \"Maplewood\",\n};\n\nshop.a;\n//    ^|\n</code></pre>\n<p>As well as to provide a rich set of error messages when the types inside the type system don’t match up:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nlet shop = {\n  name: \"Table Store\",\n  address: \"Maplewood\",\n};\n\nshop = {\n  nme: \"Chair Store\",\n  address: \"Maplewood\",\n};\n</code></pre>\n</div>\n</article>\n<article>\n<div class='whitespace raised content main-content-block'>\n<h3 id='types-vs-runtime' ><a href='#types-vs-runtime' name='Types vs Runtime' aria-label=\"Link to the section Types vs Runtime\" aria-labelledby='types-vs-runtime'>#</a> Types vs Runtime</h3>\n<p>TypeScript adds a “type layer” on top of JavaScript code. TypeScript does this by adding additional syntax to JavaScript which needs to be removed in order to run inside a JavaScript <a href=\"#runtime\">runtime</a>.</p>\n<p>For example, this is JavaScript code which would run in a JavaScript runtime:</p>\n<pre><code class=\"language-ts\">const hello = \"Hello world\";\n</code></pre>\n<p>This is not:</p>\n<pre><code class=\"language-ts\">const hello: string = \"Hello world\";\n</code></pre>\n<p>The <code>: string</code> could be thought of as code which only exists in the “type layer” of TypeScript and not in the “runtime” / “expression” layer of JavaScript code which runs.</p>\n<p>The type layer is</p>\n</div>\n</article>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"en","glossaryPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/glossary/output/en.md","languageMeta":{"terms":[{"display":"Declare","id":"declare"},{"display":"Emit","id":"emit"},{"display":"Index Signature","id":"index-signatures"},{"display":"Interface","id":"interface"},{"display":"Parser","id":"parser"},{"display":"JavaScript Runtime","id":"runtime"},{"display":"Shape","id":"shape"},{"display":"Source File","id":"source-file"},{"display":"Type System","id":"type-system"},{"display":"Types vs Runtime","id":"types-vs-runtime"}]}}},"staticQueryHashes":[]}