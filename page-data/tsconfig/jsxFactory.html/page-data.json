{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/jsxFactory.html","result":{"pageContext":{"title":"jsxFactory","lang":"en","html":"<p>Changes the function called in <code>.js</code> files when compiling JSX Elements using the classic JSX runtime.\nThe most common change is to use <code>\"h\"</code> or <code>\"preact.h\"</code> instead of the default <code>\"React.createElement\"</code> if using <code>preact</code>.</p>\n<p>For example, this TSX file:</p>\n<pre><code class=\"language-tsx\">import { h } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>With <code>jsxFactory: \"h\"</code> looks like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @showEmittedFile: index.js\n// @jsxFactory: h\n// @noErrors\n// @target: esnext\n// @module: commonjs\n\nimport { h, Fragment } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babelâ€™s <code>/** @jsx h */</code> directive</a>.</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">/** @jsx h */\nimport { h } from \"preact\";\n\nconst HelloWorld = () => &#x3C;div>Hello&#x3C;/div>;\n</code></pre>\n<p>The factory chosen will also affect where the <code>JSX</code> namespace is looked up (for type checking information) before falling back to the global one.</p>\n<p>If the factory is defined as <code>React.createElement</code> (the default), the compiler will check for <code>React.JSX</code> before checking for a global <code>JSX</code>. If the factory is defined as <code>h</code>, it will check for <code>h.JSX</code> before a global <code>JSX</code>.</p>","redirectHref":"/tsconfig#jsxFactory"}},"staticQueryHashes":[]}