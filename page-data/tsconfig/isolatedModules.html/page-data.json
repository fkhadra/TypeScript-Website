{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/isolatedModules.html","result":{"pageContext":{"title":"isolatedModules","lang":"en","html":"<p>While you can use TypeScript to produce JavaScript code from TypeScript code, it’s also common to use other transpilers such as <a href=\"https://babeljs.io\">Babel</a> to do this.\nHowever, other transpilers only operate on a single file at a time, which means they can’t apply code transforms that depend on understanding the full type system.\nThis restriction also applies to TypeScript’s <code>ts.transpileModule</code> API which is used by some build tools.</p>\n<p>These limitations can cause runtime problems with some TypeScript features like <code>const enum</code>s and <code>namespace</code>s.\nSetting the <code>isolatedModules</code> flag tells TypeScript to warn you if you write certain code that can’t be correctly interpreted by a single-file transpilation process.</p>\n<p>It does not change the behavior of your code, or otherwise change the behavior of TypeScript’s checking and emitting process.</p>\n<p>Some examples of code which does not work when <code>isolatedModules</code> is enabled.</p>\n<h4 id=\"exports-of-non-value-identifiers\" style=\"position:relative;\"><a href=\"#exports-of-non-value-identifiers\" aria-label=\"exports of non value identifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exports of Non-Value Identifiers</h4>\n<p>In TypeScript, you can import a <em>type</em> and then subsequently export it:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\nimport { someType, someFunction } from \"someModule\";\n\nsomeFunction();\n\nexport { someType, someFunction };\n</code></pre>\n<p>Because there’s no value for <code>someType</code>, the emitted <code>export</code> will not try to export it (this would be a runtime error in JavaScript):</p>\n<pre><code class=\"language-js\">export { someFunction };\n</code></pre>\n<p>Single-file transpilers don’t know whether <code>someType</code> produces a value or not, so it’s an error to export a name that only refers to a type.</p>\n<h4 id=\"non-module-files\" style=\"position:relative;\"><a href=\"#non-module-files\" aria-label=\"non module files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Module Files</h4>\n<p>If <code>isolatedModules</code> is set, all implementation files must be <em>modules</em> (which means it has some form of <code>import</code>/<code>export</code>). An error occurs if any file isn’t a module:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 1208\n// @isolatedModules\nfunction fn() {}\n</code></pre>\n<p>This restriction doesn’t apply to <code>.d.ts</code> files.</p>\n<h4 id=\"references-to-const-enum-members\" style=\"position:relative;\"><a href=\"#references-to-const-enum-members\" aria-label=\"references to const enum members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References to <code>const enum</code> members</h4>\n<p>In TypeScript, when you reference a <code>const enum</code> member, the reference is replaced by its actual value in the emitted JavaScript. Changing this TypeScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n</code></pre>\n<p>To this JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @removeComments\ndeclare const enum Numbers {\n  Zero = 0,\n  One = 1,\n}\nconsole.log(Numbers.Zero + Numbers.One);\n</code></pre>\n<p>Without knowledge of the values of these members, other transpilers can’t replace the references to <code>Numbers</code>, which would be a runtime error if left alone (since there are no <code>Numbers</code> object at runtime).\nBecause of this, when <code>isolatedModules</code> is set, it is an error to reference an ambient <code>const enum</code> member.</p>","redirectHref":"/tsconfig#isolatedModules"}},"staticQueryHashes":[]}