{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/jsxImportSource.html","result":{"pageContext":{"title":"jsxImportSource","lang":"en","html":"<p>Declares the module specifier to be used for importing the <code>jsx</code> and <code>jsxs</code> factory functions when using <a href=\"#jsx\"><code>jsx</code></a> as <code>\"react-jsx\"</code> or <code>\"react-jsxdev\"</code> which were introduced in TypeScript 4.1.</p>\n<p>With <a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">React 17</a> the library supports a new form of JSX transformation via a separate import.</p>\n<p>For example with this code:</p>\n<pre><code class=\"language-tsx\">import React from \"react\";\n\nfunction App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Using this TSConfig:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\"\n  }\n}\n</code></pre>\n<p>The emitted JavaScript from TypeScript is:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @noErrors\n// @jsx: react-jsx\n// @module: commonjs\n// @target: esnext\ndeclare module JSX {\n  interface Element {}\n  interface IntrinsicElements {\n    [s: string]: any;\n  }\n}\nimport React from \"react\";\n\nfunction App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>For example if you wanted to use <code>\"jsxImportSource\": \"preact\"</code>, you need a tsconfig like:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\",\n    \"types\": [\"preact\"]\n  }\n}\n</code></pre>\n<p>Which generates code like:</p>\n<pre><code class=\"language-tsx\" data-meta=\"twoslash\">// @showEmit\n// @jsxImportSource: preact\n// @types: preact\n// @jsx: react-jsx\n// @target: esnext\n// @module: commonjs\n// @noErrors\n\nexport function App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Alternatively, you can use a per-file pragma to set this option, for example:</p>\n<pre><code class=\"language-tsx\">/** @jsxImportSource preact */\n\nexport function App() {\n  return &#x3C;h1>Hello World&#x3C;/h1>;\n}\n</code></pre>\n<p>Would add <code>preact/jsx-runtime</code> as an import for the <code>_jsx</code> factory.</p>\n<p><em>Note:</em> In order for this to work like you would expect, your <code>tsx</code> file must include an <code>export</code> or <code>import</code> so that it is considered a module.</p>","redirectHref":"/tsconfig#jsxImportSource"}},"staticQueryHashes":[]}