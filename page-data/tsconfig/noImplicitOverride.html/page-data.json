{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/noImplicitOverride.html","result":{"pageContext":{"title":"noImplicitOverride","lang":"en","html":"<p>When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.</p>\n<p>For example, imagine you are modeling a music album syncing system:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Album {\n  download() {\n    // Default behavior\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n</code></pre>\n<p>Then when you add support for machine-learning generated playlists, you refactor the <code>Album</code> class to have a ‘setup’ function instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Album {\n  setup() {\n    // Default behavior\n  }\n}\n\nclass MLAlbum extends Album {\n  setup() {\n    // Override to get info from algorithm\n  }\n}\n\nclass SharedAlbum extends Album {\n  download() {\n    // Override to get info from many sources\n  }\n}\n</code></pre>\n<p>In this case, TypeScript has provided no warning that <code>download</code> on <code>SharedAlbum</code> <em>expected</em> to override a function in the base class.</p>\n<p>Using <code>noImplicitOverride</code> you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword <code>override</code>.</p>\n<p>The following example has <code>noImplicitOverride</code> enabled, and you can see the error received when <code>override</code> is missing:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitOverride\n// @errors: 4114\nclass Album {\n  setup() {}\n}\n\nclass MLAlbum extends Album {\n  override setup() {}\n}\n\nclass SharedAlbum extends Album {\n  setup() {}\n}\n</code></pre>","redirectHref":"/tsconfig#noImplicitOverride"}},"staticQueryHashes":[]}