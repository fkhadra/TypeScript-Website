{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/checkJs.html","result":{"pageContext":{"title":"checkJs","lang":"en","html":"<p>Works in tandem with <code>allowJs</code>. When <code>checkJs</code> is enabled then errors are reported in JavaScript files. This is\nthe equivalent of including <code>// @ts-check</code> at the top of all JavaScript files which are included in your project.</p>\n<p>For example, this is incorrect JavaScript according to the <code>parseFloat</code> type definition which comes with TypeScript:</p>\n<pre><code class=\"language-js\">// parseFloat only takes a string\nmodule.exports.pi = parseFloat(3.124);\n</code></pre>\n<p>When imported into a TypeScript module:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @allowJs\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.124);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n</code></pre>\n<p>You will not get any errors. However, if you turn on <code>checkJs</code> then you will get error messages from the JavaScript file.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\n// @allowjs: true\n// @checkjs: true\n// @filename: constants.js\nmodule.exports.pi = parseFloat(3.124);\n\n// @filename: index.ts\nimport { pi } from \"./constants\";\nconsole.log(pi);\n</code></pre>","redirectHref":"/tsconfig#checkJs"}},"staticQueryHashes":[]}