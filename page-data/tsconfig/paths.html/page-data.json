{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/paths.html","result":{"pageContext":{"title":"paths","lang":"en","html":"<p>A series of entries which re-map imports to lookup locations relative to the <code>baseUrl</code>, there is a larger coverage of <code>paths</code> in <a href=\"/docs/handbook/module-resolution.html#path-mapping\">the handbook</a>.</p>\n<p><code>paths</code> lets you declare how TypeScript should resolve an import in your <code>require</code>/<code>import</code>s.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\", // this must be specified if \"paths\" is specified.\n    \"paths\": {\n      \"jquery\": [\"node_modules/jquery/dist/jquery\"] // this mapping is relative to \"baseUrl\"\n    }\n  }\n}\n</code></pre>\n<p>This would allow you to be able to write <code>import \"jquery\"</code>, and get all of the correct typing locally.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"paths\": {\n        \"app/*\": [\"app/*\"],\n        \"config/*\": [\"app/_config/*\"],\n        \"environment/*\": [\"environments/*\"],\n        \"shared/*\": [\"app/_shared/*\"],\n        \"helpers/*\": [\"helpers/*\"],\n        \"tests/*\": [\"tests/*\"]\n    },\n}\n</code></pre>\n<p>In this case, you can tell the TypeScript file resolver to support a number of custom prefixes to find code.\nThis pattern can be used to avoid long relative paths within your codebase.</p>","redirectHref":"/tsconfig#paths"}},"staticQueryHashes":[]}