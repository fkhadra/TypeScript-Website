{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/functions.html","result":{"data":{"markdownRemark":{"id":"e939760f-744a-56af-87bb-b9d07b618228","excerpt":"Functions are the fundamental building block of any application in JavaScript.\nThey’re how you build up layers of abstraction, mimicking classes, information…","html":"<p>Functions are the fundamental building block of any application in JavaScript.\nThey’re how you build up layers of abstraction, mimicking classes, information hiding, and modules.\nIn TypeScript, while there are classes, namespaces, and modules, functions still play the key role in describing how to <em>do</em> things.\nTypeScript also adds some new capabilities to the standard JavaScript functions to make them easier to work with.</p>\n<h2 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h2>\n<p>To begin, just as in JavaScript, TypeScript functions can be created both as a named function or as an anonymous function.\nThis allows you to choose the most appropriate approach for your application, whether you’re building a list of functions in an API or a one-off function to hand off to another function.</p>\n<p>To quickly recap what these two approaches look like in JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\n// Named function\nfunction add(x, y) {\n  return x + y;\n}\n\n// Anonymous function\nlet myAdd = function (x, y) {\n  return x + y;\n};\n</code></pre>\n<p>Just as in JavaScript, functions can refer to variables outside of the function body.\nWhen they do so, they’re said to <em>capture</em> these variables.\nWhile understanding how this works (and the trade-offs when using this technique) is outside of the scope of this article, having a firm understanding how this mechanic works is an important piece of working with JavaScript and TypeScript.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nlet z = 100;\n\nfunction addToZ(x, y) {\n  return x + y + z;\n}\n</code></pre>\n<h2 id=\"function-types\" style=\"position:relative;\"><a href=\"#function-types\" aria-label=\"function types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Types</h2>\n<h2 id=\"typing-the-function\" style=\"position:relative;\"><a href=\"#typing-the-function\" aria-label=\"typing the function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typing the function</h2>\n<p>Let’s add types to our simple examples from earlier:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function add(x: number, y: number): number {\n  return x + y;\n}\n\nlet myAdd = function (x: number, y: number): number {\n  return x + y;\n};\n</code></pre>\n<p>We can add types to each of the parameters and then to the function itself to add a return type.\nTypeScript can figure the return type out by looking at the return statements, so we can also optionally leave this off in many cases.</p>\n<h2 id=\"writing-the-function-type\" style=\"position:relative;\"><a href=\"#writing-the-function-type\" aria-label=\"writing the function type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing the function type</h2>\n<p>Now that we’ve typed the function, let’s write the full type of the function out by looking at each piece of the function type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let myAdd: (x: number, y: number) => number = function (\n  x: number,\n  y: number\n): number {\n  return x + y;\n};\n</code></pre>\n<p>A function’s type has the same two parts: the type of the arguments and the return type.\nWhen writing out the whole function type, both parts are required.\nWe write out the parameter types just like a parameter list, giving each parameter a name and a type.\nThis name is just to help with readability.\nWe could have instead written:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let myAdd: (baseValue: number, increment: number) => number = function (\n  x: number,\n  y: number\n): number {\n  return x + y;\n};\n</code></pre>\n<p>As long as the parameter types line up, it’s considered a valid type for the function, regardless of the names you give the parameters in the function type.</p>\n<p>The second part is the return type.\nWe make it clear which is the return type by using an arrow (<code>=></code>) between the parameters and the return type.\nAs mentioned before, this is a required part of the function type, so if the function doesn’t return a value, you would use <code>void</code> instead of leaving it off.</p>\n<p>Of note, only the parameters and the return type make up the function type.\nCaptured variables are not reflected in the type.\nIn effect, captured variables are part of the “hidden state” of any function and do not make up its API.</p>\n<h2 id=\"inferring-the-types\" style=\"position:relative;\"><a href=\"#inferring-the-types\" aria-label=\"inferring the types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inferring the types</h2>\n<p>In playing with the example, you may notice that the TypeScript compiler can figure out the type even if you only have types on one side of the equation:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// The parameters 'x' and 'y' have the type number\nlet myAdd = function (x: number, y: number): number {\n  return x + y;\n};\n\n// myAdd has the full function type\nlet myAdd2: (baseValue: number, increment: number) => number = function (x, y) {\n  return x + y;\n};\n</code></pre>\n<p>This is called “contextual typing”, a form of type inference.\nThis helps cut down on the amount of effort to keep your program typed.</p>\n<h2 id=\"optional-and-default-parameters\" style=\"position:relative;\"><a href=\"#optional-and-default-parameters\" aria-label=\"optional and default parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional and Default Parameters</h2>\n<p>In TypeScript, every parameter is assumed to be required by the function.\nThis doesn’t mean that it can’t be given <code>null</code> or <code>undefined</code>, but rather, when the function is called, the compiler will check that the user has provided a value for each parameter.\nThe compiler also assumes that these parameters are the only parameters that will be passed to the function.\nIn short, the number of arguments given to a function has to match the number of parameters the function expects.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2554\nfunction buildName(firstName: string, lastName: string) {\n  return firstName + \" \" + lastName;\n}\n\nlet result1 = buildName(\"Bob\"); // error, too few parameters\nlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\"); // error, too many parameters\nlet result3 = buildName(\"Bob\", \"Adams\"); // ah, just right\n</code></pre>\n<p>In JavaScript, every parameter is optional, and users may leave them off as they see fit.\nWhen they do, their value is <code>undefined</code>.\nWe can get this functionality in TypeScript by adding a <code>?</code> to the end of parameters we want to be optional.\nFor example, let’s say we want the last name parameter from above to be optional:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2554\nfunction buildName(firstName: string, lastName?: string) {\n  if (lastName) return firstName + \" \" + lastName;\n  else return firstName;\n}\n\nlet result1 = buildName(\"Bob\"); // works correctly now\nlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\"); // error, too many parameters\nlet result3 = buildName(\"Bob\", \"Adams\"); // ah, just right\n</code></pre>\n<p>Any optional parameters must follow required parameters.\nHad we wanted to make the first name optional, rather than the last name, we would need to change the order of parameters in the function, putting the first name last in the list.</p>\n<p>In TypeScript, we can also set a value that a parameter will be assigned if the user does not provide one, or if the user passes <code>undefined</code> in its place.\nThese are called default-initialized parameters.\nLet’s take the previous example and default the last name to <code>\"Smith\"</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2554\nfunction buildName(firstName: string, lastName = \"Smith\") {\n  return firstName + \" \" + lastName;\n}\n\nlet result1 = buildName(\"Bob\"); // works correctly now, returns \"Bob Smith\"\nlet result2 = buildName(\"Bob\", undefined); // still works, also returns \"Bob Smith\"\nlet result3 = buildName(\"Bob\", \"Adams\", \"Sr.\"); // error, too many parameters\nlet result4 = buildName(\"Bob\", \"Adams\"); // ah, just right\n</code></pre>\n<p>Default-initialized parameters that come after all required parameters are treated as optional, and just like optional parameters, can be omitted when calling their respective function.\nThis means optional parameters and trailing default parameters will share commonality in their types, so both</p>\n<pre><code class=\"language-ts\">function buildName(firstName: string, lastName?: string) {\n  // ...\n}\n</code></pre>\n<p>and</p>\n<pre><code class=\"language-ts\">function buildName(firstName: string, lastName = \"Smith\") {\n  // ...\n}\n</code></pre>\n<p>share the same type <code>(firstName: string, lastName?: string) => string</code>.\nThe default value of <code>lastName</code> disappears in the type, only leaving behind the fact that the parameter is optional.</p>\n<p>Unlike plain optional parameters, default-initialized parameters don’t <em>need</em> to occur after required parameters.\nIf a default-initialized parameter comes before a required parameter, users need to explicitly pass <code>undefined</code> to get the default initialized value.\nFor example, we could write our last example with only a default initializer on <code>firstName</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2554\nfunction buildName(firstName = \"Will\", lastName: string) {\n  return firstName + \" \" + lastName;\n}\n\nlet result1 = buildName(\"Bob\"); // error, too few parameters\nlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\"); // error, too many parameters\nlet result3 = buildName(\"Bob\", \"Adams\"); // okay and returns \"Bob Adams\"\nlet result4 = buildName(undefined, \"Adams\"); // okay and returns \"Will Adams\"\n</code></pre>\n<h2 id=\"rest-parameters\" style=\"position:relative;\"><a href=\"#rest-parameters\" aria-label=\"rest parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest Parameters</h2>\n<p>Required, optional, and default parameters all have one thing in common: they talk about one parameter at a time.\nSometimes, you want to work with multiple parameters as a group, or you may not know how many parameters a function will ultimately take.\nIn JavaScript, you can work with the arguments directly using the <code>arguments</code> variable that is visible inside every function body.</p>\n<p>In TypeScript, you can gather these arguments together into a variable:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\n\n// employeeName will be \"Joseph Samuel Lucas MacKinzie\"\nlet employeeName = buildName(\"Joseph\", \"Samuel\", \"Lucas\", \"MacKinzie\");\n</code></pre>\n<p><em>Rest parameters</em> are treated as a boundless number of optional parameters.\nWhen passing arguments for a rest parameter, you can use as many as you want; you can even pass none.\nThe compiler will build an array of the arguments passed in with the name given after the ellipsis (<code>...</code>), allowing you to use it in your function.</p>\n<p>The ellipsis is also used in the type of the function with rest parameters:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\n\nlet buildNameFun: (fname: string, ...rest: string[]) => string = buildName;\n</code></pre>\n<h2 id=\"this\" style=\"position:relative;\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code></h2>\n<p>Learning how to use <code>this</code> in JavaScript is something of a rite of passage.\nSince TypeScript is a superset of JavaScript, TypeScript developers also need to learn how to use <code>this</code> and how to spot when it’s not being used correctly.\nFortunately, TypeScript lets you catch incorrect uses of <code>this</code> with a couple of techniques.\nIf you need to learn how <code>this</code> works in JavaScript, though, first read Yehuda Katz’s <a href=\"http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/\">Understanding JavaScript Function Invocation and “this”</a>.\nYehuda’s article explains the inner workings of <code>this</code> very well, so we’ll just cover the basics here.</p>\n<h2 id=\"this-and-arrow-functions\" style=\"position:relative;\"><a href=\"#this-and-arrow-functions\" aria-label=\"this and arrow functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> and arrow functions</h2>\n<p>In JavaScript, <code>this</code> is a variable that’s set when a function is called.\nThis makes it a very powerful and flexible feature, but it comes at the cost of always having to know about the context that a function is executing in.\nThis is notoriously confusing, especially when returning a function or passing a function as an argument.</p>\n<p>Let’s look at an example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nlet deck = {\n  suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n  cards: Array(52),\n  createCardPicker: function () {\n    return function () {\n      let pickedCard = Math.floor(Math.random() * 52);\n      let pickedSuit = Math.floor(pickedCard / 13);\n\n      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\n    };\n  },\n};\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n</code></pre>\n<p>Notice that <code>createCardPicker</code> is a function that itself returns a function.\nIf we tried to run the example, we would get an error instead of the expected alert box.\nThis is because the <code>this</code> being used in the function created by <code>createCardPicker</code> will be set to <code>window</code> instead of our <code>deck</code> object.\nThat’s because we call <code>cardPicker()</code> on its own.\nA top-level non-method syntax call like this will use <code>window</code> for <code>this</code>.\n(Note: under strict mode, <code>this</code> will be <code>undefined</code> rather than <code>window</code>).</p>\n<p>We can fix this by making sure the function is bound to the correct <code>this</code> before we return the function to be used later.\nThis way, regardless of how it’s later used, it will still be able to see the original <code>deck</code> object.\nTo do this, we change the function expression to use the ECMAScript 6 arrow syntax.\nArrow functions capture the <code>this</code> where the function is created rather than where it is invoked:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nlet deck = {\n  suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n  cards: Array(52),\n  createCardPicker: function () {\n    // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here\n    return () => {\n      let pickedCard = Math.floor(Math.random() * 52);\n      let pickedSuit = Math.floor(pickedCard / 13);\n\n      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\n    };\n  },\n};\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n</code></pre>\n<p>Even better, TypeScript will warn you when you make this mistake if you pass the <code>--noImplicitThis</code> flag to the compiler.\nIt will point out that <code>this</code> in <code>this.suits[pickedSuit]</code> is of type <code>any</code>.</p>\n<h2 id=\"this-parameters\" style=\"position:relative;\"><a href=\"#this-parameters\" aria-label=\"this parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> parameters</h2>\n<p>Unfortunately, the type of <code>this.suits[pickedSuit]</code> is still <code>any</code>.\nThat’s because <code>this</code> comes from the function expression inside the object literal.\nTo fix this, you can provide an explicit <code>this</code> parameter.\n<code>this</code> parameters are fake parameters that come first in the parameter list of a function:</p>\n<pre><code class=\"language-ts\">function f(this: void) {\n  // make sure `this` is unusable in this standalone function\n}\n</code></pre>\n<p>Let’s add a couple of interfaces to our example above, <code>Card</code> and <code>Deck</code>, to make the types clearer and easier to reuse:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Card {\n  suit: string;\n  card: number;\n}\n\ninterface Deck {\n  suits: string[];\n  cards: number[];\n  createCardPicker(this: Deck): () => Card;\n}\n\nlet deck: Deck = {\n  suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n  cards: Array(52),\n  // NOTE: The function now explicitly specifies that its callee must be of type Deck\n  createCardPicker: function (this: Deck) {\n    return () => {\n      let pickedCard = Math.floor(Math.random() * 52);\n      let pickedSuit = Math.floor(pickedCard / 13);\n\n      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\n    };\n  },\n};\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n</code></pre>\n<p>Now TypeScript knows that <code>createCardPicker</code> expects to be called on a <code>Deck</code> object.\nThat means that <code>this</code> is of type <code>Deck</code> now, not <code>any</code>, so <code>--noImplicitThis</code> will not cause any errors.</p>\n<h3 id=\"this-parameters-in-callbacks\" style=\"position:relative;\"><a href=\"#this-parameters-in-callbacks\" aria-label=\"this parameters in callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> parameters in callbacks</h3>\n<p>You can also run into errors with <code>this</code> in callbacks, when you pass functions to a library that will later call them.\nBecause the library that calls your callback will call it like a normal function, <code>this</code> will be <code>undefined</code>.\nWith some work you can use <code>this</code> parameters to prevent errors with callbacks too.\nFirst, the library author needs to annotate the callback type with <code>this</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface UIElement {\n  addClickListener(onclick: (this: void, e: Event) => void): void;\n}\n</code></pre>\n<p><code>this: void</code> means that <code>addClickListener</code> expects <code>onclick</code> to be a function that does not require a <code>this</code> type.\nSecond, annotate your calling code with <code>this</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\n// @errors: 2345\ninterface UIElement {\n  addClickListener(onclick: (this: void, e: Event) => void): void;\n}\ninterface Event {\n  message: string;\n}\ndeclare const uiElement: UIElement;\n// ---cut---\nclass Handler {\n  info: string;\n  onClickBad(this: Handler, e: Event) {\n    // oops, used `this` here. using this callback would crash at runtime\n    this.info = e.message;\n  }\n}\n\nlet h = new Handler();\nuiElement.addClickListener(h.onClickBad); // error!\n</code></pre>\n<p>With <code>this</code> annotated, you make it explicit that <code>onClickBad</code> must be called on an instance of <code>Handler</code>.\nThen TypeScript will detect that <code>addClickListener</code> requires a function that has <code>this: void</code>.\nTo fix the error, change the type of <code>this</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\ninterface UIElement {\n  addClickListener(onclick: (this: void, e: Event) => void): void;\n}\ninterface Event {\n  message: string;\n}\ndeclare const uiElement: UIElement;\n// ---cut---\nclass Handler {\n  info: string;\n  onClickGood(this: void, e: Event) {\n    // can't use `this` here because it's of type void!\n    console.log(\"clicked!\");\n  }\n}\n\nlet h = new Handler();\nuiElement.addClickListener(h.onClickGood);\n</code></pre>\n<p>Because <code>onClickGood</code> specifies its <code>this</code> type as <code>void</code>, it is legal to pass to <code>addClickListener</code>.\nOf course, this also means that it can’t use <code>this.info</code>.\nIf you want both then you’ll have to use an arrow function:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\ninterface UIElement {\n  addClickListener(onclick: (this: void, e: Event) => void): void;\n}\ninterface Event {\n  message: string;\n}\ndeclare const uiElement: UIElement;\n// ---cut---\nclass Handler {\n  info: string;\n  onClickGood = (e: Event) => {\n    this.info = e.message;\n  };\n}\n</code></pre>\n<p>This works because arrow functions use the outer <code>this</code>, so you can always pass them to something that expects <code>this: void</code>.\nThe downside is that one arrow function is created per object of type Handler.\nMethods, on the other hand, are only created once and attached to Handler’s prototype.\nThey are shared between all objects of type Handler.</p>\n<h2 id=\"overloads\" style=\"position:relative;\"><a href=\"#overloads\" aria-label=\"overloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overloads</h2>\n<p>JavaScript is inherently a very dynamic language.\nIt’s not uncommon for a single JavaScript function to return different types of objects based on the shape of the arguments passed in.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nlet suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];\n\nfunction pickCard(x: any): any {\n  // Check to see if we're working with an object/array\n  // if so, they gave us the deck and we'll pick the card\n  if (typeof x == \"object\") {\n    let pickedCard = Math.floor(Math.random() * x.length);\n    return pickedCard;\n  }\n  // Otherwise just let them pick the card\n  else if (typeof x == \"number\") {\n    let pickedSuit = Math.floor(x / 13);\n    return { suit: suits[pickedSuit], card: x % 13 };\n  }\n}\n\nlet myDeck = [\n  { suit: \"diamonds\", card: 2 },\n  { suit: \"spades\", card: 10 },\n  { suit: \"hearts\", card: 4 },\n];\n\nlet pickedCard1 = myDeck[pickCard(myDeck)];\nalert(\"card: \" + pickedCard1.card + \" of \" + pickedCard1.suit);\n\nlet pickedCard2 = pickCard(15);\nalert(\"card: \" + pickedCard2.card + \" of \" + pickedCard2.suit);\n</code></pre>\n<p>Here, the <code>pickCard</code> function will return two different things based on what the user has passed in.\nIf the users passes in an object that represents the deck, the function will pick the card.\nIf the user picks the card, we tell them which card they’ve picked.\nBut how do we describe this to the type system?</p>\n<p>The answer is to supply multiple function types for the same function as a list of overloads.\nThis list is what the compiler will use to resolve function calls.\nLet’s create a list of overloads that describe what our <code>pickCard</code> accepts and what it returns.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];\n\nfunction pickCard(x: { suit: string; card: number }[]): number;\nfunction pickCard(x: number): { suit: string; card: number };\nfunction pickCard(x: any): any {\n  // Check to see if we're working with an object/array\n  // if so, they gave us the deck and we'll pick the card\n  if (typeof x == \"object\") {\n    let pickedCard = Math.floor(Math.random() * x.length);\n    return pickedCard;\n  }\n  // Otherwise just let them pick the card\n  else if (typeof x == \"number\") {\n    let pickedSuit = Math.floor(x / 13);\n    return { suit: suits[pickedSuit], card: x % 13 };\n  }\n}\n\nlet myDeck = [\n  { suit: \"diamonds\", card: 2 },\n  { suit: \"spades\", card: 10 },\n  { suit: \"hearts\", card: 4 },\n];\n\nlet pickedCard1 = myDeck[pickCard(myDeck)];\nalert(\"card: \" + pickedCard1.card + \" of \" + pickedCard1.suit);\n\nlet pickedCard2 = pickCard(15);\nalert(\"card: \" + pickedCard2.card + \" of \" + pickedCard2.suit);\n</code></pre>\n<p>With this change, the overloads now give us type checked calls to the <code>pickCard</code> function.</p>\n<p>In order for the compiler to pick the correct type check, it follows a similar process to the underlying JavaScript.\nIt looks at the overload list and, proceeding with the first overload, attempts to call the function with the provided parameters.\nIf it finds a match, it picks this overload as the correct overload.\nFor this reason, it’s customary to order overloads from most specific to least specific.</p>\n<p>Note that the <code>function pickCard(x): any</code> piece is not part of the overload list, so it only has two overloads: one that takes an object and one that takes a number.\nCalling <code>pickCard</code> with any other parameter types would cause an error.</p>","headings":[{"value":"Functions","depth":2},{"value":"Function Types","depth":2},{"value":"Typing the function","depth":2},{"value":"Writing the function type","depth":2},{"value":"Inferring the types","depth":2},{"value":"Optional and Default Parameters","depth":2},{"value":"Rest Parameters","depth":2},{"value":"this","depth":2},{"value":"this and arrow functions","depth":2},{"value":"this parameters","depth":2},{"value":"this parameters in callbacks","depth":3},{"value":"Overloads","depth":2}],"frontmatter":{"permalink":"/docs/handbook/functions.html","title":"Functions","disable_toc":null,"handbook":"true","oneline":"How to add types to a function","preamble":null,"deprecated_by":"/docs/handbook/2/functions.html","deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"slug":"/docs/handbook/functions.html","repoPath":"/packages/documentation/copy/en/handbook-v1/Functions.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}