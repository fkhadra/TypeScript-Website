{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/narrowing.html","result":{"data":{"markdownRemark":{"id":"2aad2e13-b012-52e3-952a-b7a6d8567b65","excerpt":"Imagine we have a function called padLeft. If padding is a number, it will treat that as the number of spaces we want to prepend to input.\nIf padding is a…","html":"<p>Imagine we have a function called <code>padLeft</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function padLeft(padding: number | string, input: string): string {\n  throw new Error(\"Not implemented yet!\");\n}\n</code></pre>\n<p>If <code>padding</code> is a <code>number</code>, it will treat that as the number of spaces we want to prepend to <code>input</code>.\nIf <code>padding</code> is a <code>string</code>, it should just prepend <code>padding</code> to <code>input</code>.\nLet’s try to implement the logic for when <code>padLeft</code> is passed a <code>number</code> for <code>padding</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2365\nfunction padLeft(padding: number | string, input: string) {\n  return new Array(padding + 1).join(\" \") + input;\n}\n</code></pre>\n<p>Uh-oh, we’re getting an error on <code>padding + 1</code>.\nTypeScript is warning us that adding a <code>number</code> to a <code>number | string</code> might not give us what we want, and it’s right.\nIn other words, we haven’t explicitly checked if <code>padding</code> is a <code>number</code> first, nor are we handling the case where it’s a <code>string</code>, so let’s do exactly that.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function padLeft(padding: number | string, input: string) {\n  if (typeof padding === \"number\") {\n    return new Array(padding + 1).join(\" \") + input;\n  }\n  return padding + input;\n}\n</code></pre>\n<p>If this mostly looks like uninteresting JavaScript code, that’s sort of the point.\nApart from the annotations we put in place, this TypeScript code looks like JavaScript.\nThe idea is that TypeScript’s type system aims to make it as easy as possible to write typical JavaScript code without bending over backwards to get type safety.</p>\n<p>While it might not look like much, there’s actually a lot going under the covers here.\nMuch like how TypeScript analyzes runtime values using static types, it overlays type analysis on JavaScript’s runtime control flow constructs like <code>if/else</code>, conditional ternaries, loops, truthiness checks, etc., which can all affect those types.</p>\n<p>Within our <code>if</code> check, TypeScript sees <code>typeof padding === \"number\"</code> and understands that as a special form of code called a <em>type guard</em>.\nTypeScript follows possible paths of execution that our programs can take to analyze the most specific possible type of a value at a given position.\nIt looks at these special checks (called <em>type guards</em>) and assignments, and the process of refining types to more specific types than declared is called <em>narrowing</em>.\nIn many editors we can observe these types as they change, and we’ll even do so in our examples.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function padLeft(padding: number | string, input: string) {\n  if (typeof padding === \"number\") {\n    return new Array(padding + 1).join(\" \") + input;\n    //               ^?\n  }\n  return padding + input;\n  //     ^?\n}\n</code></pre>\n<p>There are a couple of different constructs TypeScript understands for narrowing.</p>\n<h2 id=\"typeof-type-guards\" style=\"position:relative;\"><a href=\"#typeof-type-guards\" aria-label=\"typeof type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>typeof</code> type guards</h2>\n<p>As we’ve seen, JavaScript supports a <code>typeof</code> operator which can give very basic information about the type of values we have at runtime.\nTypeScript expects this to return a certain set of strings:</p>\n<ul>\n<li><code>\"string\"</code></li>\n<li><code>\"number\"</code></li>\n<li><code>\"bigint\"</code></li>\n<li><code>\"boolean\"</code></li>\n<li><code>\"symbol\"</code></li>\n<li><code>\"undefined\"</code></li>\n<li><code>\"object\"</code></li>\n<li><code>\"function\"</code></li>\n</ul>\n<p>Like we saw with <code>padLeft</code>, this operator comes up pretty often in a number of JavaScript libraries, and TypeScript can understand it to narrow types in different branches.</p>\n<p>In TypeScript, checking against the value returned by <code>typeof</code> is a type guard.\nBecause TypeScript encodes how <code>typeof</code> operates on different values, it knows about some of its quirks in JavaScript.\nFor example, notice that in the list above, <code>typeof</code> doesn’t return the string <code>null</code>.\nCheck out the following example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2531\nfunction printAll(strs: string | string[] | null) {\n  if (typeof strs === \"object\") {\n    for (const s of strs) {\n      console.log(s);\n    }\n  } else if (typeof strs === \"string\") {\n    console.log(strs);\n  } else {\n    // do nothing\n  }\n}\n</code></pre>\n<p>In the <code>printAll</code> function, we try to check if <code>strs</code> is an object to see if it’s an array type (now might be a good time to reinforce that arrays are object types in JavaScript).\nBut it turns out that in JavaScript, <code>typeof null</code> is actually <code>\"object\"</code>!\nThis is one of those unfortunate accidents of history.</p>\n<p>Users with enough experience might not be surprised, but not everyone has run into this in JavaScript; luckily, TypeScript lets us know that <code>strs</code> was only narrowed down to <code>string[] | null</code> instead of just <code>string[]</code>.</p>\n<p>This might be a good segue into what we’ll call “truthiness” checking.</p>\n<h1 id=\"truthiness-narrowing\" style=\"position:relative;\"><a href=\"#truthiness-narrowing\" aria-label=\"truthiness narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Truthiness narrowing</h1>\n<p>Truthiness might not be a word you’ll find in the dictionary, but it’s very much something you’ll hear about in JavaScript.</p>\n<p>In JavaScript, we can use any expression in conditionals, <code>&#x26;&#x26;</code>s, <code>||</code>s, <code>if</code> statements, and Boolean negations (<code>!</code>), and more.\nAs an example, <code>if</code> statements don’t expect their condition to always have the type <code>boolean</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function getUsersOnlineMessage(numUsersOnline: number) {\n  if (numUsersOnline) {\n    return `There are ${numUsersOnline} online now!`;\n  }\n  return \"Nobody's here. :(\";\n}\n</code></pre>\n<p>In JavaScript, constructs like <code>if</code> first “coerce” their conditions to <code>boolean</code>s to make sense of them, and then choose their branches depending on whether the result is <code>true</code> or <code>false</code>.\nValues like</p>\n<ul>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>\"\"</code> (the empty string)</li>\n<li><code>0n</code> (the <code>bigint</code> version of zero)</li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n</ul>\n<p>all coerce to <code>false</code>, and other values get coerced <code>true</code>.\nYou can always coerce values to <code>boolean</code>s by running them through the <code>Boolean</code> function, or by using the shorter double-Boolean negation. (The latter has the advantage that TypeScript infers a narrow literal boolean type <code>true</code>, while inferring the first as type <code>boolean</code>.)</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// both of these result in 'true'\nBoolean(\"hello\"); // type: boolean, value: true\n!!\"world\";        // type: true,    value: true\n</code></pre>\n<p>It’s fairly popular to leverage this behavior, especially for guarding against values like <code>null</code> or <code>undefined</code>.\nAs an example, let’s try using it for our <code>printAll</code> function.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function printAll(strs: string | string[] | null) {\n  if (strs &#x26;&#x26; typeof strs === \"object\") {\n    for (const s of strs) {\n      console.log(s);\n    }\n  } else if (typeof strs === \"string\") {\n    console.log(strs);\n  }\n}\n</code></pre>\n<p>You’ll notice that we’ve gotten rid of the error above by checking if <code>strs</code> is truthy.\nThis at least prevents us from dreaded errors when we run our code like:</p>\n<pre><code class=\"language-txt\">TypeError: null is not iterable\n</code></pre>\n<p>Keep in mind though that truthiness checking on primitives can often be error prone.\nAs an example, consider a different attempt at writing <code>printAll</code></p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash {class: &#x22;do-not-do-this&#x22;}\">function printAll(strs: string | string[] | null) {\n  // !!!!!!!!!!!!!!!!\n  //  DON'T DO THIS!\n  //   KEEP READING\n  // !!!!!!!!!!!!!!!!\n  if (strs) {\n    if (typeof strs === \"object\") {\n      for (const s of strs) {\n        console.log(s);\n      }\n    } else if (typeof strs === \"string\") {\n      console.log(strs);\n    }\n  }\n}\n</code></pre>\n<p>We wrapped the entire body of the function in a truthy check, but this has a subtle downside: we may no longer be handling the empty string case correctly.</p>\n<p>TypeScript doesn’t hurt us here at all, but this is behavior worth noting if you’re less familiar with JavaScript.\nTypeScript can often help you catch bugs early on, but if you choose to do <em>nothing</em> with a value, there’s only so much that it can do without being overly prescriptive.\nIf you want, you can make sure you handle situations like these with a linter.</p>\n<p>One last word on narrowing by truthiness is that Boolean negations with <code>!</code> filter out from negated branches.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function multiplyAll(\n  values: number[] | undefined,\n  factor: number\n): number[] | undefined {\n  if (!values) {\n    return values;\n  } else {\n    return values.map((x) => x * factor);\n  }\n}\n</code></pre>\n<h2 id=\"equality-narrowing\" style=\"position:relative;\"><a href=\"#equality-narrowing\" aria-label=\"equality narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Equality narrowing</h2>\n<p>TypeScript also uses <code>switch</code> statements and equality checks like <code>===</code>, <code>!==</code>, <code>==</code>, and <code>!=</code> to narrow types.\nFor example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function example(x: string | number, y: string | boolean) {\n  if (x === y) {\n    // We can now call any 'string' method on 'x' or 'y'.\n    x.toUpperCase();\n    // ^?\n    y.toLowerCase();\n    // ^?\n  } else {\n    console.log(x);\n    //          ^?\n    console.log(y);\n    //          ^?\n  }\n}\n</code></pre>\n<p>When we checked that <code>x</code> and <code>y</code> are both equal in the above example, TypeScript knew their types also had to be equal.\nSince <code>string</code> is the only common type that both <code>x</code> and <code>y</code> could take on, TypeScript knows that <code>x</code> and <code>y</code> must be a <code>string</code> in the first branch.</p>\n<p>Checking against specific literal values (as opposed to variables) works also.\nIn our section about truthiness narrowing, we wrote a <code>printAll</code> function which was error-prone because it accidentally didn’t handle empty strings properly.\nInstead we could have done a specific check to block out <code>null</code>s, and TypeScript still correctly removes <code>null</code> from the type of <code>strs</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function printAll(strs: string | string[] | null) {\n  if (strs !== null) {\n    if (typeof strs === \"object\") {\n      for (const s of strs) {\n        //            ^?\n        console.log(s);\n      }\n    } else if (typeof strs === \"string\") {\n      console.log(strs);\n      //          ^?\n    }\n  }\n}\n</code></pre>\n<p>JavaScript’s looser equality checks with <code>==</code> and <code>!=</code> also get narrowed correctly.\nIf you’re unfamiliar, checking whether something <code>== null</code> actually not only checks whether it is specifically the value <code>null</code> - it also checks whether it’s potentially <code>undefined</code>.\nThe same applies to <code>== undefined</code>: it checks whether a value is either <code>null</code> or <code>undefined</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Container {\n  value: number | null | undefined;\n}\n\nfunction multiplyValue(container: Container, factor: number) {\n  // Remove both 'null' and 'undefined' from the type.\n  if (container.value != null) {\n    console.log(container.value);\n    //                    ^?\n\n    // Now we can safely multiply 'container.value'.\n    container.value *= factor;\n  }\n}\n</code></pre>\n<h3 id=\"the-in-operator-narrowing\" style=\"position:relative;\"><a href=\"#the-in-operator-narrowing\" aria-label=\"the in operator narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>in</code> operator narrowing</h3>\n<p>Javascript has an operator for determining if an object has a property with a name: the <code>in</code> operator.\nTypeScript takes this into account as a way to narrow down potential types.</p>\n<p>For example, with the code: <code>\"value\" in x</code>.  where <code>\"value\"</code> is a string literal and <code>x</code> is a union type.\nThe “true” branch narrows <code>x</code>’s types which have either an optional or required property <code>value</code>, and the “false” branch narrows to types which have an optional or missing property <code>value</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n\nfunction move(animal: Fish | Bird) {\n  if (\"swim\" in animal) {\n    return animal.swim();\n  }\n\n  return animal.fly();\n}\n</code></pre>\n<p>To re-iterate optional properties will exist in both sides for narrowing, for example a human could both swim and fly (with the right equipment) and thus should show up in both sides of the <code>in</code> check:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ntype Human = {  swim?: () => void, fly?: () => void };\n\nfunction move(animal: Fish | Bird | Human) {\n  if (\"swim\" in animal) { \n    animal\n//  ^?\n  } else {\n    animal\n//  ^?\n  }\n}\n</code></pre>\n<h2 id=\"instanceof-narrowing\" style=\"position:relative;\"><a href=\"#instanceof-narrowing\" aria-label=\"instanceof narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>instanceof</code> narrowing</h2>\n<p>JavaScript has an operator for checking whether or not a value is an “instance” of another value.\nMore specifically, in JavaScript <code>x instanceof Foo</code> checks whether the <em>prototype chain</em> of <code>x</code> contains <code>Foo.prototype</code>.\nWhile we won’t dive deep here, and you’ll see more of this when we get into classes, they can still be useful for most values that can be constructed with <code>new</code>.\nAs you might have guessed, <code>instanceof</code> is also a type guard, and TypeScript narrows in branches guarded by <code>instanceof</code>s.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function logValue(x: Date | string) {\n  if (x instanceof Date) {\n    console.log(x.toUTCString());\n    //          ^?\n  } else {\n    console.log(x.toUpperCase());\n    //          ^?\n  }\n}\n</code></pre>\n<h2 id=\"assignments\" style=\"position:relative;\"><a href=\"#assignments\" aria-label=\"assignments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assignments</h2>\n<p>As we mentioned earlier, when we assign to any variable, TypeScript looks at the right side of the assignment and narrows the left side appropriately.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let x = Math.random() &#x3C; 0.5 ? 10 : \"hello world!\";\n//  ^?\nx = 1;\n\nconsole.log(x);\n//          ^?\nx = \"goodbye!\";\n\nconsole.log(x);\n//          ^?\n</code></pre>\n<p>Notice that each of these assignments is valid.\nEven though the observed type of <code>x</code> changed to <code>number</code> after our first assignment, we were still able to assign a <code>string</code> to <code>x</code>.\nThis is because the <em>declared type</em> of <code>x</code> - the type that <code>x</code> started with - is <code>string | number</code>, and assignability is always checked against the declared type.</p>\n<p>If we’d assigned a <code>boolean</code> to <code>x</code>, we’d have seen an error since that wasn’t part of the declared type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nlet x = Math.random() &#x3C; 0.5 ? 10 : \"hello world!\";\n//  ^?\nx = 1;\n\nconsole.log(x);\n//          ^?\nx = true;\n\nconsole.log(x);\n//          ^?\n</code></pre>\n<h2 id=\"control-flow-analysis\" style=\"position:relative;\"><a href=\"#control-flow-analysis\" aria-label=\"control flow analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control flow analysis</h2>\n<p>Up until this point, we’ve gone through some basic examples of how TypeScript narrows within specific branches.\nBut there’s a bit more going on than just walking up from every variable and looking for type guards in <code>if</code>s, <code>while</code>s, conditionals, etc.\nFor example</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function padLeft(padding: number | string, input: string) {\n  if (typeof padding === \"number\") {\n    return new Array(padding + 1).join(\" \") + input;\n  }\n  return padding + input;\n}\n</code></pre>\n<p><code>padLeft</code> returns from within its first <code>if</code> block.\nTypeScript was able to analyze this code and see that the rest of the body (<code>return padding + input;</code>) is <em>unreachable</em> in the case where <code>padding</code> is a <code>number</code>.\nAs a result, it was able to remove <code>number</code> from the type of <code>padding</code> (narrowing from <code>string | number</code> to <code>string</code>) for the rest of the function.</p>\n<p>This analysis of code based on reachability is called <em>control flow analysis</em>, and TypeScript uses this flow analysis to narrow types as it encounters type guards and assignments.\nWhen a variable is analyzed, control flow can split off and re-merge over and over again, and that variable can be observed to have a different type at each point.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function example() {\n  let x: string | number | boolean;\n\n  x = Math.random() &#x3C; 0.5;\n\n  console.log(x);\n  //          ^?\n\n  if (Math.random() &#x3C; 0.5) {\n    x = \"hello\";\n    console.log(x);\n    //          ^?\n  } else {\n    x = 100;\n    console.log(x);\n    //          ^?\n  }\n\n  return x;\n  //     ^?\n}\n</code></pre>\n<h2 id=\"using-type-predicates\" style=\"position:relative;\"><a href=\"#using-type-predicates\" aria-label=\"using type predicates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using type predicates</h2>\n<p>We’ve worked with existing JavaScript constructs to handle narrowing so far, however sometimes you want more direct control over how types change throughout your code.</p>\n<p>To define a user-defined type guard, we simply need to define a function whose return type is a <em>type predicate</em>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ndeclare function getSmallPet(): Fish | Bird;\n// ---cut---\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n</code></pre>\n<p><code>pet is Fish</code> is our type predicate in this example.\nA predicate takes the form <code>parameterName is Type</code>, where <code>parameterName</code> must be the name of a parameter from the current function signature.</p>\n<p>Any time <code>isFish</code> is called with some variable, TypeScript will <em>narrow</em> that variable to that specific type if the original type is compatible.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Fish = { swim: () => void };\ntype Bird = { fly: () => void };\ndeclare function getSmallPet(): Fish | Bird;\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n// ---cut---\n// Both calls to 'swim' and 'fly' are now okay.\nlet pet = getSmallPet();\n\nif (isFish(pet)) {\n  pet.swim();\n} else {\n  pet.fly();\n}\n</code></pre>\n<p>Notice that TypeScript not only knows that <code>pet</code> is a <code>Fish</code> in the <code>if</code> branch;\nit also knows that in the <code>else</code> branch, you <em>don’t</em> have a <code>Fish</code>, so you must have a <code>Bird</code>.</p>\n<p>You may use the type guard <code>isFish</code> to filter an array of <code>Fish | Bird</code> and obtain an array of <code>Fish</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Fish = { swim: () => void; name: string };\ntype Bird = { fly: () => void; name: string };\ndeclare function getSmallPet(): Fish | Bird;\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n// ---cut---\nconst zoo: (Fish | Bird)[] = [getSmallPet(), getSmallPet(), getSmallPet()];\nconst underWater1: Fish[] = zoo.filter(isFish);\n// or, equivalently\nconst underWater2: Fish[] = zoo.filter(isFish) as Fish[];\n\n// The predicate may need repeating for more complex examples\nconst underWater3: Fish[] = zoo.filter((pet): pet is Fish => {\n  if (pet.name === \"sharkey\") return false;\n  return isFish(pet);\n});\n</code></pre>\n<p>In addition, classes can <a href=\"/docs/handbook/2/classes.html#this-based-type-guards\">use <code>this is Type</code></a> to narrow their type.</p>\n<h1 id=\"discriminated-unions\" style=\"position:relative;\"><a href=\"#discriminated-unions\" aria-label=\"discriminated unions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discriminated unions</h1>\n<p>Most of the examples we’ve looked at so far have focused around narrowing single variables with simple types like <code>string</code>, <code>boolean</code>, and <code>number</code>.\nWhile this is common, most of the time in JavaScript we’ll be dealing with slightly more complex structures.</p>\n<p>For some motivation, let’s imagine we’re trying to encode shapes like circles and squares.\nCircles keep track of their radiuses and squares keep track of their side lengths.\nWe’ll use a field called <code>kind</code> to tell which shape we’re dealing with.\nHere’s a first attempt at defining <code>Shape</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Shape {\n  kind: \"circle\" | \"square\";\n  radius?: number;\n  sideLength?: number;\n}\n</code></pre>\n<p>Notice we’re using a union of string literal types: <code>\"circle\"</code> and <code>\"square\"</code> to tell us whether we should treat the shape as a circle or square respectively.\nBy using <code>\"circle\" | \"square\"</code> instead of <code>string</code>, we can avoid misspelling issues.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2367\ninterface Shape {\n  kind: \"circle\" | \"square\";\n  radius?: number;\n  sideLength?: number;\n}\n\n// ---cut---\nfunction handleShape(shape: Shape) {\n  // oops!\n  if (shape.kind === \"rect\") {\n    // ...\n  }\n}\n</code></pre>\n<p>We can write a <code>getArea</code> function that applies the right logic based on if it’s dealing with a circle or square.\nWe’ll first try dealing with circles.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2532\ninterface Shape {\n  kind: \"circle\" | \"square\";\n  radius?: number;\n  sideLength?: number;\n}\n\n// ---cut---\nfunction getArea(shape: Shape) {\n  return Math.PI * shape.radius ** 2;\n}\n</code></pre>\n<!-- TODO -->\n<p>Under <code>strictNullChecks</code> that gives us an error - which is appropriate since <code>radius</code> might not be defined.\nBut what if we perform the appropriate checks on the <code>kind</code> property?</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2532\ninterface Shape {\n  kind: \"circle\" | \"square\";\n  radius?: number;\n  sideLength?: number;\n}\n\n// ---cut---\nfunction getArea(shape: Shape) {\n  if (shape.kind === \"circle\") {\n    return Math.PI * shape.radius ** 2;\n  }\n}\n</code></pre>\n<p>Hmm, TypeScript still doesn’t know what to do here.\nWe’ve hit a point where we know more about our values than the type checker does.\nWe could try to use a non-null assertion (a <code>!</code> after <code>shape.radius</code>) to say that <code>radius</code> is definitely present.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Shape {\n  kind: \"circle\" | \"square\";\n  radius?: number;\n  sideLength?: number;\n}\n\n// ---cut---\nfunction getArea(shape: Shape) {\n  if (shape.kind === \"circle\") {\n    return Math.PI * shape.radius! ** 2;\n  }\n}\n</code></pre>\n<p>But this doesn’t feel ideal.\nWe had to shout a bit at the type-checker with those non-null assertions (<code>!</code>) to convince it that <code>shape.radius</code> was defined, but those assertions are error-prone if we start to move code around.\nAdditionally, outside of <code>strictNullChecks</code> we’re able to accidentally access any of those fields anyway (since optional properties are just assumed to always be present when reading them).\nWe can definitely do better.</p>\n<p>The problem with this encoding of <code>Shape</code> is that the type-checker doesn’t have any way to know whether or not <code>radius</code> or <code>sideLength</code> are present based on the <code>kind</code> property.\nWe need to communicate what <em>we</em> know to the type checker.\nWith that in mind, let’s take another swing at defining <code>Shape</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  sideLength: number;\n}\n\ntype Shape = Circle | Square;\n</code></pre>\n<p>Here, we’ve properly separated <code>Shape</code> out into two types with different values for the <code>kind</code> property, but <code>radius</code> and <code>sideLength</code> are declared as required properties in their respective types.</p>\n<p>Let’s see what happens here when we try to access the <code>radius</code> of a <code>Shape</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  sideLength: number;\n}\n\ntype Shape = Circle | Square;\n\n// ---cut---\nfunction getArea(shape: Shape) {\n  return Math.PI * shape.radius ** 2;\n}\n</code></pre>\n<p>Like with our first definition of <code>Shape</code>, this is still an error.\nWhen <code>radius</code> was optional, we got an error (only in <code>strictNullChecks</code>) because TypeScript couldn’t tell whether the property was present.\nNow that <code>Shape</code> is a union, TypeScript is telling us that <code>shape</code> might be a <code>Square</code>, and <code>Square</code>s don’t have <code>radius</code> defined on them!\nBoth interpretations are correct, but only does our new encoding of <code>Shape</code> still cause an error outside of <code>strictNullChecks</code>.</p>\n<p>But what if we tried checking the <code>kind</code> property again?</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  sideLength: number;\n}\n\ntype Shape = Circle | Square;\n\n// ---cut---\nfunction getArea(shape: Shape) {\n  if (shape.kind === \"circle\") {\n    return Math.PI * shape.radius ** 2;\n    //               ^?\n  }\n}\n</code></pre>\n<p>That got rid of the error!\nWhen every type in a union contains a common property with literal types, TypeScript considers that to be a <em>discriminated union</em>, and can narrow out the members of the union.</p>\n<p>In this case, <code>kind</code> was that common property (which is what’s considered a <em>discriminant</em> property of <code>Shape</code>).\nChecking whether the <code>kind</code> property was <code>\"circle\"</code> got rid of every type in <code>Shape</code> that didn’t have a <code>kind</code> property with the type <code>\"circle\"</code>.\nThat narrowed <code>shape</code> down to the type <code>Circle</code>.</p>\n<p>The same checking works with <code>switch</code> statements as well.\nNow we can try to write our complete <code>getArea</code> without any pesky <code>!</code> non-null assertions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  sideLength: number;\n}\n\ntype Shape = Circle | Square;\n\n// ---cut---\nfunction getArea(shape: Shape) {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    //                 ^?\n    case \"square\":\n      return shape.sideLength ** 2;\n    //       ^?\n  }\n}\n</code></pre>\n<p>The important thing here was the encoding of <code>Shape</code>.\nCommunicating the right information to TypeScript - that <code>Circle</code> and <code>Square</code> were really two separate types with specific <code>kind</code> fields - was crucial.\nDoing that let us write type-safe TypeScript code that looks no different than the JavaScript we would’ve written otherwise.\nFrom there, the type system was able to do the “right” thing and figure out the types in each branch of our <code>switch</code> statement.</p>\n<blockquote>\n<p>As an aside, try playing around with the above example and remove some of the return keywords.\nYou’ll see that type-checking can help avoid bugs when accidentally falling through different clauses in a <code>switch</code> statement.</p>\n</blockquote>\n<p>Discriminated unions are useful for more than just talking about circles and squares.\nThey’re good for representing any sort of messaging scheme in JavaScript, like when sending messages over the network (client/server communication), or encoding mutations in a state management framework.</p>\n<h1 id=\"the-never-type\" style=\"position:relative;\"><a href=\"#the-never-type\" aria-label=\"the never type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>never</code> type</h1>\n<p>When narrowing, you can reduce the options of a union to a point where you have removed all possibilities and have nothing left.\nIn those cases, TypeScript will use a <code>never</code> type to represent a state which shouldn’t exist.</p>\n<h1 id=\"exhaustiveness-checking\" style=\"position:relative;\"><a href=\"#exhaustiveness-checking\" aria-label=\"exhaustiveness checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exhaustiveness checking</h1>\n<p>The <code>never</code> type is assignable to every type; however, no type is assignable to <code>never</code> (except <code>never</code> itself). This means you can use narrowing and rely on <code>never</code> turning up to do exhaustive checking in a switch statement.</p>\n<p>For example, adding a <code>default</code> to our <code>getArea</code> function which tries to assign the shape to <code>never</code> will raise when every possible case has not been handled.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  sideLength: number;\n}\n// ---cut---\ntype Shape = Circle | Square;\n\nfunction getArea(shape: Shape) {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    case \"square\":\n      return shape.sideLength ** 2;\n    default:\n      const _exhaustiveCheck: never = shape;\n      return _exhaustiveCheck;\n  }\n}\n</code></pre>\n<p>Adding a new member to the <code>Shape</code> union, will cause a TypeScript error:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  sideLength: number;\n}\n// ---cut---\ninterface Triangle {\n  kind: \"triangle\";\n  sideLength: number;\n}\n\ntype Shape = Circle | Square | Triangle;\n\nfunction getArea(shape: Shape) {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    case \"square\":\n      return shape.sideLength ** 2;\n    default:\n      const _exhaustiveCheck: never = shape;\n      return _exhaustiveCheck;\n  }\n}\n</code></pre>","headings":[{"value":"typeof type guards","depth":2},{"value":"Truthiness narrowing","depth":1},{"value":"Equality narrowing","depth":2},{"value":"The in operator narrowing","depth":3},{"value":"instanceof narrowing","depth":2},{"value":"Assignments","depth":2},{"value":"Control flow analysis","depth":2},{"value":"Using type predicates","depth":2},{"value":"Discriminated unions","depth":1},{"value":"The never type","depth":1},{"value":"Exhaustiveness checking","depth":1}],"frontmatter":{"permalink":"/docs/handbook/2/narrowing.html","title":"Narrowing","disable_toc":null,"handbook":null,"oneline":"Understand how TypeScript uses JavaScript knowledge to reduce the amount of type syntax in your projects.","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Everyday Types","oneline":"The language primitives.","permalink":"/docs/handbook/2/everyday-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"More on Functions","oneline":"Learn about how Functions work in TypeScript.","permalink":"/docs/handbook/2/functions.html"}}}},"pageContext":{"id":"1-narrowing","slug":"/docs/handbook/2/narrowing.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Narrowing.md","previousID":"e9c17512-998a-53d5-bc2e-932a378f74c0","nextID":"1d4226fd-425e-594c-9fe1-5440f320c70e","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}