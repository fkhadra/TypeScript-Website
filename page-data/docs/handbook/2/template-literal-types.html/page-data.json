{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/template-literal-types.html","result":{"data":{"markdownRemark":{"id":"9037fcde-60fa-51f6-8c77-7306bfae1379","excerpt":"Template literal types build on string literal types, and have the ability to expand into many strings via unions. They have the same syntax as template literal…","html":"<p>Template literal types build on <a href=\"/docs/handbook/2/everyday-types.html#literal-types\">string literal types</a>, and have the ability to expand into many strings via unions.</p>\n<p>They have the same syntax as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literal strings in JavaScript</a>, but are used in type positions.\nWhen used with concrete literal types, a template literal produces a new string literal type by concatenating the contents.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type World = \"world\";\n\ntype Greeting = `hello ${World}`;\n//   ^?\n</code></pre>\n<p>When a union is used in the interpolated position, the type is the set of every possible string literal that could be represented by each union member:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type EmailLocaleIDs = \"welcome_email\" | \"email_heading\";\ntype FooterLocaleIDs = \"footer_title\" | \"footer_sendoff\";\n\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;\n//   ^?\n</code></pre>\n<p>For each interpolated position in the template literal, the unions are cross multiplied:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type EmailLocaleIDs = \"welcome_email\" | \"email_heading\";\ntype FooterLocaleIDs = \"footer_title\" | \"footer_sendoff\";\n// ---cut---\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;\ntype Lang = \"en\" | \"ja\" | \"pt\";\n\ntype LocaleMessageIDs = `${Lang}_${AllLocaleIDs}`;\n//   ^?\n</code></pre>\n<p>We generally recommend that people use ahead-of-time generation for large string unions, but this is useful in smaller cases.</p>\n<h3 id=\"string-unions-in-types\" style=\"position:relative;\"><a href=\"#string-unions-in-types\" aria-label=\"string unions in types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Unions in Types</h3>\n<p>The power in template literals comes when defining a new string based off an existing string inside a type.</p>\n<p>For example, a common pattern in JavaScript is to extend an object based on the fields that it currently has. We’ll provide a type definition for a function which adds support for an <code>on</code> function which lets you know when a value has changed:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noErrors\ndeclare function makeWatchedObject(obj: any): any;\n// ---cut---\nconst person = makeWatchedObject({\n  firstName: \"Saoirse\",\n  lastName: \"Ronan\",\n  age: 26,\n});\n\nperson.on(\"firstNameChanged\", (newValue) => {\n  console.log(`firstName was changed to ${newValue}!`);\n});\n</code></pre>\n<p>Notice that <code>on</code> listens on the event <code>\"firstNameChanged\"</code>, not just <code>\"firstName\"</code>, template literals provide a way to handle this sort of string manipulation inside the type system:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type PropEventSource&#x3C;Type> = {\n    on(eventName: `${string &#x26; keyof Type}Changed`, callback: (newValue: any) => void): void;\n};\n\n/// Create a \"watched object\" with an 'on' method\n/// so that you can watch for changes to properties.\ndeclare function makeWatchedObject&#x3C;Type>(obj: Type): Type &#x26; PropEventSource&#x3C;Type>;\n</code></pre>\n<p>With this, we can build something that errors when given the wrong property:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\ntype PropEventSource&#x3C;Type> = {\n    on(eventName: `${string &#x26; keyof Type}Changed`, callback: (newValue: any) => void): void;\n};\n\ndeclare function makeWatchedObject&#x3C;T>(obj: T): T &#x26; PropEventSource&#x3C;T>;\n// ---cut---\nconst person = makeWatchedObject({\n  firstName: \"Saoirse\",\n  lastName: \"Ronan\",\n  age: 26\n});\n\nperson.on(\"firstNameChanged\", () => {});\n\n// It's typo-resistent\nperson.on(\"firstName\", () => {});\n\nperson.on(\"frstNameChanged\", () => {});\n</code></pre>\n<h3 id=\"inference-with-template-literals\" style=\"position:relative;\"><a href=\"#inference-with-template-literals\" aria-label=\"inference with template literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inference with Template Literals</h3>\n<p>Note how the last examples did not re-use the type of the original value. The callback used an <code>any</code>. Template literal types can infer from substitution positions.</p>\n<p>We can make our last example generic to infer from parts of the <code>eventName</code> string to figure out the associated property.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type PropEventSource&#x3C;Type> = {\n    on&#x3C;Key extends string &#x26; keyof Type>\n        (eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void ): void;\n};\n\ndeclare function makeWatchedObject&#x3C;Type>(obj: Type): Type &#x26; PropEventSource&#x3C;Type>;\n\nconst person = makeWatchedObject({\n  firstName: \"Saoirse\",\n  lastName: \"Ronan\",\n  age: 26\n});\n\nperson.on(\"firstNameChanged\", newName => {\n    //                        ^?\n    console.log(`new name is ${newName.toUpperCase()}`);\n});\n\nperson.on(\"ageChanged\", newAge => {\n    //                  ^?\n    if (newAge &#x3C; 0) {\n        console.warn(\"warning! negative age\");\n    }\n})\n</code></pre>\n<p>Here we made <code>on</code> into a generic method.</p>\n<p>When a user calls with the string <code>\"firstNameChanged'</code>, TypeScript will try to infer the right type for <code>Key</code>.\nTo do that, it will match <code>Key</code> against the content prior to <code>\"Changed\"</code> and infer the string <code>\"firstName\"</code>.\nOnce TypeScript figures that out, the <code>on</code> method can fetch the type of <code>firstName</code> on the original object, which is <code>string</code> in this case.\nSimilarly, when called with <code>\"ageChanged\"</code>, TypeScript finds the type for the property <code>age</code> which is <code>number</code>.</p>\n<p>Inference can be combined in different ways, often to deconstruct strings, and reconstruct them in different ways.</p>\n<h2 id=\"intrinsic-string-manipulation-types\" style=\"position:relative;\"><a href=\"#intrinsic-string-manipulation-types\" aria-label=\"intrinsic string manipulation types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intrinsic String Manipulation Types</h2>\n<p>To help with string manipulation, TypeScript includes a set of types which can be used in string manipulation. These types come built-in to the compiler for performance and can’t be found in the <code>.d.ts</code> files included with TypeScript.</p>\n<h3 id=\"uppercasestringtype\" style=\"position:relative;\"><a href=\"#uppercasestringtype\" aria-label=\"uppercasestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Uppercase&#x3C;StringType></code></h3>\n<p>Converts each character in the string to the uppercase version.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Greeting = \"Hello, world\"\ntype ShoutyGreeting = Uppercase&#x3C;Greeting>\n//   ^?\n\ntype ASCIICacheKey&#x3C;Str extends string> = `ID-${Uppercase&#x3C;Str>}`\ntype MainID = ASCIICacheKey&#x3C;\"my_app\">\n//   ^?\n</code></pre>\n<h3 id=\"lowercasestringtype\" style=\"position:relative;\"><a href=\"#lowercasestringtype\" aria-label=\"lowercasestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Lowercase&#x3C;StringType></code></h3>\n<p>Converts each character in the string to the lowercase equivalent.</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Greeting = \"Hello, world\"\ntype QuietGreeting = Lowercase&#x3C;Greeting>\n//   ^?\n\ntype ASCIICacheKey&#x3C;Str extends string> = `id-${Lowercase&#x3C;Str>}`\ntype MainID = ASCIICacheKey&#x3C;\"MY_APP\">\n//   ^?\n</code></pre>\n<h3 id=\"capitalizestringtype\" style=\"position:relative;\"><a href=\"#capitalizestringtype\" aria-label=\"capitalizestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Capitalize&#x3C;StringType></code></h3>\n<p>Converts the first character in the string to an uppercase equivalent.</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type LowercaseGreeting = \"hello, world\";\ntype Greeting = Capitalize&#x3C;LowercaseGreeting>;\n//   ^?\n</code></pre>\n<h3 id=\"uncapitalizestringtype\" style=\"position:relative;\"><a href=\"#uncapitalizestringtype\" aria-label=\"uncapitalizestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Uncapitalize&#x3C;StringType></code></h3>\n<p>Converts the first character in the string to a lowercase equivalent.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type UppercaseGreeting = \"HELLO WORLD\";\ntype UncomfortableGreeting = Uncapitalize&#x3C;UppercaseGreeting>;\n//   ^?\n</code></pre>\n<details>\n    <summary>Technical details on the intrinsic string manipulation types</summary>\n    <p>The code, as of TypeScript 4.1, for these intrinsic functions uses the JavaScript string runtime functions directly for manipulation and are not locale aware.</p>\n    <code><pre>\nfunction applyStringMapping(symbol: Symbol, str: string) {\n    switch (intrinsicTypeKinds.get(symbol.escapedName as string)) {\n        case IntrinsicTypeKind.Uppercase: return str.toUpperCase();\n        case IntrinsicTypeKind.Lowercase: return str.toLowerCase();\n        case IntrinsicTypeKind.Capitalize: return str.charAt(0).toUpperCase() + str.slice(1);\n        case IntrinsicTypeKind.Uncapitalize: return str.charAt(0).toLowerCase() + str.slice(1);\n    }\n    return str;\n}</pre></code>\n</details>","headings":[{"value":"String Unions in Types","depth":3},{"value":"Inference with Template Literals","depth":3},{"value":"Intrinsic String Manipulation Types","depth":2},{"value":"Uppercase<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Lowercase<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Capitalize<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Uncapitalize<StringType>","depth":3},{"value":"Example","depth":5}],"frontmatter":{"permalink":"/docs/handbook/2/template-literal-types.html","title":"Template Literal Types","disable_toc":null,"handbook":null,"oneline":"Generating mapping types which change properties via template literal strings.","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Mapped Types","oneline":"Generating types by re-using an existing type.","permalink":"/docs/handbook/2/mapped-types.html"}}},"next":null},"pageContext":{"id":"1-template-literal-types","slug":"/docs/handbook/2/template-literal-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md","previousID":"69976ebb-a11c-50cf-87aa-3b44aca7fa20","lang":"en","modifiedTime":"2021-05-31T12:14:15.532Z"}},"staticQueryHashes":[]}