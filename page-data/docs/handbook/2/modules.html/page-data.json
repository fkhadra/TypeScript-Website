{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/modules.html","result":{"data":{"markdownRemark":{"id":"3f573a6d-dfd2-5fde-abbc-f31a07c8b91f","excerpt":"JavaScript has a long history of different ways to handle modularizing code.\nTypeScript having been around since 2012, has implemented support for a lot of…","html":"<p>JavaScript has a long history of different ways to handle modularizing code.\nTypeScript having been around since 2012, has implemented support for a lot of these formats, but over time the community and the JavaScript specification has converged on a format called ES Modules (or ES6 modules). You might know it as the <code>import</code>/<code>export</code> syntax.</p>\n<p>ES Modules was added to the JavaScript spec in 2015, and by 2020 had broad support in most web browsers and JavaScript runtimes.</p>\n<p>For focus, the handbook will cover both ES Modules and its popular pre-cursor CommonJS <code>module.exports =</code> syntax, and you can find information about the other module patterns in the reference section under <a href=\"/docs/handbook/modules.html\">Modules</a>.</p>\n<h2 id=\"how-javascript-modules-are-defined\" style=\"position:relative;\"><a href=\"#how-javascript-modules-are-defined\" aria-label=\"how javascript modules are defined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How JavaScript Modules are Defined</h2>\n<p>In TypeScript, just as in ECMAScript 2015, any file containing a top-level <code>import</code> or <code>export</code> is considered a module.</p>\n<p>Conversely, a file without any top-level import or export declarations is treated as a script whose contents are available in the global scope (and therefore to modules as well).</p>\n<p>Modules are executed within their own scope, not in the global scope.\nThis means that variables, functions, classes, etc. declared in a module are not visible outside the module unless they are explicitly exported using one of the export forms.\nConversely, to consume a variable, function, class, interface, etc. exported from a different module, it has to be imported using one of the import forms.</p>\n<h2 id=\"non-modules\" style=\"position:relative;\"><a href=\"#non-modules\" aria-label=\"non modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-modules</h2>\n<p>Before we start, it’s important to understand what TypeScript considers a module.\nThe JavaScript specification declares that any JavaScript files without an <code>export</code> or top-level <code>await</code> should be considered a script and not a module.</p>\n<p>Inside a script file variables and types are declared to be in the shared global scope, and it’s assumed that you’ll either use the <a href=\"/tsconfig#outFile\"><code>--outFile</code></a> compiler option to join multiple input files into one output file, or use multiple <code>&#x3C;script></code> tags in your HTML to load these files (in the correct order!).</p>\n<p>If you have a file that doesn’t currently have any <code>import</code>s or <code>export</code>s, but you want to be treated as a module, add the line:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">export {};\n</code></pre>\n<p>which will change the file be a module exporting nothing. This syntax works regardless of your module target.</p>\n<h2 id=\"modules-in-typescript\" style=\"position:relative;\"><a href=\"#modules-in-typescript\" aria-label=\"modules in typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modules in TypeScript</h2>\n<blockquote class='bg-reading'>\n   <p>Additional Reading:<br />\n   <a href='https://exploringjs.com/impatient-js/ch_modules.html#overview-syntax-of-ecmascript-modules'>Impatient JS (Modules)</a><br/>\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules'>MDN: JavaScript Modules</a><br/>\n   </p>\n</blockquote>\n<p>There are three main things to consider when writing module-based code in TypeScript:</p>\n<ul>\n<li><strong>Syntax</strong>: What syntax do I want to use to import and export things?</li>\n<li><strong>Module Resolution</strong>: What is the relationship between module names (or paths) and files on disk?</li>\n<li><strong>Module Output Target</strong>: What should my emitted JavaScript module look like?</li>\n</ul>\n<h3 id=\"es-module-syntax\" style=\"position:relative;\"><a href=\"#es-module-syntax\" aria-label=\"es module syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Module Syntax</h3>\n<p>A file can declare a main export via <code>export default</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: hello.ts\nexport default function helloWorld() {\n  console.log(\"Hello, world!\");\n}\n</code></pre>\n<p>This is then imported via:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: hello.ts\nexport default function helloWorld() {\n  console.log(\"Hello, world!\");\n}\n// @filename: index.ts\n// ---cut---\nimport hello from \"./hello.js\";\nhello();\n</code></pre>\n<p>In addition to the default export, you can have more than one export of variables and functions via the <code>export</code> by omitting <code>default</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: maths.ts\nexport var pi = 3.14;\nexport let squareTwo = 1.41;\nexport const phi = 1.61;\n\nexport class RandomNumberGenerator {}\n\nexport function absolute(num: number) {\n  if (num &#x3C; 0) return num * -1;\n  return num;\n}\n</code></pre>\n<p>These can be used in another file via the <code>import</code> syntax:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: maths.ts\nexport var pi = 3.14;\nexport let squareTwo = 1.41;\nexport const phi = 1.61;\nexport class RandomNumberGenerator {}\nexport function absolute(num: number) {\n  if (num &#x3C; 0) return num * -1;\n  return num;\n}\n// @filename: app.ts\n// ---cut---\nimport { pi, phi, absolute } from \"./maths.js\";\n\nconsole.log(pi);\nconst absPhi = absolute(phi);\n//    ^?\n</code></pre>\n<h3 id=\"additional-import-syntax\" style=\"position:relative;\"><a href=\"#additional-import-syntax\" aria-label=\"additional import syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional Import Syntax</h3>\n<p>An import can be renamed using a format like <code>import {old as new}</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: maths.ts\nexport var pi = 3.14;\n// @filename: app.ts\n// ---cut---\nimport { pi as π } from \"./maths.js\";\n\nconsole.log(π);\n//          ^?\n</code></pre>\n<p>You can mix and match the above syntax into a single <code>import</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: maths.ts\nexport const pi = 3.14;\nexport default class RandomNumberGenerator {}\n\n// @filename: app.ts\nimport RNGen, { pi as π } from \"./maths.js\";\n\nRNGen;\n// ^?\n\nconsole.log(π);\n//          ^?\n</code></pre>\n<p>You can take all of the exported objects and put them into a single namespace using <code>* as name</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: maths.ts\nexport var pi = 3.14;\nexport let squareTwo = 1.41;\nexport const phi = 1.61;\n\nexport function absolute(num: number) {\n  if (num &#x3C; 0) return num * -1;\n  return num;\n}\n// ---cut---\n// @filename: app.ts\nimport * as math from \"./maths.js\";\n\nconsole.log(math.pi);\nconst positivePhi = math.absolute(math.phi);\n//    ^?\n</code></pre>\n<p>You can import a file and <em>not</em> include any variables into your current module via <code>import \"./file\"</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: maths.ts\nexport var pi = 3.14;\n// ---cut---\n// @filename: app.ts\nimport \"./maths.js\";\n\nconsole.log(\"3.14\");\n</code></pre>\n<p>In this case, the <code>import</code> does nothing. However, all of the code in <code>maths.ts</code> was evaluated, which could trigger side-effects which affect other objects.</p>\n<h4 id=\"typescript-specific-es-module-syntax\" style=\"position:relative;\"><a href=\"#typescript-specific-es-module-syntax\" aria-label=\"typescript specific es module syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript Specific ES Module Syntax</h4>\n<p>Types can be exported and imported using the same syntax as JavaScript values:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: animal.ts\nexport type Cat = { breed: string; yearOfBirth: number };\n\nexport interface Dog {\n  breeds: string[];\n  yearOfBirth: number;\n}\n\n// @filename: app.ts\nimport { Cat, Dog } from \"./animal.js\";\ntype Animals = Cat | Dog;\n</code></pre>\n<p>TypeScript has extended the <code>import</code> syntax with <code>import type</code> which is an import which can <em>only</em> import types.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: animal.ts\nexport type Cat = { breed: string; yearOfBirth: number };\nexport type Dog = { breeds: string[]; yearOfBirth: number };\nexport const createCatName = () => \"fluffy\";\n\n// @filename: valid.ts\nimport type { Cat, Dog } from \"./animal.js\";\nexport type Animals = Cat | Dog;\n\n// @filename: app.ts\n// @errors: 1361\nimport type { createCatName } from \"./animal.js\";\nconst name = createCatName();\n</code></pre>\n<p>This syntax allows a non-TypeScript transpiler like Babel, swc or esbuild to know what imports can be safely removed.</p>\n<h4 id=\"es-module-syntax-with-commonjs-behavior\" style=\"position:relative;\"><a href=\"#es-module-syntax-with-commonjs-behavior\" aria-label=\"es module syntax with commonjs behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Module Syntax with CommonJS Behavior</h4>\n<p>TypeScript has ES Module syntax which <em>directly</em> correlates to a CommonJS and AMD <code>require</code>. Imports using ES Module are <em>for most cases</em> the same as the <code>require</code> from those environments, but this syntax ensures you have a 1 to 1 match in your TypeScript file with the CommonJS output:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">/// &#x3C;reference types=\"node\" />\n// @module: commonjs\n// ---cut---\nimport fs = require(\"fs\");\nconst code = fs.readFileSync(\"hello.ts\", \"utf8\");\n</code></pre>\n<p>You can learn more about this syntax in the <a href=\"/docs/handbook/modules.html#export--and-import--require\">modules reference page</a>.</p>\n<h2 id=\"commonjs-syntax\" style=\"position:relative;\"><a href=\"#commonjs-syntax\" aria-label=\"commonjs syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS Syntax</h2>\n<p>CommonJS is the format which most modules on npm are delivered in. Even if you are writing using the ES Modules syntax above, having a brief understanding of how CommonJS syntax works will help you debug easier.</p>\n<h4 id=\"exporting\" style=\"position:relative;\"><a href=\"#exporting\" aria-label=\"exporting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exporting</h4>\n<p>Identifiers are exported via setting the <code>exports</code> property on a global called <code>module</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">/// &#x3C;reference types=\"node\" />\n// ---cut---\nfunction absolute(num: number) {\n  if (num &#x3C; 0) return num * -1;\n  return num;\n}\n\nmodule.exports = {\n  pi: 3.14,\n  squareTwo: 1.41,\n  phi: 1.61,\n  absolute,\n};\n</code></pre>\n<p>Then these files can be imported via a <code>require</code> statement:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @module: commonjs\n// @filename: maths.ts\n/// &#x3C;reference types=\"node\" />\nfunction absolute(num: number) {\n  if (num &#x3C; 0) return num * -1;\n  return num;\n}\n\nmodule.exports = {\n  pi: 3.14,\n  squareTwo: 1.41,\n  phi: 1.61,\n  absolute,\n};\n// @filename: index.ts\n// ---cut---\nconst maths = require(\"maths\");\nmaths.pi;\n//    ^?\n</code></pre>\n<p>Or you can simplify a bit using the destructuring feature in JavaScript:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @module: commonjs\n// @filename: maths.ts\n/// &#x3C;reference types=\"node\" />\nfunction absolute(num: number) {\n  if (num &#x3C; 0) return num * -1;\n  return num;\n}\n\nmodule.exports = {\n  pi: 3.14,\n  squareTwo: 1.41,\n  phi: 1.61,\n  absolute,\n};\n// @filename: index.ts\n// ---cut---\nconst { squareTwo } = require(\"maths\");\nsquareTwo;\n// ^?\n</code></pre>\n<h3 id=\"commonjs-and-es-modules-interop\" style=\"position:relative;\"><a href=\"#commonjs-and-es-modules-interop\" aria-label=\"commonjs and es modules interop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS and ES Modules interop</h3>\n<p>There is a mis-match in features between CommonJS and ES Module because ES Modules only support having the default export as an object, and never as a function. TypeScript has a compiler flag to reduce the friction between the two different sets of constraints with <a href=\"/tsconfig/#esModuleInterop\"><code>esModuleInterop</code></a>.</p>\n<h2 id=\"typescripts-module-resolution-options\" style=\"position:relative;\"><a href=\"#typescripts-module-resolution-options\" aria-label=\"typescripts module resolution options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript’s Module Resolution Options</h2>\n<p>Module resolution is the process of taking a string from the <code>import</code> or <code>require</code> statement, and determining what file that string refers to.</p>\n<p>TypeScript includes two resolution strategies: Classic and Node. Classic, the default when the compiler flag <a href=\"/tsconfig/#module\"><code>module</code></a> is not <code>commonjs</code>, is included for backwards compatibility.\nThe Node strategy replicates how Node.js works in CommonJS mode, with additional checks for <code>.ts</code> and <code>.d.ts</code>.</p>\n<p>There are many TSConfig flags which influence the module strategy within TypeScript: <a href=\"/tsconfig/#moduleResolution\"><code>moduleResolution</code></a>, <a href=\"/tsconfig/#baseUrl\"><code>baseUrl</code></a>, <a href=\"/tsconfig/#paths\"><code>paths</code></a>, <a href=\"/tsconfig/#rootDirs\"><code>rootDirs</code></a>.</p>\n<p>For the full details on how these strategies work, you can consult the <a href=\"/docs/handbook/module-resolution.html\">Module Resolution</a>.</p>\n<h2 id=\"typescripts-module-output-options\" style=\"position:relative;\"><a href=\"#typescripts-module-output-options\" aria-label=\"typescripts module output options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript’s Module Output Options</h2>\n<p>There are two options which affect the emitted JavaScript output:</p>\n<ul>\n<li><a href=\"/tsconfig/#target\"><code>target</code></a> which determines which JS features are downleveled (converted to run in older JavaScript runtimes) and which are left intact</li>\n<li><a href=\"/tsconfig/#module\"><code>module</code></a> which determines what code is used for modules to interact with each other</li>\n</ul>\n<p>Which <code>target</code> you use is determined by the features available in the JavaScript runtime you expect to run the TypeScript code in. That could be: the oldest web browser you support, the lowest version of Node.js you expect to run on or could come from unique constraints from your runtime - like Electron for example.</p>\n<p>All communication between modules happens via a module loader, the compiler flag <a href=\"/tsconfig#module\"><code>module</code></a> determines which one is used.\nAt runtime the module loader is responsible for locating and executing all dependencies of a module before executing it.</p>\n<p>For example, here is a TypeScript file using ES Modules syntax, showcasing a few different options for <a href=\"/tsconfig#module\"><code>module</code></a>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @filename: constants.ts\nexport const valueOfPi = 3.142;\n// @filename: index.ts\n// ---cut---\nimport { valueOfPi } from \"./constants.js\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2020</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: es2020\n// @noErrors\nimport { valueOfPi } from \"./constants.js\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: commonjs\n// @noErrors\nimport { valueOfPi } from \"./constants.js\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @showEmit\n// @module: umd\n// @noErrors\nimport { valueOfPi } from \"./constants.js\";\n\nexport const twoPi = valueOfPi * 2;\n</code></pre>\n<blockquote>\n<p>Note that ES2020 is effectively the same as the original <code>index.ts</code>.</p>\n</blockquote>\n<p>You can see all of the available options and what their emitted JavaScript code looks like in the <a href=\"/tsconfig/#module\">TSConfig Reference for <code>module</code></a>.</p>\n<h2 id=\"typescript-namespaces\" style=\"position:relative;\"><a href=\"#typescript-namespaces\" aria-label=\"typescript namespaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript namespaces</h2>\n<p>TypeScript has its own module format called <code>namespaces</code> which pre-dates the ES Modules standard. This syntax has a lot of useful features for creating complex definition files, and still sees active use <a href=\"/dt\">in DefinitelyTyped</a>. While not deprecated, the majority of the features in namespaces exist in ES Modules and we recommend you use that to align with JavaScript’s direction. You can learn more about namespaces in <a href=\"/docs/handbook/namespaces.html\">the namespaces reference page</a>.</p>","headings":[{"value":"How JavaScript Modules are Defined","depth":2},{"value":"Non-modules","depth":2},{"value":"Modules in TypeScript","depth":2},{"value":"ES Module Syntax","depth":3},{"value":"Additional Import Syntax","depth":3},{"value":"TypeScript Specific ES Module Syntax","depth":4},{"value":"ES Module Syntax with CommonJS Behavior","depth":4},{"value":"CommonJS Syntax","depth":2},{"value":"Exporting","depth":4},{"value":"CommonJS and ES Modules interop","depth":3},{"value":"TypeScript’s Module Resolution Options","depth":2},{"value":"TypeScript’s Module Output Options","depth":2},{"value":"ES2020","depth":4},{"value":"CommonJS","depth":4},{"value":"UMD","depth":4},{"value":"TypeScript namespaces","depth":2}],"frontmatter":{"permalink":"/docs/handbook/2/modules.html","title":"Modules","disable_toc":null,"handbook":null,"oneline":"How JavaScript handles communicating across file boundaries.","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Classes","oneline":"How classes work in TypeScript","permalink":"/docs/handbook/2/classes.html"}}},"next":null},"pageContext":{"id":"1-modules","slug":"/docs/handbook/2/modules.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Modules.md","previousID":"711819f6-45b2-5aa6-82fd-b47feb6fe811","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}