{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/classes.html","result":{"data":{"markdownRemark":{"id":"884030d2-24f6-5ae5-bcb0-982e0e9d6d7b","excerpt":"TypeScript offers full support for the class keyword introduced in ES2015. As with other JavaScript language features, TypeScript adds type annotations and…","html":"<blockquote class='bg-reading'>\n  <p>Background Reading:<br /><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes'>Classes (MDN)</a></p>\n</blockquote>\n<p>TypeScript offers full support for the <code>class</code> keyword introduced in ES2015.</p>\n<p>As with other JavaScript language features, TypeScript adds type annotations and other syntax to allow you to express relationships between classes and other types.</p>\n<h2 id=\"class-members\" style=\"position:relative;\"><a href=\"#class-members\" aria-label=\"class members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Members</h2>\n<p>Here’s the most basic class - an empty one:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Point {}\n</code></pre>\n<p>This class isn’t very useful yet, so let’s start adding some members.</p>\n<h3 id=\"fields\" style=\"position:relative;\"><a href=\"#fields\" aria-label=\"fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fields</h3>\n<p>A field declaration creates a public writeable property on a class:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictPropertyInitialization: false\nclass Point {\n  x: number;\n  y: number;\n}\n\nconst pt = new Point();\npt.x = 0;\npt.y = 0;\n</code></pre>\n<p>As with other locations, the type annotation is optional, but will be an implicit <code>any</code> if not specified.</p>\n<p>Fields can also have <em>initializers</em>; these will run automatically when the class is instantiated:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Point {\n  x = 0;\n  y = 0;\n}\n\nconst pt = new Point();\n// Prints 0, 0\nconsole.log(`${pt.x}, ${pt.y}`);\n</code></pre>\n<p>Just like with <code>const</code>, <code>let</code>, and <code>var</code>, the initializer of a class property will be used to infer its type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nclass Point {\n  x = 0;\n  y = 0;\n}\n// ---cut---\nconst pt = new Point();\npt.x = \"0\";\n</code></pre>\n<h4 id=\"--strictpropertyinitialization\" style=\"position:relative;\"><a href=\"#--strictpropertyinitialization\" aria-label=\"  strictpropertyinitialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--strictPropertyInitialization</code></h4>\n<p>The <code>strictPropertyInitialization</code> setting controls whether class fields need to be initialized in the constructor.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2564\nclass BadGreeter {\n  name: string;\n}\n</code></pre>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class GoodGreeter {\n  name: string;\n\n  constructor() {\n    this.name = \"hello\";\n  }\n}\n</code></pre>\n<p>Note that the field needs to be initialized <em>in the constructor itself</em>.\nTypeScript does not analyze methods you invoke from the constructor to detect initializations, because a derived class might override those methods and fail to initialize the members.</p>\n<p>If you intend to definitely initialize a field through means other than the constructor (for example, maybe an external library is filling in part of your class for you), you can use the <em>definite assignment assertion operator</em>, <code>!</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class OKGreeter {\n  // Not initialized, but no error\n  name!: string;\n}\n</code></pre>\n<h3 id=\"readonly\" style=\"position:relative;\"><a href=\"#readonly\" aria-label=\"readonly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code></h3>\n<p>Fields may be prefixed with the <code>readonly</code> modifier.\nThis prevents assignments to the field outside of the constructor.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2540 2540\nclass Greeter {\n  readonly name: string = \"world\";\n\n  constructor(otherName?: string) {\n    if (otherName !== undefined) {\n      this.name = otherName;\n    }\n  }\n\n  err() {\n    this.name = \"not ok\";\n  }\n}\nconst g = new Greeter();\ng.name = \"also not ok\";\n</code></pre>\n<h3 id=\"constructors\" style=\"position:relative;\"><a href=\"#constructors\" aria-label=\"constructors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructors</h3>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor'>Constructor (MDN)</a><br/>\n   </p>\n</blockquote>\n<p>Class constructors are very similar to functions.\nYou can add parameters with type annotations, default values, and overloads:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Point {\n  x: number;\n  y: number;\n\n  // Normal signature with defaults\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n}\n</code></pre>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Point {\n  // Overloads\n  constructor(x: number, y: string);\n  constructor(s: string);\n  constructor(xs: any, y?: any) {\n    // TBD\n  }\n}\n</code></pre>\n<p>There are just a few differences between class constructor signatures and function signatures:</p>\n<ul>\n<li>Constructors can’t have type parameters - these belong on the outer class declaration, which we’ll learn about later</li>\n<li>Constructors can’t have return type annotations - the class instance type is always what’s returned</li>\n</ul>\n<h4 id=\"super-calls\" style=\"position:relative;\"><a href=\"#super-calls\" aria-label=\"super calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Super Calls</h4>\n<p>Just as in JavaScript, if you have a base class, you’ll need to call <code>super();</code> in your constructor body before using any <code>this.</code> members:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 17009\nclass Base {\n  k = 4;\n}\n\nclass Derived extends Base {\n  constructor() {\n    // Prints a wrong value in ES5; throws exception in ES6\n    console.log(this.k);\n    super();\n  }\n}\n</code></pre>\n<p>Forgetting to call <code>super</code> is an easy mistake to make in JavaScript, but TypeScript will tell you when it’s necessary.</p>\n<h3 id=\"methods\" style=\"position:relative;\"><a href=\"#methods\" aria-label=\"methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h3>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions'>Method definitions</a><br/>\n   </p>\n</blockquote>\n<p>A function property on a class is called a <em>method</em>.\nMethods can use all the same type annotations as functions and constructors:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Point {\n  x = 10;\n  y = 10;\n\n  scale(n: number): void {\n    this.x *= n;\n    this.y *= n;\n  }\n}\n</code></pre>\n<p>Other than the standard type annotations, TypeScript doesn’t add anything else new to methods.</p>\n<p>Note that inside a method body, it is still mandatory to access fields and other methods via <code>this.</code>.\nAn unqualified name in a method body will always refer to something in the enclosing scope:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nlet x: number = 0;\n\nclass C {\n  x: string = \"hello\";\n\n  m() {\n    // This is trying to modify 'x' from line 1, not the class property\n    x = \"world\";\n  }\n}\n</code></pre>\n<h3 id=\"getters--setters\" style=\"position:relative;\"><a href=\"#getters--setters\" aria-label=\"getters  setters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getters / Setters</h3>\n<p>Classes can also have <em>accessors</em>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class C {\n  _length = 0;\n  get length() {\n    return this._length;\n  }\n  set length(value) {\n    this._length = value;\n  }\n}\n</code></pre>\n<blockquote>\n<p>Note that a field-backed get/set pair with no extra logic is very rarely useful in JavaScript.\nIt’s fine to expose public fields if you don’t need to add additional logic during the get/set operations.</p>\n</blockquote>\n<p>TypeScript has some special inference rules for accessors:</p>\n<ul>\n<li>If no <code>set</code> exists, the property is automatically <code>readonly</code></li>\n<li>The type of the setter parameter is inferred from the return type of the getter</li>\n<li>If the setter parameter has a type annotation, it must match the return type of the getter</li>\n<li>Getters and setters must have the same <a href=\"#member-visibility\">Member Visibility</a></li>\n</ul>\n<p>It is not possible to have accessors with different types for getting and setting.</p>\n<p>If you have a getter without a setter, the field is automatically <code>readonly</code></p>\n<h3 id=\"index-signatures\" style=\"position:relative;\"><a href=\"#index-signatures\" aria-label=\"index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index Signatures</h3>\n<p>Classes can declare index signatures; these work the same as <a href=\"/docs/handbook/2/objects.html#index-signatures\">Index Signatures for other object types</a>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class MyClass {\n  [s: string]: boolean | ((s: string) => boolean);\n\n  check(s: string) {\n    return this[s] as boolean;\n  }\n}\n</code></pre>\n<p>Because the index signature type needs to also capture the types of methods, it’s not easy to usefully use these types.\nGenerally it’s better to store indexed data in another place instead of on the class instance itself.</p>\n<h2 id=\"class-heritage\" style=\"position:relative;\"><a href=\"#class-heritage\" aria-label=\"class heritage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Heritage</h2>\n<p>Like other languages with object-oriented features, classes in JavaScript can inherit from base classes.</p>\n<h3 id=\"implements-clauses\" style=\"position:relative;\"><a href=\"#implements-clauses\" aria-label=\"implements clauses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>implements</code> Clauses</h3>\n<p>You can use an <code>implements</code> clause to check that a class satisfies a particular <code>interface</code>.\nAn error will be issued if a class fails to correctly implement it:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2420\ninterface Pingable {\n  ping(): void;\n}\n\nclass Sonar implements Pingable {\n  ping() {\n    console.log(\"ping!\");\n  }\n}\n\nclass Ball implements Pingable {\n  pong() {\n    console.log(\"pong!\");\n  }\n}\n</code></pre>\n<p>Classes may also implement multiple interfaces, e.g. <code>class C implements A, B {</code>.</p>\n<h4 id=\"cautions\" style=\"position:relative;\"><a href=\"#cautions\" aria-label=\"cautions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cautions</h4>\n<p>It’s important to understand that an <code>implements</code> clause is only a check that the class can be treated as the interface type.\nIt doesn’t change the type of the class or its methods <em>at all</em>.\nA common source of error is to assume that an <code>implements</code> clause will change the class type - it doesn’t!</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7006\ninterface Checkable {\n  check(name: string): boolean;\n}\n\nclass NameChecker implements Checkable {\n  check(s) {\n    // Notice no error here\n    return s.toLowercse() === \"ok\";\n    //         ^?\n  }\n}\n</code></pre>\n<p>In this example, we perhaps expected that <code>s</code>’s type would be influenced by the <code>name: string</code> parameter of <code>check</code>.\nIt is not - <code>implements</code> clauses don’t change how the class body is checked or its type inferred.</p>\n<p>Similarly, implementing an interface with an optional property doesn’t create that property:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339\ninterface A {\n  x: number;\n  y?: number;\n}\nclass C implements A {\n  x = 0;\n}\nconst c = new C();\nc.y = 10;\n</code></pre>\n<h3 id=\"extends-clauses\" style=\"position:relative;\"><a href=\"#extends-clauses\" aria-label=\"extends clauses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>extends</code> Clauses</h3>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends'>extends keyword (MDN)</a><br/>\n   </p>\n</blockquote>\n<p>Classes may <code>extend</code> from a base class.\nA derived class has all the properties and methods of its base class, and also define additional members.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Animal {\n  move() {\n    console.log(\"Moving along!\");\n  }\n}\n\nclass Dog extends Animal {\n  woof(times: number) {\n    for (let i = 0; i &#x3C; times; i++) {\n      console.log(\"woof!\");\n    }\n  }\n}\n\nconst d = new Dog();\n// Base class method\nd.move();\n// Derived class method\nd.woof(3);\n</code></pre>\n<h4 id=\"overriding-methods\" style=\"position:relative;\"><a href=\"#overriding-methods\" aria-label=\"overriding methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overriding Methods</h4>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super'>super keyword (MDN)</a><br/>\n   </p>\n</blockquote>\n<p>A derived class can also override a base class field or property.\nYou can use the <code>super.</code> syntax to access base class methods.\nNote that because JavaScript classes are a simple lookup object, there is no notion of a “super field”.</p>\n<p>TypeScript enforces that a derived class is always a subtype of its base class.</p>\n<p>For example, here’s a legal way to override a method:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Base {\n  greet() {\n    console.log(\"Hello, world!\");\n  }\n}\n\nclass Derived extends Base {\n  greet(name?: string) {\n    if (name === undefined) {\n      super.greet();\n    } else {\n      console.log(`Hello, ${name.toUpperCase()}`);\n    }\n  }\n}\n\nconst d = new Derived();\nd.greet();\nd.greet(\"reader\");\n</code></pre>\n<p>It’s important that a derived class follow its base class contract.\nRemember that it’s very common (and always legal!) to refer to a derived class instance through a base class reference:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Base {\n  greet() {\n    console.log(\"Hello, world!\");\n  }\n}\ndeclare const d: Base;\n// ---cut---\n// Alias the derived instance through a base class reference\nconst b: Base = d;\n// No problem\nb.greet();\n</code></pre>\n<p>What if <code>Derived</code> didn’t follow <code>Base</code>’s contract?</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2416\nclass Base {\n  greet() {\n    console.log(\"Hello, world!\");\n  }\n}\n\nclass Derived extends Base {\n  // Make this parameter required\n  greet(name: string) {\n    console.log(`Hello, ${name.toUpperCase()}`);\n  }\n}\n</code></pre>\n<p>If we compiled this code despite the error, this sample would then crash:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare class Base {\n  greet(): void;\n}\ndeclare class Derived extends Base {}\n// ---cut---\nconst b: Base = new Derived();\n// Crashes because \"name\" will be undefined\nb.greet();\n</code></pre>\n<h4 id=\"initialization-order\" style=\"position:relative;\"><a href=\"#initialization-order\" aria-label=\"initialization order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initialization Order</h4>\n<p>The order that JavaScript classes initialize can be surprising in some cases.\nLet’s consider this code:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Base {\n  name = \"base\";\n  constructor() {\n    console.log(\"My name is \" + this.name);\n  }\n}\n\nclass Derived extends Base {\n  name = \"derived\";\n}\n\n// Prints \"base\", not \"derived\"\nconst d = new Derived();\n</code></pre>\n<p>What happened here?</p>\n<p>The order of class initialization, as defined by JavaScript, is:</p>\n<ul>\n<li>The base class fields are initialized</li>\n<li>The base class constructor runs</li>\n<li>The derived class fields are initialized</li>\n<li>The derived class constructor runs</li>\n</ul>\n<p>This means that the base class constructor saw its own value for <code>name</code> during its own constructor, because the derived class field initializations hadn’t run yet.</p>\n<h4 id=\"inheriting-built-in-types\" style=\"position:relative;\"><a href=\"#inheriting-built-in-types\" aria-label=\"inheriting built in types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inheriting Built-in Types</h4>\n<blockquote>\n<p>Note: If you don’t plan to inherit from built-in types like <code>Array</code>, <code>Error</code>, <code>Map</code>, etc., you may skip this section</p>\n</blockquote>\n<p>In ES2015, constructors which return an object implicitly substitute the value of <code>this</code> for any callers of <code>super(...)</code>.\nIt is necessary for generated constructor code to capture any potential return value of <code>super(...)</code> and replace it with <code>this</code>.</p>\n<p>As a result, subclassing <code>Error</code>, <code>Array</code>, and others may no longer work as expected.\nThis is due to the fact that constructor functions for <code>Error</code>, <code>Array</code>, and the like use ECMAScript 6’s <code>new.target</code> to adjust the prototype chain;\nhowever, there is no way to ensure a value for <code>new.target</code> when invoking a constructor in ECMAScript 5.\nOther downlevel compilers generally have the same limitation by default.</p>\n<p>For a subclass like the following:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class MsgError extends Error {\n  constructor(m: string) {\n    super(m);\n  }\n  sayHello() {\n    return \"hello \" + this.message;\n  }\n}\n</code></pre>\n<p>you may find that:</p>\n<ul>\n<li>methods may be <code>undefined</code> on objects returned by constructing these subclasses, so calling <code>sayHello</code> will result in an error.</li>\n<li><code>instanceof</code> will be broken between instances of the subclass and their instances, so <code>(new MsgError()) instanceof MsgError</code> will return <code>false</code>.</li>\n</ul>\n<p>As a recommendation, you can manually adjust the prototype immediately after any <code>super(...)</code> calls.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class MsgError extends Error {\n  constructor(m: string) {\n    super(m);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, MsgError.prototype);\n  }\n\n  sayHello() {\n    return \"hello \" + this.message;\n  }\n}\n</code></pre>\n<p>However, any subclass of <code>MsgError</code> will have to manually set the prototype as well.\nFor runtimes that don’t support <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a>, you may instead be able to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>__proto__</code></a>.</p>\n<p>Unfortunately, <a href=\"https://msdn.microsoft.com/en-us/library/s4esdbwz(v=vs.94).aspx\">these workarounds will not work on Internet Explorer 10 and prior</a>.\nOne can manually copy methods from the prototype onto the instance itself (i.e. <code>MsgError.prototype</code> onto <code>this</code>), but the prototype chain itself cannot be fixed.</p>\n<h2 id=\"member-visibility\" style=\"position:relative;\"><a href=\"#member-visibility\" aria-label=\"member visibility permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Member Visibility</h2>\n<p>You can use TypeScript to control whether certain methods or properties are visible to code outside the class.</p>\n<h3 id=\"public\" style=\"position:relative;\"><a href=\"#public\" aria-label=\"public permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>public</code></h3>\n<p>The default visibility of class members is <code>public</code>.\nA <code>public</code> member can be accessed by anywhere:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Greeter {\n  public greet() {\n    console.log(\"hi!\");\n  }\n}\nconst g = new Greeter();\ng.greet();\n</code></pre>\n<p>Because <code>public</code> is already the default visibility modifier, you don’t ever <em>need</em> to write it on a class member, but might choose to do so for style/readability reasons.</p>\n<h3 id=\"protected\" style=\"position:relative;\"><a href=\"#protected\" aria-label=\"protected permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>protected</code></h3>\n<p><code>protected</code> members are only visible to subclasses of the class they’re declared in.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2445\nclass Greeter {\n  public greet() {\n    console.log(\"Hello, \" + this.getName());\n  }\n  protected getName() {\n    return \"hi\";\n  }\n}\n\nclass SpecialGreeter extends Greeter {\n  public howdy() {\n    // OK to access protected member here\n    console.log(\"Howdy, \" + this.getName());\n    //                          ^^^^^^^^^^^^^^\n  }\n}\nconst g = new SpecialGreeter();\ng.greet(); // OK\ng.getName();\n</code></pre>\n<h4 id=\"exposure-of-protected-members\" style=\"position:relative;\"><a href=\"#exposure-of-protected-members\" aria-label=\"exposure of protected members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exposure of <code>protected</code> members</h4>\n<p>Derived classes need to follow their base class contracts, but may choose to expose a subtype of base class with more capabilities.\nThis includes making <code>protected</code> members <code>public</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Base {\n  protected m = 10;\n}\nclass Derived extends Base {\n  // No modifier, so default is 'public'\n  m = 15;\n}\nconst d = new Derived();\nconsole.log(d.m); // OK\n</code></pre>\n<p>Note that <code>Derived</code> was already able to freely read and write <code>m</code>, so this doesn’t meaningfully alter the “security” of this situation.\nThe main thing to note here is that in the derived class, we need to be careful to repeat the <code>protected</code> modifier if this exposure isn’t intentional.</p>\n<h4 id=\"cross-hierarchy-protected-access\" style=\"position:relative;\"><a href=\"#cross-hierarchy-protected-access\" aria-label=\"cross hierarchy protected access permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross-hierarchy <code>protected</code> access</h4>\n<p>Different OOP languages disagree about whether it’s legal to access a <code>protected</code> member through a base class reference:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2446\nclass Base {\n  protected x: number = 1;\n}\nclass Derived1 extends Base {\n  protected x: number = 5;\n}\nclass Derived2 extends Base {\n  f1(other: Derived2) {\n    other.x = 10;\n  }\n  f2(other: Base) {\n    other.x = 10;\n  }\n}\n</code></pre>\n<p>Java, for example, considers this to be legal.\nOn the other hand, C# and C++ chose that this code should be illegal.</p>\n<p>TypeScript sides with C# and C++ here, because accessing <code>x</code> in <code>Derived2</code> should only be legal from <code>Derived2</code>’s subclasses, and <code>Derived1</code> isn’t one of them.\nMoreover, if accessing <code>x</code> through a <code>Derived2</code> reference is illegal (which it certainly should be!), then accessing it through a base class reference should never improve the situation.</p>\n<p>See also <a href=\"https://blogs.msdn.microsoft.com/ericlippert/2005/11/09/why-cant-i-access-a-protected-member-from-a-derived-class/\">Why Can’t I Access A Protected Member From A Derived Class?</a> which explains more of C#‘s reasoning.</p>\n<h3 id=\"private\" style=\"position:relative;\"><a href=\"#private\" aria-label=\"private permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>private</code></h3>\n<p><code>private</code> is like <code>protected</code>, but doesn’t allow access to the member even from subclasses:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2341\nclass Base {\n  private x = 0;\n}\nconst b = new Base();\n// Can't access from outside the class\nconsole.log(b.x);\n</code></pre>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2341\nclass Base {\n  private x = 0;\n}\n// ---cut---\nclass Derived extends Base {\n  showX() {\n    // Can't access in subclasses\n    console.log(this.x);\n  }\n}\n</code></pre>\n<p>Because <code>private</code> members aren’t visible to derived classes, a derived class can’t increase its visibility:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2415\nclass Base {\n  private x = 0;\n}\nclass Derived extends Base {\n  x = 1;\n}\n</code></pre>\n<h4 id=\"cross-instance-private-access\" style=\"position:relative;\"><a href=\"#cross-instance-private-access\" aria-label=\"cross instance private access permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross-instance <code>private</code> access</h4>\n<p>Different OOP languages disagree about whether different instances of the same class may access each others’ <code>private</code> members.\nWhile languages like Java, C#, C++, Swift, and PHP allow this, Ruby does not.</p>\n<p>TypeScript does allow cross-instance <code>private</code> access:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class A {\n  private x = 10;\n\n  public sameAs(other: A) {\n    // No error\n    return other.x === this.x;\n  }\n}\n</code></pre>\n<h4 id=\"caveats\" style=\"position:relative;\"><a href=\"#caveats\" aria-label=\"caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats</h4>\n<p>Like other aspects of TypeScript’s type system, <code>private</code> and <code>protected</code> are only enforced during type checking.\nThis means that JavaScript runtime constructs like <code>in</code> or simple property lookup can still access a <code>private</code> or <code>protected</code> member:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class MySafe {\n  private secretKey = 12345;\n}\n</code></pre>\n<pre><code class=\"language-js\">// In a JavaScript file...\nconst s = new MySafe();\n// Will print 12345\nconsole.log(s.secretKey);\n</code></pre>\n<p>If you need to protect values in your class from malicious actors, you should use mechanisms that offer hard runtime privacy, such as closures, weak maps, or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">private fields</a>.</p>\n<h2 id=\"static-members\" style=\"position:relative;\"><a href=\"#static-members\" aria-label=\"static members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Members</h2>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static'>Static Members (MDN)</a><br/>\n   </p>\n</blockquote>\n<p>Classes may have <code>static</code> members.\nThese members aren’t associated with a particular instance of the class.\nThey can be accessed through the class constructor object itself:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class MyClass {\n  static x = 0;\n  static printX() {\n    console.log(MyClass.x);\n  }\n}\nconsole.log(MyClass.x);\nMyClass.printX();\n</code></pre>\n<p>Static members can also use the same <code>public</code>, <code>protected</code>, and <code>private</code> visibility modifiers:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2341\nclass MyClass {\n  private static x = 0;\n}\nconsole.log(MyClass.x);\n</code></pre>\n<p>Static members are also inherited:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Base {\n  static getGreeting() {\n    return \"Hello world\";\n  }\n}\nclass Derived extends Base {\n  myGreeting = Derived.getGreeting();\n}\n</code></pre>\n<h3 id=\"special-static-names\" style=\"position:relative;\"><a href=\"#special-static-names\" aria-label=\"special static names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Special Static Names</h3>\n<p>It’s generally not safe/possible to overwrite properties from the <code>Function</code> prototype.\nBecause classes are themselves functions that can be invoked with <code>new</code>, certain <code>static</code> names can’t be used.\nFunction properties like <code>name</code>, <code>length</code>, and <code>call</code> aren’t valid to define as <code>static</code> members:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2699\nclass S {\n  static name = \"S!\";\n}\n</code></pre>\n<h3 id=\"why-no-static-classes\" style=\"position:relative;\"><a href=\"#why-no-static-classes\" aria-label=\"why no static classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why No Static Classes?</h3>\n<p>TypeScript (and JavaScript) don’t have a construct called <code>static class</code> the same way C# and Java do.</p>\n<p>Those constructs <em>only</em> exist because those languages force all data and functions to be inside a class; because that restriction doesn’t exist in TypeScript, there’s no need for them.\nA class with only a single instance is typically just represented as a normal <em>object</em> in JavaScript/TypeScript.</p>\n<p>For example, we don’t need a “static class” syntax in TypeScript because a regular object (or even top-level function) will do the job just as well:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Unnecessary \"static\" class\nclass MyStaticClass {\n  static doSomething() {}\n}\n\n// Preferred (alternative 1)\nfunction doSomething() {}\n\n// Preferred (alternative 2)\nconst MyHelperObject = {\n  dosomething() {},\n};\n</code></pre>\n<h2 id=\"generic-classes\" style=\"position:relative;\"><a href=\"#generic-classes\" aria-label=\"generic classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Classes</h2>\n<p>Classes, much like interfaces, can be generic.\nWhen a generic class is instantiated with <code>new</code>, its type parameters are inferred the same way as in a function call:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Box&#x3C;Type> {\n  contents: Type;\n  constructor(value: Type) {\n    this.contents = value;\n  }\n}\n\nconst b = new Box(\"hello!\");\n//    ^?\n</code></pre>\n<p>Classes can use generic constraints and defaults the same way as interfaces.</p>\n<h3 id=\"type-parameters-in-static-members\" style=\"position:relative;\"><a href=\"#type-parameters-in-static-members\" aria-label=\"type parameters in static members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Parameters in Static Members</h3>\n<p>This code isn’t legal, and it may not be obvious why:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2302\nclass Box&#x3C;Type> {\n  static defaultValue: Type;\n}\n</code></pre>\n<p>Remember that types are always fully erased!\nAt runtime, there’s only <em>one</em> <code>Box.defaultValue</code> property slot.\nThis means that setting <code>Box&#x3C;string>.defaultValue</code> (if that were possible) would <em>also</em> change <code>Box&#x3C;number>.defaultValue</code> - not good.\nThe <code>static</code> members of a generic class can never refer to the class’s type parameters.</p>\n<h2 id=\"this-at-runtime-in-classes\" style=\"position:relative;\"><a href=\"#this-at-runtime-in-classes\" aria-label=\"this at runtime in classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> at Runtime in Classes</h2>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this'>this keyword (MDN)</a><br/>\n   </p>\n</blockquote>\n<p>It’s important to remember that TypeScript doesn’t change the runtime behavior of JavaScript, and that JavaScript is somewhat famous for having some peculiar runtime behaviors.</p>\n<p>JavaScript’s handling of <code>this</code> is indeed unusual:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class MyClass {\n  name = \"MyClass\";\n  getName() {\n    return this.name;\n  }\n}\nconst c = new MyClass();\nconst obj = {\n  name: \"obj\",\n  getName: c.getName,\n};\n\n// Prints \"obj\", not \"MyClass\"\nconsole.log(obj.getName());\n</code></pre>\n<p>Long story short, by default, the value of <code>this</code> inside a function depends on <em>how the function was called</em>.\nIn this example, because the function was called through the <code>obj</code> reference, its value of <code>this</code> was <code>obj</code> rather than the class instance.</p>\n<p>This is rarely what you want to happen!\nTypeScript provides some ways to mitigate or prevent this kind of error.</p>\n<h3 id=\"arrow-functions\" style=\"position:relative;\"><a href=\"#arrow-functions\" aria-label=\"arrow functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrow Functions</h3>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions'>Arrow functions (MDN)</a><br/>\n   </p>\n</blockquote>\n<p>If you have a function that will often be called in a way that loses its <code>this</code> context, it can make sense to use an arrow function property instead of a method definition:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class MyClass {\n  name = \"MyClass\";\n  getName = () => {\n    return this.name;\n  };\n}\nconst c = new MyClass();\nconst g = c.getName;\n// Prints \"MyClass\" instead of crashing\nconsole.log(g());\n</code></pre>\n<p>This has some trade-offs:</p>\n<ul>\n<li>The <code>this</code> value is guaranteed to be correct at runtime, even for code not checked with TypeScript</li>\n<li>This will use more memory, because each class instance will have its own copy of each function defined this way</li>\n<li>You can’t use <code>super.getName</code> in a derived class, because there’s no entry in the prototype chain to fetch the base class method from</li>\n</ul>\n<h3 id=\"this-parameters\" style=\"position:relative;\"><a href=\"#this-parameters\" aria-label=\"this parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> parameters</h3>\n<p>In a method or function definition, an initial parameter named <code>this</code> has special meaning in TypeScript.\nThese parameters are erased during compilation:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type SomeType = any;\n// ---cut---\n// TypeScript input with 'this' parameter\nfunction fn(this: SomeType, x: number) {\n  /* ... */\n}\n</code></pre>\n<pre><code class=\"language-js\">// JavaScript output\nfunction fn(x) {\n  /* ... */\n}\n</code></pre>\n<p>TypeScript checks that calling a function with a <code>this</code> parameter is done so with a correct context.\nInstead of using an arrow function, we can add a <code>this</code> parameter to method definitions to statically enforce that the method is called correctly:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2684\nclass MyClass {\n  name = \"MyClass\";\n  getName(this: MyClass) {\n    return this.name;\n  }\n}\nconst c = new MyClass();\n// OK\nc.getName();\n\n// Error, would crash\nconst g = c.getName;\nconsole.log(g());\n</code></pre>\n<p>This method takes the opposite trade-offs of the arrow function approach:</p>\n<ul>\n<li>JavaScript callers might still use the class method incorrectly without realizing it</li>\n<li>Only one function per class definition gets allocated, rather than one per class instance</li>\n<li>Base method definitions can still be called via <code>super.</code></li>\n</ul>\n<h2 id=\"this-types\" style=\"position:relative;\"><a href=\"#this-types\" aria-label=\"this types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> Types</h2>\n<p>In classes, a special type called <code>this</code> refers <em>dynamically</em> to the type of the current class.\nLet’s see how this is useful:</p>\n<!-- prettier-ignore -->\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Box {\n  contents: string = \"\";\n  set(value: string) {\n//  ^?\n    this.contents = value;\n    return this;\n  }\n}\n</code></pre>\n<p>Here, TypeScript inferred the return type of <code>set</code> to be <code>this</code>, rather than <code>Box</code>.\nNow let’s make a subclass of <code>Box</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Box {\n  contents: string = \"\";\n  set(value: string) {\n    this.contents = value;\n    return this;\n  }\n}\n// ---cut---\nclass ClearableBox extends Box {\n  clear() {\n    this.contents = \"\";\n  }\n}\n\nconst a = new ClearableBox();\nconst b = a.set(\"hello\");\n//    ^?\n</code></pre>\n<p>You can also use <code>this</code> in a parameter type annotation:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Box {\n  content: string = \"\";\n  sameAs(other: this) {\n    return other.content === this.content;\n  }\n}\n</code></pre>\n<p>This is different from writing <code>other: Box</code> — if you have a derived class, its <code>sameAs</code> method will now only accept other instances of that same derived class:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\nclass Box {\n  content: string = \"\";\n  sameAs(other: this) {\n    return other.content === this.content;\n  }\n}\n\nclass DerivedBox extends Box {\n  otherContent: string = \"?\";\n}\n\nconst base = new Box();\nconst derived = new DerivedBox();\nderived.sameAs(base);\n</code></pre>\n<h3 id=\"this-based-type-guards\" style=\"position:relative;\"><a href=\"#this-based-type-guards\" aria-label=\"this based type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code>-based type guards</h3>\n<p>You can use <code>this is Type</code> in the return position for methods in classes and interfaces.\nWhen mixed with a type narrowing (e.g. <code>if</code> statements) the type of the target object would be narrowed to the specified <code>Type</code>.</p>\n<!-- prettier-ignore -->\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strictPropertyInitialization: false\nclass FileSystemObject {\n  isFile(): this is FileRep {\n    return this instanceof FileRep;\n  }\n  isDirectory(): this is Directory {\n    return this instanceof Directory;\n  }\n  isNetworked(): this is Networked &#x26; this {\n    return this.networked;\n  }\n  constructor(public path: string, private networked: boolean) {}\n}\n\nclass FileRep extends FileSystemObject {\n  constructor(path: string, public content: string) {\n    super(path, false);\n  }\n}\n\nclass Directory extends FileSystemObject {\n  children: FileSystemObject[];\n}\n\ninterface Networked {\n  host: string;\n}\n\nconst fso: FileSystemObject = new FileRep(\"foo/bar.txt\", \"foo\");\n\nif (fso.isFile()) {\n  fso.content;\n// ^?\n} else if (fso.isDirectory()) {\n  fso.children;\n// ^?\n} else if (fso.isNetworked()) {\n  fso.host;\n// ^?\n}\n</code></pre>\n<p>A common use-case for a this-based type guard is to allow for lazy validation of a particular field. For example, this case removes an <code>undefined</code> from the value held inside box when <code>hasValue</code> has been verified to be true:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Box&#x3C;T> {\n  value?: T;\n\n  hasValue(): this is { value: T } {\n    return this.value !== undefined;\n  }\n}\n\nconst box = new Box();\nbox.value = \"Gameboy\";\n\nbox.value;\n//  ^?\n\nif (box.hasValue()) {\n  box.value;\n  //  ^?\n}\n</code></pre>\n<h2 id=\"parameter-properties\" style=\"position:relative;\"><a href=\"#parameter-properties\" aria-label=\"parameter properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Properties</h2>\n<p>TypeScript offers special syntax for turning a constructor parameter into a class property with the same name and value.\nThese are called <em>parameter properties</em> and are created by prefixing a constructor argument with one of the visibility modifiers <code>public</code>, <code>private</code>, <code>protected</code>, or <code>readonly</code>.\nThe resulting field gets those modifier(s):</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2341\nclass Params {\n  constructor(\n    public readonly x: number,\n    protected y: number,\n    private z: number\n  ) {\n    // No body necessary\n  }\n}\nconst a = new Params(1, 2, 3);\nconsole.log(a.x);\n//            ^?\nconsole.log(a.z);\n</code></pre>\n<h2 id=\"class-expressions\" style=\"position:relative;\"><a href=\"#class-expressions\" aria-label=\"class expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Expressions</h2>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class'>Class expressions (MDN)</a><br/>\n   </p>\n</blockquote>\n<p>Class expressions are very similar to class declarations.\nThe only real difference is that class expressions don’t need a name, though we can refer to them via whatever identifier they ended up bound to:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const someClass = class&#x3C;Type> {\n  content: Type;\n  constructor(value: Type) {\n    this.content = value;\n  }\n};\n\nconst m = new someClass(\"Hello, world\");\n//    ^?\n</code></pre>\n<h2 id=\"abstract-classes-and-members\" style=\"position:relative;\"><a href=\"#abstract-classes-and-members\" aria-label=\"abstract classes and members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>abstract</code> Classes and Members</h2>\n<p>Classes, methods, and fields in TypeScript may be <em>abstract</em>.</p>\n<p>An <em>abstract method</em> or <em>abstract field</em> is one that hasn’t had an implementation provided.\nThese members must exist inside an <em>abstract class</em>, which cannot be directly instantiated.</p>\n<p>The role of abstract classes is to serve as a base class for subclasses which do implement all the abstract members.\nWhen a class doesn’t have any abstract members, it is said to be <em>concrete</em>.</p>\n<p>Let’s look at an example</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2511\nabstract class Base {\n  abstract getName(): string;\n\n  printName() {\n    console.log(\"Hello, \" + this.getName());\n  }\n}\n\nconst b = new Base();\n</code></pre>\n<p>We can’t instantiate <code>Base</code> with <code>new</code> because it’s abstract.\nInstead, we need to make a derived class and implement the abstract members:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">abstract class Base {\n  abstract getName(): string;\n  printName() {}\n}\n// ---cut---\nclass Derived extends Base {\n  getName() {\n    return \"world\";\n  }\n}\n\nconst d = new Derived();\nd.printName();\n</code></pre>\n<p>Notice that if we forget to implement the base class’s abstract members, we’ll get an error:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2515\nabstract class Base {\n  abstract getName(): string;\n  printName() {}\n}\n// ---cut---\nclass Derived extends Base {\n  // forgot to do anything\n}\n</code></pre>\n<h3 id=\"abstract-construct-signatures\" style=\"position:relative;\"><a href=\"#abstract-construct-signatures\" aria-label=\"abstract construct signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abstract Construct Signatures</h3>\n<p>Sometimes you want to accept some class constructor function that produces an instance of a class which derives from some abstract class.</p>\n<p>For example, you might want to write this code:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2511\nabstract class Base {\n  abstract getName(): string;\n  printName() {}\n}\nclass Derived extends Base {\n  getName() {\n    return \"\";\n  }\n}\n// ---cut---\nfunction greet(ctor: typeof Base) {\n  const instance = new ctor();\n  instance.printName();\n}\n</code></pre>\n<p>TypeScript is correctly telling you that you’re trying to instantiate an abstract class.\nAfter all, given the definition of <code>greet</code>, it’s perfectly legal to write this code, which would end up constructing an abstract class:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare const greet: any, Base: any;\n// ---cut---\n// Bad!\ngreet(Base);\n</code></pre>\n<p>Instead, you want to write a function that accepts something with a construct signature:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\nabstract class Base {\n  abstract getName(): string;\n  printName() {}\n}\nclass Derived extends Base {\n  getName() {\n    return \"\";\n  }\n}\n// ---cut---\nfunction greet(ctor: new () => Base) {\n  const instance = new ctor();\n  instance.printName();\n}\ngreet(Derived);\ngreet(Base);\n</code></pre>\n<p>Now TypeScript correctly tells you about which class constructor functions can be invoked - <code>Derived</code> can because it’s concrete, but <code>Base</code> cannot.</p>\n<h2 id=\"relationships-between-classes\" style=\"position:relative;\"><a href=\"#relationships-between-classes\" aria-label=\"relationships between classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relationships Between Classes</h2>\n<p>In most cases, classes in TypeScript are compared structurally, the same as other types.</p>\n<p>For example, these two classes can be used in place of each other because they’re identical:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Point1 {\n  x = 0;\n  y = 0;\n}\n\nclass Point2 {\n  x = 0;\n  y = 0;\n}\n\n// OK\nconst p: Point1 = new Point2();\n</code></pre>\n<p>Similarly, subtype relationships between classes exist even if there’s no explicit inheritance:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nclass Person {\n  name: string;\n  age: number;\n}\n\nclass Employee {\n  name: string;\n  age: number;\n  salary: number;\n}\n\n// OK\nconst p: Person = new Employee();\n</code></pre>\n<p>This sounds straightforward, but there are a few cases that seem stranger than others.</p>\n<p>Empty classes have no members.\nIn a structural type system, a type with no members is generally a supertype of anything else.\nSo if you write an empty class (don’t!), anything can be used in place of it:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Empty {}\n\nfunction fn(x: Empty) {\n  // can't do anything with 'x', so I won't\n}\n\n// All OK!\nfn(window);\nfn({});\nfn(fn);\n</code></pre>","headings":[{"value":"Class Members","depth":2},{"value":"Fields","depth":3},{"value":"--strictPropertyInitialization","depth":4},{"value":"readonly","depth":3},{"value":"Constructors","depth":3},{"value":"Super Calls","depth":4},{"value":"Methods","depth":3},{"value":"Getters / Setters","depth":3},{"value":"Index Signatures","depth":3},{"value":"Class Heritage","depth":2},{"value":"implements Clauses","depth":3},{"value":"Cautions","depth":4},{"value":"extends Clauses","depth":3},{"value":"Overriding Methods","depth":4},{"value":"Initialization Order","depth":4},{"value":"Inheriting Built-in Types","depth":4},{"value":"Member Visibility","depth":2},{"value":"public","depth":3},{"value":"protected","depth":3},{"value":"Exposure of protected members","depth":4},{"value":"Cross-hierarchy protected access","depth":4},{"value":"private","depth":3},{"value":"Cross-instance private access","depth":4},{"value":"Caveats","depth":4},{"value":"Static Members","depth":2},{"value":"Special Static Names","depth":3},{"value":"Why No Static Classes?","depth":3},{"value":"Generic Classes","depth":2},{"value":"Type Parameters in Static Members","depth":3},{"value":"this at Runtime in Classes","depth":2},{"value":"Arrow Functions","depth":3},{"value":"this parameters","depth":3},{"value":"this Types","depth":2},{"value":"this-based type guards","depth":3},{"value":"Parameter Properties","depth":2},{"value":"Class Expressions","depth":2},{"value":"abstract Classes and Members","depth":2},{"value":"Abstract Construct Signatures","depth":3},{"value":"Relationships Between Classes","depth":2}],"frontmatter":{"permalink":"/docs/handbook/2/classes.html","title":"Classes","disable_toc":null,"handbook":null,"oneline":"How classes work in TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":{"childMarkdownRemark":{"frontmatter":{"title":"Modules","oneline":"How JavaScript handles communicating across file boundaries.","permalink":"/docs/handbook/2/modules.html"}}}},"pageContext":{"id":"1-classes","slug":"/docs/handbook/2/classes.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Classes.md","nextID":"bbcff436-84a9-536c-b0ae-4354642d1c4c","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}