{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/objects.html","result":{"data":{"markdownRemark":{"id":"1e0b2012-601e-56d5-a7ee-1e3751a80168","excerpt":"In JavaScript, the fundamental way that we group and pass around data is through objects.\nIn TypeScript, we represent those through object types. As we’ve seen…","html":"<p>In JavaScript, the fundamental way that we group and pass around data is through objects.\nIn TypeScript, we represent those through <em>object types</em>.</p>\n<p>As we’ve seen, they can be anonymous:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function greet(person: { name: string; age: number }) {\n  //                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  return \"Hello \" + person.name;\n}\n</code></pre>\n<p>or they can be named by using either an interface</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Person {\n  //      ^^^^^^\n  name: string;\n  age: number;\n}\n\nfunction greet(person: Person) {\n  return \"Hello \" + person.name;\n}\n</code></pre>\n<p>or a type alias.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Person = {\n  // ^^^^^^\n  name: string;\n  age: number;\n};\n\nfunction greet(person: Person) {\n  return \"Hello \" + person.name;\n}\n</code></pre>\n<p>In all three examples above, we’ve written functions that take objects that contain the property <code>name</code> (which must be a <code>string</code>) and <code>age</code> (which must be a <code>number</code>).</p>\n<h2 id=\"property-modifiers\" style=\"position:relative;\"><a href=\"#property-modifiers\" aria-label=\"property modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property Modifiers</h2>\n<p>Each property in an object type can specify a couple of things: the type, whether the property is optional, and whether the property can be written to.</p>\n<h3 id=\"optional-properties\" style=\"position:relative;\"><a href=\"#optional-properties\" aria-label=\"optional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Properties</h3>\n<p>Much of the time, we’ll find ourselves dealing with objects that <em>might</em> have a property set.\nIn those cases, we can mark those properties as <em>optional</em> by adding a question mark (<code>?</code>) to the end of their names.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Shape {}\ndeclare function getShape(): Shape;\n\n// ---cut---\ninterface PaintOptions {\n  shape: Shape;\n  xPos?: number;\n  //  ^\n  yPos?: number;\n  //  ^\n}\n\nfunction paintShape(opts: PaintOptions) {\n  // ...\n}\n\nconst shape = getShape();\npaintShape({ shape });\npaintShape({ shape, xPos: 100 });\npaintShape({ shape, yPos: 100 });\npaintShape({ shape, xPos: 100, yPos: 100 });\n</code></pre>\n<p>In this example, both <code>xPos</code> and <code>yPos</code> are considered optional.\nWe can choose to provide either of them, so every call above to <code>paintShape</code> is valid.\nAll optionality really says is that if the property <em>is</em> set, it better have a specific type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Shape {}\ndeclare function getShape(): Shape;\n\n// ---cut---\ninterface PaintOptions {\n  shape: Shape;\n  xPos?: number;\n  //  ^\n  yPos?: number;\n  //  ^\n}\n\nfunction paintShape(opts: PaintOptions) {\n  // ...\n}\n\nconst shape = getShape();\npaintShape({ shape });\npaintShape({ shape, xPos: 100 });\n</code></pre>\n<p>We can also read from those properties - but when we do under <code>strictNullChecks</code>, TypeScript will tell us they’re potentially <code>undefined</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Shape {}\ndeclare function getShape(): Shape;\n\ninterface PaintOptions {\n  shape: Shape;\n  xPos?: number;\n  yPos?: number;\n}\n\n// ---cut---\nfunction paintShape(opts: PaintOptions) {\n  let xPos = opts.xPos;\n  //              ^?\n  let yPos = opts.yPos;\n  //              ^?\n  // ...\n}\n</code></pre>\n<p>In JavaScript, even if the property has never been set, we can still access it - it’s just going to give us the value <code>undefined</code>.\nWe can just handle <code>undefined</code> specially.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Shape {}\ndeclare function getShape(): Shape;\n\ninterface PaintOptions {\n  shape: Shape;\n  xPos?: number;\n  yPos?: number;\n}\n\n// ---cut---\nfunction paintShape(opts: PaintOptions) {\n  let xPos = opts.xPos === undefined ? 0 : opts.xPos;\n  //  ^?\n  let yPos = opts.yPos === undefined ? 0 : opts.yPos;\n  //  ^?\n  // ...\n}\n</code></pre>\n<p>Note that this pattern of setting defaults for unspecified values is so common that JavaScript has syntax to support it.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Shape {}\ndeclare function getShape(): Shape;\n\ninterface PaintOptions {\n  shape: Shape;\n  xPos?: number;\n  yPos?: number;\n}\n\n// ---cut---\nfunction paintShape({ shape, xPos = 0, yPos = 0 }: PaintOptions) {\n  console.log(\"x coordinate at\", xPos);\n  //                             ^?\n  console.log(\"y coordinate at\", yPos);\n  //                             ^?\n  // ...\n}\n</code></pre>\n<p>Here we used <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">a destructuring pattern</a> for <code>paintShape</code>’s parameter, and provided <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Default_values\">default values</a> for <code>xPos</code> and <code>yPos</code>.\nNow <code>xPos</code> and <code>yPos</code> are both definitely present within the body of <code>paintShape</code>, but optional for any callers to <code>paintShape</code>.</p>\n<blockquote>\n<p>Note that there is currently no way to place type annotations within destructuring patterns.\nThis is because the following syntax already means something different in JavaScript.</p>\n</blockquote>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: false\n// @errors: 2552 2304\ninterface Shape {}\ndeclare function render(x: unknown);\n// ---cut---\nfunction draw({ shape: Shape, xPos: number = 100 /*...*/ }) {\n  render(shape);\n  render(xPos);\n}\n</code></pre>\n<p>In an object destructuring pattern, <code>shape: Shape</code> means “grab the property <code>shape</code> and redefine it locally as a variable named <code>Shape</code>.\nLikewise <code>xPos: number</code> creates a variable named <code>number</code> whose value is based on the parameter’s <code>xPos</code>.</p>\n<h3 id=\"readonly-properties\" style=\"position:relative;\"><a href=\"#readonly-properties\" aria-label=\"readonly properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code> Properties</h3>\n<p>Properties can also be marked as <code>readonly</code> for TypeScript.\nWhile it won’t change any behavior at runtime, a property marked as <code>readonly</code> can’t be written to during type-checking.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2540\ninterface SomeType {\n  readonly prop: string;\n}\n\nfunction doSomething(obj: SomeType) {\n  // We can read from 'obj.prop'.\n  console.log(`prop has the value '${obj.prop}'.`);\n\n  // But we can't re-assign it.\n  obj.prop = \"hello\";\n}\n</code></pre>\n<p>Using the <code>readonly</code> modifier doesn’t necessarily imply that a value is totally immutable - or in other words, that its internal contents can’t be changed.\nIt just means the property itself can’t be re-written to.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2540\ninterface Home {\n  readonly resident: { name: string; age: number };\n}\n\nfunction visitForBirthday(home: Home) {\n  // We can read and update properties from 'home.resident'.\n  console.log(`Happy birthday ${home.resident.name}!`);\n  home.resident.age++;\n}\n\nfunction evict(home: Home) {\n  // But we can't write to the 'resident' property itself on a 'Home'.\n  home.resident = {\n    name: \"Victor the Evictor\",\n    age: 42,\n  };\n}\n</code></pre>\n<p>It’s important to manage expectations of what <code>readonly</code> implies.\nIt’s useful to signal intent during development time for TypeScript on how an object should be used.\nTypeScript doesn’t factor in whether properties on two types are <code>readonly</code> when checking whether those types are compatible, so <code>readonly</code> properties can also change via aliasing.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Person {\n  name: string;\n  age: number;\n}\n\ninterface ReadonlyPerson {\n  readonly name: string;\n  readonly age: number;\n}\n\nlet writablePerson: Person = {\n  name: \"Person McPersonface\",\n  age: 42,\n};\n\n// works\nlet readonlyPerson: ReadonlyPerson = writablePerson;\n\nconsole.log(readonlyPerson.age); // prints '42'\nwritablePerson.age++;\nconsole.log(readonlyPerson.age); // prints '43'\n</code></pre>\n<h3 id=\"index-signatures\" style=\"position:relative;\"><a href=\"#index-signatures\" aria-label=\"index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index Signatures</h3>\n<p>Sometimes you don’t know all the names of a type’s properties ahead of time, but you do know the shape of the values.</p>\n<p>In those cases you can use an index signature to describe the types of possible values, for example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function getStringArray(): StringArray;\n// ---cut---\ninterface StringArray {\n  [index: number]: string;\n}\n\nconst myArray: StringArray = getStringArray();\nconst secondItem = myArray[1];\n//     ^?\n</code></pre>\n<p>Above, we have a <code>StringArray</code> interface which has an index signature.\nThis index signature states that when a <code>StringArray</code> is indexed with a <code>number</code>, it will return a <code>string</code>.</p>\n<p>An index signature property type must be either ‘string’ or ‘number’.</p>\n<details>\n    <summary>It is possible to support both types of indexers...</summary>\n    <p>It is possible to support both types of indexers, but the type returned from a numeric indexer must be a subtype of the type returned from the string indexer. This is because when indexing with a `number`, JavaScript will actually convert that to a `string` before indexing into an object. That means that indexing with `100` (a `number`) is the same thing as indexing with `\"100\"` (a `string`), so the two need to be consistent.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2413\n// @strictPropertyInitialization: false\ninterface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  breed: string;\n}\n\n// Error: indexing with a numeric string might get you a completely separate type of Animal!\ninterface NotOkay {\n  [x: number]: Animal;\n  [x: string]: Dog;\n}\n</code></pre>\n</details>\n<p>While string index signatures are a powerful way to describe the “dictionary” pattern, they also enforce that all properties match their return type.\nThis is because a string index declares that <code>obj.property</code> is also available as <code>obj[\"property\"]</code>.\nIn the following example, <code>name</code>’s type does not match the string index’s type, and the type checker gives an error:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2411\n// @errors: 2411\ninterface NumberDictionary {\n  [index: string]: number;\n\n  length: number; // ok\n  name: string;\n}\n</code></pre>\n<p>However, properties of different types are acceptable if the index signature is a union of the property types:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface NumberOrStringDictionary {\n  [index: string]: number | string;\n  length: number; // ok, length is a number\n  name: string; // ok, name is a string\n}\n</code></pre>\n<p>Finally, you can make index signatures <code>readonly</code> in order to prevent assignment to their indices:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function getReadOnlyStringArray(): ReadonlyStringArray;\n// ---cut---\n// @errors: 2542\ninterface ReadonlyStringArray {\n  readonly [index: number]: string;\n}\n\nlet myArray: ReadonlyStringArray = getReadOnlyStringArray();\nmyArray[2] = \"Mallory\";\n</code></pre>\n<p>You can’t set <code>myArray[2]</code> because the index signature is <code>readonly</code>.</p>\n<h2 id=\"extending-types\" style=\"position:relative;\"><a href=\"#extending-types\" aria-label=\"extending types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending Types</h2>\n<p>It’s pretty common to have types that might be more specific versions of other types.\nFor example, we might have a <code>BasicAddress</code> type that describes the fields necessary for sending letters and packages in the U.S.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface BasicAddress {\n  name?: string;\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n}\n</code></pre>\n<p>In some situations that’s enough, but addresses often have a unit number associated with them if the building at an address has multiple units.\nWe can then describe an <code>AddressWithUnit</code>.</p>\n<!-- prettier-ignore -->\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface AddressWithUnit {\n  name?: string;\n  unit: string;\n//^^^^^^^^^^^^^\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n}\n</code></pre>\n<p>This does the job, but the downside here is that we had to repeat all the other fields from <code>BasicAddress</code> when our changes were purely additive.\nInstead, we can extend the original <code>BasicAddress</code> type and just add the new fields that are unique to <code>AddressWithUnit</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface BasicAddress {\n  name?: string;\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n}\n\ninterface AddressWithUnit extends BasicAddress {\n  unit: string;\n}\n</code></pre>\n<p>The <code>extends</code> keyword on an <code>interface</code> allows us to effectively copy members from other named types, and add whatever new members we want.\nThis can be useful for cutting down the amount of type declaration boilerplate we have to write, and for signaling intent that several different declarations of the same property might be related.\nFor example, <code>AddressWithUnit</code> didn’t need to repeat the <code>street</code> property, and because <code>street</code> originates from <code>BasicAddress</code>, a reader will know that those two types are related in some way.</p>\n<p><code>interface</code>s can also extend from multiple types.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Colorful {\n  color: string;\n}\n\ninterface Circle {\n  radius: number;\n}\n\ninterface ColorfulCircle extends Colorful, Circle {}\n\nconst cc: ColorfulCircle = {\n  color: \"red\",\n  radius: 42,\n};\n</code></pre>\n<h2 id=\"intersection-types\" style=\"position:relative;\"><a href=\"#intersection-types\" aria-label=\"intersection types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intersection Types</h2>\n<p><code>interface</code>s allowed us to build up new types from other types by extending them.\nTypeScript provides another construct called <em>intersection types</em> that is mainly used to combine existing object types.</p>\n<p>An intersection type is defined using the <code>&#x26;</code> operator.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Colorful {\n  color: string;\n}\ninterface Circle {\n  radius: number;\n}\n\ntype ColorfulCircle = Colorful &#x26; Circle;\n</code></pre>\n<p>Here, we’ve intersected <code>Colorful</code> and <code>Circle</code> to produce a new type that has all the members of <code>Colorful</code> <em>and</em> <code>Circle</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\ninterface Colorful {\n  color: string;\n}\ninterface Circle {\n  radius: number;\n}\n// ---cut---\nfunction draw(circle: Colorful &#x26; Circle) {\n  console.log(`Color was ${circle.color}`);\n  console.log(`Radius was ${circle.radius}`);\n}\n\n// okay\ndraw({ color: \"blue\", radius: 42 });\n\n// oops\ndraw({ color: \"red\", raidus: 42 });\n</code></pre>\n<h2 id=\"interfaces-vs-intersections\" style=\"position:relative;\"><a href=\"#interfaces-vs-intersections\" aria-label=\"interfaces vs intersections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interfaces vs. Intersections</h2>\n<p>We just looked at two ways to combine types which are similar, but are actually subtly different.\nWith interfaces, we could use an <code>extends</code> clause to extend from other types, and we were able to do something similar with intersections and name the result with a type alias.\nThe principle difference between the two is how conflicts are handled, and that difference is typically one of the main reasons why you’d pick one over the other between an interface and a type alias of an intersection type.</p>\n<!--\nFor example, two types can declare the same property in an interface.\n\nTODO -->\n<h2 id=\"generic-object-types\" style=\"position:relative;\"><a href=\"#generic-object-types\" aria-label=\"generic object types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Object Types</h2>\n<p>Let’s imagine a <code>Box</code> type that can contain any value - <code>string</code>s, <code>number</code>s, <code>Giraffe</code>s, whatever.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Box {\n  contents: any;\n}\n</code></pre>\n<p>Right now, the <code>contents</code> property is typed as <code>any</code>, which works, but can lead to accidents down the line.</p>\n<p>We could instead use <code>unknown</code>, but that would mean that in cases where we already know the type of <code>contents</code>, we’d need to do precautionary checks, or use error-prone type assertions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Box {\n  contents: unknown;\n}\n\nlet x: Box = {\n  contents: \"hello world\",\n};\n\n// we could check 'x.contents'\nif (typeof x.contents === \"string\") {\n  console.log(x.contents.toLowerCase());\n}\n\n// or we could use a type assertion\nconsole.log((x.contents as string).toLowerCase());\n</code></pre>\n<p>One type safe approach would be to instead scaffold out different <code>Box</code> types for every type of <code>contents</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\ninterface NumberBox {\n  contents: number;\n}\n\ninterface StringBox {\n  contents: string;\n}\n\ninterface BooleanBox {\n  contents: boolean;\n}\n</code></pre>\n<p>But that means we’ll have to create different functions, or overloads of functions, to operate on these types.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface NumberBox {\n  contents: number;\n}\n\ninterface StringBox {\n  contents: string;\n}\n\ninterface BooleanBox {\n  contents: boolean;\n}\n// ---cut---\nfunction setContents(box: StringBox, newContents: string): void;\nfunction setContents(box: NumberBox, newContents: number): void;\nfunction setContents(box: BooleanBox, newContents: boolean): void;\nfunction setContents(box: { contents: any }, newContents: any) {\n  box.contents = newContents;\n}\n</code></pre>\n<p>That’s a lot of boilerplate. Moreover, we might later need to introduce new types and overloads.\nThis is frustrating, since our box types and overloads are all effectively the same.</p>\n<p>Instead, we can make a <em>generic</em> <code>Box</code> type which declares a <em>type parameter</em>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Box&#x3C;Type> {\n  contents: Type;\n}\n</code></pre>\n<p>You might read this as “A <code>Box</code> of <code>Type</code> is something whose <code>contents</code> have type <code>Type</code>”.\nLater on, when we refer to <code>Box</code>, we have to give a <em>type argument</em> in place of <code>Type</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Box&#x3C;Type> {\n  contents: Type;\n}\n// ---cut---\nlet box: Box&#x3C;string>;\n</code></pre>\n<p>Think of <code>Box</code> as a template for a real type, where <code>Type</code> is a placeholder that will get replaced with some other type.\nWhen TypeScript sees <code>Box&#x3C;string></code>, it will replace every instance of <code>Type</code> in <code>Box&#x3C;Type></code> with <code>string</code>, and end up working with something like <code>{ contents: string }</code>.\nIn other words, <code>Box&#x3C;string></code> and our earlier <code>StringBox</code> work identically.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Box&#x3C;Type> {\n  contents: Type;\n}\ninterface StringBox {\n  contents: string;\n}\n\nlet boxA: Box&#x3C;string> = { contents: \"hello\" };\nboxA.contents;\n//   ^?\n\nlet boxB: StringBox = { contents: \"world\" };\nboxB.contents;\n//   ^?\n</code></pre>\n<p><code>Box</code> is reusable in that <code>Type</code> can be substituted with anything. That means that when we need a box for a new type, we don’t need to declare a new <code>Box</code> type at all (though we certainly could if we wanted to).</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Box&#x3C;Type> {\n  contents: Type;\n}\n\ninterface Apple {\n  // ....\n}\n\n// Same as '{ contents: Apple }'.\ntype AppleBox = Box&#x3C;Apple>;\n</code></pre>\n<p>This also means that we can avoid overloads entirely by instead using <a href=\"/docs/handbook/2/functions.html#generic-functions\">generic functions</a>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Box&#x3C;Type> {\n  contents: Type;\n}\n\n// ---cut---\nfunction setContents&#x3C;Type>(box: Box&#x3C;Type>, newContents: Type) {\n  box.contents = newContents;\n}\n</code></pre>\n<p>It is worth noting that type aliases can also be generic. We could have defined our new <code>Box&#x3C;Type></code> interface, which was:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Box&#x3C;Type> {\n  contents: Type;\n}\n</code></pre>\n<p>by using a type alias instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Box&#x3C;Type> = {\n  contents: Type;\n};\n</code></pre>\n<p>Since type aliases, unlike interfaces, can describe more than just object types, we can also use them to write other kinds of generic helper types.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2575\ntype OrNull&#x3C;Type> = Type | null;\n\ntype OneOrMany&#x3C;Type> = Type | Type[];\n\ntype OneOrManyOrNull&#x3C;Type> = OrNull&#x3C;OneOrMany&#x3C;Type>>;\n//   ^?\n\ntype OneOrManyOrNullStrings = OneOrManyOrNull&#x3C;string>;\n//   ^?\n</code></pre>\n<p>We’ll circle back to type aliases in just a little bit.</p>\n<h3 id=\"the-array-type\" style=\"position:relative;\"><a href=\"#the-array-type\" aria-label=\"the array type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>Array</code> Type</h3>\n<p>Generic object types are often some sort of container type that work independently of the type of elements they contain.\nIt’s ideal for data structures to work this way so that they’re re-usable across different data types.</p>\n<p>It turns out we’ve been working with a type just like that throughout this handbook: the <code>Array</code> type.\nWhenever we write out types like <code>number[]</code> or <code>string[]</code>, that’s really just a shorthand for <code>Array&#x3C;number></code> and <code>Array&#x3C;string></code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function doSomething(value: Array&#x3C;string>) {\n  // ...\n}\n\nlet myArray: string[] = [\"hello\", \"world\"];\n\n// either of these work!\ndoSomething(myArray);\ndoSomething(new Array(\"hello\", \"world\"));\n</code></pre>\n<p>Much like the <code>Box</code> type above, <code>Array</code> itself is a generic type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noLib: true\ninterface Number {}\ninterface String {}\ninterface Boolean {}\ninterface Symbol {}\n// ---cut---\ninterface Array&#x3C;Type> {\n  /**\n   * Gets or sets the length of the array.\n   */\n  length: number;\n\n  /**\n   * Removes the last element from an array and returns it.\n   */\n  pop(): Type | undefined;\n\n  /**\n   * Appends new elements to an array, and returns the new length of the array.\n   */\n  push(...items: Type[]): number;\n\n  // ...\n}\n</code></pre>\n<p>Modern JavaScript also provides other data structures which are generic, like <code>Map&#x3C;K, V></code>, <code>Set&#x3C;T></code>, and <code>Promise&#x3C;T></code>.\nAll this really means is that because of how <code>Map</code>, <code>Set</code>, and <code>Promise</code> behave, they can work with any sets of types.</p>\n<h3 id=\"the-readonlyarray-type\" style=\"position:relative;\"><a href=\"#the-readonlyarray-type\" aria-label=\"the readonlyarray type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>ReadonlyArray</code> Type</h3>\n<p>The <code>ReadonlyArray</code> is a special type that describes arrays that shouldn’t be changed.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339\nfunction doStuff(values: ReadonlyArray&#x3C;string>) {\n  // We can read from 'values'...\n  const copy = values.slice();\n  console.log(`The first value is ${values[0]}`);\n\n  // ...but we can't mutate 'values'.\n  values.push(\"hello!\");\n}\n</code></pre>\n<p>Much like the <code>readonly</code> modifier for properties, it’s mainly a tool we can use for intent.\nWhen we see a function that returns <code>ReadonlyArray</code>s, it tells us we’re not meant to change the contents at all, and when we see a function that consumes <code>ReadonlyArray</code>s, it tells us that we can pass any array into that function without worrying that it will change its contents.</p>\n<p>Unlike <code>Array</code>, there isn’t a <code>ReadonlyArray</code> constructor that we can use.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2693\nnew ReadonlyArray(\"red\", \"green\", \"blue\");\n</code></pre>\n<p>Instead, we can assign regular <code>Array</code>s to <code>ReadonlyArray</code>s.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const roArray: ReadonlyArray&#x3C;string> = [\"red\", \"green\", \"blue\"];\n</code></pre>\n<p>Just as TypeScript provides a shorthand syntax for <code>Array&#x3C;Type></code> with <code>Type[]</code>, it also provides a shorthand syntax for <code>ReadonlyArray&#x3C;Type></code> with <code>readonly Type[]</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339\nfunction doStuff(values: readonly string[]) {\n  //                     ^^^^^^^^^^^^^^^^^\n  // We can read from 'values'...\n  const copy = values.slice();\n  console.log(`The first value is ${values[0]}`);\n\n  // ...but we can't mutate 'values'.\n  values.push(\"hello!\");\n}\n</code></pre>\n<p>One last thing to note is that unlike the <code>readonly</code> property modifier, assignability isn’t bidirectional between regular <code>Array</code>s and <code>ReadonlyArray</code>s.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 4104\nlet x: readonly string[] = [];\nlet y: string[] = [];\n\nx = y;\ny = x;\n</code></pre>\n<h3 id=\"tuple-types\" style=\"position:relative;\"><a href=\"#tuple-types\" aria-label=\"tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuple Types</h3>\n<p>A <em>tuple type</em> is another sort of <code>Array</code> type that knows exactly how many elements it contains, and exactly which types it contains at specific positions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type StringNumberPair = [string, number];\n//                      ^^^^^^^^^^^^^^^^\n</code></pre>\n<p>Here, <code>StringNumberPair</code> is a tuple type of <code>string</code> and <code>number</code>.\nLike <code>ReadonlyArray</code>, it has no representation at runtime, but is significant to TypeScript.\nTo the type system, <code>StringNumberPair</code> describes arrays whose <code>0</code> index contains a <code>string</code> and whose <code>1</code> index contains a <code>number</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function doSomething(pair: [string, number]) {\n  const a = pair[0];\n  //    ^?\n  const b = pair[1];\n  //    ^?\n  // ...\n}\n\ndoSomething([\"hello\", 42]);\n</code></pre>\n<p>If we try to index past the number of elements, we’ll get an error.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2493\nfunction doSomething(pair: [string, number]) {\n  // ...\n\n  const c = pair[2];\n}\n</code></pre>\n<p>We can also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring\">destructure tuples</a> using JavaScript’s array destructuring.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function doSomething(stringHash: [string, number]) {\n  const [inputString, hash] = stringHash;\n\n  console.log(inputString);\n  //          ^?\n\n  console.log(hash);\n  //          ^?\n}\n</code></pre>\n<blockquote>\n<p>Tuple types are useful in heavily convention-based APIs, where each element’s meaning is “obvious”.\nThis gives us flexibility in whatever we want to name our variables when we destructure them.\nIn the above example, we were able to name elements <code>0</code> and <code>1</code> to whatever we wanted.</p>\n<p>However, since not every user holds the same view of what’s obvious, it may be worth reconsidering whether using objects with descriptive property names may be better for your API.</p>\n</blockquote>\n<p>Other than those length checks, simple tuple types like these are equivalent to types which are versions of <code>Array</code>s that declare properties for specific indexes, and that declare <code>length</code> with a numeric literal type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface StringNumberPair {\n  // specialized properties\n  length: 2;\n  0: string;\n  1: number;\n\n  // Other 'Array&#x3C;string | number>' members...\n  slice(start?: number, end?: number): Array&#x3C;string | number>;\n}\n</code></pre>\n<p>Another thing you may be interested in is that tuples can have optional properties by writing out a question mark (<code>?</code> after an element’s type).\nOptional tuple elements can only come at the end, and also affect the type of <code>length</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Either2dOr3d = [number, number, number?];\n\nfunction setCoordinate(coord: Either2dOr3d) {\n  const [x, y, z] = coord;\n  //           ^?\n\n  console.log(`Provided coordinates had ${coord.length} dimensions`);\n  //                                            ^?\n}\n</code></pre>\n<p>Tuples can also have rest elements, which have to be an array/tuple type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type StringNumberBooleans = [string, number, ...boolean[]];\ntype StringBooleansNumber = [string, ...boolean[], number];\ntype BooleansStringNumber = [...boolean[], string, number];\n</code></pre>\n<ul>\n<li><code>StringNumberBooleans</code> describes a tuple whose first two elements are <code>string</code> and <code>number</code> respectively, but which may have any number of <code>boolean</code>s following.</li>\n<li><code>StringBooleansNumber</code> describes a tuple whose first element is <code>string</code> and then any number of <code>boolean</code>s and ending with a <code>number</code>.</li>\n<li><code>BooleansStringNumber</code> describes a tuple whose starting elements any number of <code>boolean</code>s and ending with a <code>string</code> then a <code>number</code>.</li>\n</ul>\n<p>A tuple with a rest element has no set “length” - it only has a set of well-known elements in different positions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type StringNumberBooleans = [string, number, ...boolean[]];\n// ---cut---\nconst a: StringNumberBooleans = [\"hello\", 1];\nconst b: StringNumberBooleans = [\"beautiful\", 2, true];\nconst c: StringNumberBooleans = [\"world\", 3, true, false, true, false, true];\n</code></pre>\n<p>Why might optional and rest elements be useful?\nWell, it allows TypeScript to correspond tuples with parameter lists.\nTuples types can be used in <a href=\"/docs/handbook/2/functions.html#rest-parameters-and-arguments\">rest parameters and arguments</a>, so that the following:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function readButtonInput(...args: [string, number, ...boolean[]]) {\n  const [name, version, ...input] = args;\n  // ...\n}\n</code></pre>\n<p>is basically equivalent to:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function readButtonInput(name: string, version: number, ...input: boolean[]) {\n  // ...\n}\n</code></pre>\n<p>This is handy when you want to take a variable number of arguments with a rest parameter, and you need a minimum number of elements, but you don’t want to introduce intermediate variables.</p>\n<!--\nTODO do we need this example?\n\nFor example, imagine we need to write a function that adds up `number`s based on arguments that get passed in.\n\n```ts twoslash\nfunction sum(...args: number[]) {\n    // ...\n}\n```\n\nWe might feel like it makes little sense to take any fewer than 2 elements, so we want to require callers to provide at least 2 arguments.\nA first attempt might be\n\n```ts twoslash\nfunction foo(a: number, b: number, ...args: number[]) {\n    args.unshift(a, b);\n\n    let result = 0;\n    for (const value of args) {\n        result += value;\n    }\n    return result;\n}\n```\n\n-->\n<h3 id=\"readonly-tuple-types\" style=\"position:relative;\"><a href=\"#readonly-tuple-types\" aria-label=\"readonly tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code> Tuple Types</h3>\n<p>One final note about tuple types - tuples types have <code>readonly</code> variants, and can be specified by sticking a <code>readonly</code> modifier in front of them - just like with array shorthand syntax.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function doSomething(pair: readonly [string, number]) {\n  //                       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  // ...\n}\n</code></pre>\n<p>As you might expect, writing to any property of a <code>readonly</code> tuple isn’t allowed in TypeScript.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2540\nfunction doSomething(pair: readonly [string, number]) {\n  pair[0] = \"hello!\";\n}\n</code></pre>\n<p>Tuples tend to be created and left un-modified in most code, so annotating types as <code>readonly</code> tuples when possible is a good default.\nThis is also important given that array literals with <code>const</code> assertions will be inferred with <code>readonly</code> tuple types.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\nlet point = [3, 4] as const;\n\nfunction distanceFromOrigin([x, y]: [number, number]) {\n  return Math.sqrt(x ** 2 + y ** 2);\n}\n\ndistanceFromOrigin(point);\n</code></pre>\n<p>Here, <code>distanceFromOrigin</code> never modifies its elements, but expects a mutable tuple.\nSince <code>point</code>’s type was inferred as <code>readonly [3, 4]</code>, it won’t be compatible with <code>[number, number]</code> since that type can’t guarantee <code>point</code>’s elements won’t be mutated.</p>\n<!-- ## Other Kinds of Object Members\n\nMost of the declarations in object types:\n\n### Method Syntax\n\n### Call Signatures\n\n### Construct Signatures\n\n### Index Signatures -->","headings":[{"value":"Property Modifiers","depth":2},{"value":"Optional Properties","depth":3},{"value":"readonly Properties","depth":3},{"value":"Index Signatures","depth":3},{"value":"Extending Types","depth":2},{"value":"Intersection Types","depth":2},{"value":"Interfaces vs. Intersections","depth":2},{"value":"Generic Object Types","depth":2},{"value":"The Array Type","depth":3},{"value":"The ReadonlyArray Type","depth":3},{"value":"Tuple Types","depth":3},{"value":"readonly Tuple Types","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/objects.html","title":"Object Types","disable_toc":null,"handbook":null,"oneline":"How TypeScript describes the shapes of JavaScript objects.","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"More on Functions","oneline":"Learn about how Functions work in TypeScript.","permalink":"/docs/handbook/2/functions.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Creating Types from Types","oneline":"An overview of the ways in which you can create more types from existing types.","permalink":"/docs/handbook/2/types-from-types.html"}}}},"pageContext":{"id":"1-object-types","slug":"/docs/handbook/2/objects.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Object Types.md","previousID":"1d4226fd-425e-594c-9fe1-5440f320c70e","nextID":"99c63e12-66ea-5084-a976-6ea19d7295f0","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}