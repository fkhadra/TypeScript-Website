{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/everyday-types.html","result":{"data":{"markdownRemark":{"id":"522f2703-3782-5e96-a09d-f9452e2a101f","excerpt":"In this chapter, we’ll cover some of the most common types of values you’ll find in JavaScript code, and explain the corresponding ways to describe those types…","html":"<p>In this chapter, we’ll cover some of the most common types of values you’ll find in JavaScript code, and explain the corresponding ways to describe those types in TypeScript.\nThis isn’t an exhaustive list, and future chapters will describe more ways to name and use other types.</p>\n<p>Types can also appear in many more <em>places</em> than just type annotations.\nAs we learn about the types themselves, we’ll also learn about the places where we can refer to these types to form new constructs.</p>\n<p>We’ll start by reviewing the most basic and common types you might encounter when writing JavaScript or TypeScript code.\nThese will later form the core building blocks of more complex types.</p>\n<h2 id=\"the-primitives-string-number-and-boolean\" style=\"position:relative;\"><a href=\"#the-primitives-string-number-and-boolean\" aria-label=\"the primitives string number and boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The primitives: <code>string</code>, <code>number</code>, and <code>boolean</code></h2>\n<p>JavaScript has three very commonly used <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a>: <code>string</code>, <code>number</code>, and <code>boolean</code>.\nEach has a corresponding type in TypeScript.\nAs you might expect, these are the same names you’d see if you used the JavaScript <code>typeof</code> operator on a value of those types:</p>\n<ul>\n<li><code>string</code> represents string values like <code>\"Hello, world\"</code></li>\n<li><code>number</code> is for numbers like <code>42</code>. JavaScript does not have a special runtime value for integers, so there’s no equivalent to <code>int</code> or <code>float</code> - everything is simply <code>number</code></li>\n<li><code>boolean</code> is for the two values <code>true</code> and <code>false</code></li>\n</ul>\n<blockquote>\n<p>The type names <code>String</code>, <code>Number</code>, and <code>Boolean</code> (starting with capital letters) are legal, but refer to some special built-in types that will very rarely appear in your code. <em>Always</em> use <code>string</code>, <code>number</code>, or <code>boolean</code> for types.</p>\n</blockquote>\n<h2 id=\"arrays\" style=\"position:relative;\"><a href=\"#arrays\" aria-label=\"arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrays</h2>\n<p>To specify the type of an array like <code>[1, 2, 3]</code>, you can use the syntax <code>number[]</code>; this syntax works for any type (e.g. <code>string[]</code> is an array of strings, and so on).\nYou may also see this written as <code>Array&#x3C;number></code>, which means the same thing.\nWe’ll learn more about the syntax <code>T&#x3C;U></code> when we cover <em>generics</em>.</p>\n<blockquote>\n<p>Note that <code>[number]</code> is a different thing; refer to the section on <em>tuple types</em>.</p>\n</blockquote>\n<h2 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>any</code></h2>\n<p>TypeScript also has a special type, <code>any</code>, that you can use whenever you don’t want a particular value to cause typechecking errors.</p>\n<p>When a value is of type <code>any</code>, you can access any properties of it (which will in turn be of type <code>any</code>), call it like a function, assign it to (or from) a value of any type, or pretty much anything else that’s syntactically legal:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let obj: any = { x: 0 };\n// None of the following lines of code will throw compiler errors.\n// Using `any` disables all further type checking, and it is assumed \n// you know the environment better than TypeScript.\nobj.foo();\nobj();\nobj.bar = 100;\nobj = \"hello\";\nconst n: number = obj;\n</code></pre>\n<p>The <code>any</code> type is useful when you don’t want to write out a long type just to convince TypeScript that a particular line of code is okay.</p>\n<h3 id=\"noimplicitany\" style=\"position:relative;\"><a href=\"#noimplicitany\" aria-label=\"noimplicitany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitAny</code></h3>\n<p>When you don’t specify a type, and TypeScript can’t infer it from context, the compiler will typically default to <code>any</code>.</p>\n<p>You usually want to avoid this, though, because <code>any</code> isn’t type-checked.\nUse the compiler flag <a href=\"/tsconfig#noImplicitAny\"><code>noImplicitAny</code></a> to flag any implicit <code>any</code> as an error.</p>\n<h2 id=\"type-annotations-on-variables\" style=\"position:relative;\"><a href=\"#type-annotations-on-variables\" aria-label=\"type annotations on variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Annotations on Variables</h2>\n<p>When you declare a variable using <code>const</code>, <code>var</code>, or <code>let</code>, you can optionally add a type annotation to explicitly specify the type of the variable:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let myName: string = \"Alice\";\n//        ^^^^^^^^ Type annotation\n</code></pre>\n<blockquote>\n<p>TypeScript doesn’t use “types on the left”-style declarations like <code>int x = 0;</code>\nType annotations will always go <em>after</em> the thing being typed.</p>\n</blockquote>\n<p>In most cases, though, this isn’t needed.\nWherever possible, TypeScript tries to automatically <em>infer</em> the types in your code.\nFor example, the type of a variable is inferred based on the type of its initializer:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// No type annotation needed -- 'myName' inferred as type 'string'\nlet myName = \"Alice\";\n</code></pre>\n<p>For the most part you don’t need to explicitly learn the rules of inference.\nIf you’re starting out, try using fewer type annotations than you think - you might be surprised how few you need for TypeScript to fully understand what’s going on.</p>\n<h2 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h2>\n<p>Functions are the primary means of passing data around in JavaScript.\nTypeScript allows you to specify the types of both the input and output values of functions.</p>\n<h3 id=\"parameter-type-annotations\" style=\"position:relative;\"><a href=\"#parameter-type-annotations\" aria-label=\"parameter type annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Type Annotations</h3>\n<p>When you declare a function, you can add type annotations after each parameter to declare what types of parameters the function accepts.\nParameter type annotations go after the parameter name:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Parameter type annotation\nfunction greet(name: string) {\n  //                 ^^^^^^^^\n  console.log(\"Hello, \" + name.toUpperCase() + \"!!\");\n}\n</code></pre>\n<p>When a parameter has a type annotation, arguments to that function will be checked:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\ndeclare function greet(name: string): void;\n// ---cut---\n// Would be a runtime error if executed!\ngreet(42);\n</code></pre>\n<blockquote>\n<p>Even if you don’t have type annotations on your parameters, TypeScript will still check that you passed the right number of arguments.</p>\n</blockquote>\n<h3 id=\"return-type-annotations\" style=\"position:relative;\"><a href=\"#return-type-annotations\" aria-label=\"return type annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Return Type Annotations</h3>\n<p>You can also add return type annotations.\nReturn type annotations appear after the parameter list:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function getFavoriteNumber(): number {\n  //                        ^^^^^^^^\n  return 26;\n}\n</code></pre>\n<p>Much like variable type annotations, you usually don’t need a return type annotation because TypeScript will infer the function’s return type based on its <code>return</code> statements.\nThe type annotation in the above example doesn’t change anything.\nSome codebases will explicitly specify a return type for documentation purposes, to prevent accidental changes, or just for personal preference.</p>\n<h3 id=\"anonymous-functions\" style=\"position:relative;\"><a href=\"#anonymous-functions\" aria-label=\"anonymous functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Anonymous Functions</h3>\n<p>Anonymous functions are a little bit different from function declarations.\nWhen a function appears in a place where TypeScript can determine how it’s going to be called, the parameters of that function are automatically given types.</p>\n<p>Here’s an example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2551\n// No type annotations here, but TypeScript can spot the bug\nconst names = [\"Alice\", \"Bob\", \"Eve\"];\n\n// Contextual typing for function\nnames.forEach(function (s) {\n  console.log(s.toUppercase());\n});\n\n// Contextual typing also applies to arrow functions\nnames.forEach((s) => {\n  console.log(s.toUppercase());\n});\n</code></pre>\n<p>Even though the parameter <code>s</code> didn’t have a type annotation, TypeScript used the types of the <code>forEach</code> function, along with the inferred type of the array, to determine the type <code>s</code> will have.</p>\n<p>This process is called <em>contextual typing</em> because the <em>context</em> that the function occurred in informed what type it should have.\nSimilar to the inference rules, you don’t need to explicitly learn how this happens, but understanding that it <em>does</em> happen can help you notice when type annotations aren’t needed.\nLater, we’ll see more examples of how the context that a value occurs in can affect its type.</p>\n<h2 id=\"object-types\" style=\"position:relative;\"><a href=\"#object-types\" aria-label=\"object types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Types</h2>\n<p>Apart from primitives, the most common sort of type you’ll encounter is an <em>object type</em>.\nThis refers to any JavaScript value with properties, which is almost all of them!\nTo define an object type, we simply list its properties and their types.</p>\n<p>For example, here’s a function that takes a point-like object:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// The parameter's type annotation is an object type\nfunction printCoord(pt: { x: number; y: number }) {\n  //                      ^^^^^^^^^^^^^^^^^^^^^^^^\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\nprintCoord({ x: 3, y: 7 });\n</code></pre>\n<p>Here, we annotated the parameter with a type with two properties - <code>x</code> and <code>y</code> - which are both of type <code>number</code>.\nYou can use <code>,</code> or <code>;</code> to separate the properties, and the last separator is optional either way.</p>\n<p>The type part of each property is also optional.\nIf you don’t specify a type, it will be assumed to be <code>any</code>.</p>\n<h3 id=\"optional-properties\" style=\"position:relative;\"><a href=\"#optional-properties\" aria-label=\"optional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Properties</h3>\n<p>Object types can also specify that some or all of their properties are <em>optional</em>.\nTo do this, add a <code>?</code> after the property name:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function printName(obj: { first: string; last?: string }) {\n  // ...\n}\n// Both OK\nprintName({ first: \"Bob\" });\nprintName({ first: \"Alice\", last: \"Alisson\" });\n</code></pre>\n<p>In JavaScript, if you access a property that doesn’t exist, you’ll get the value <code>undefined</code> rather than a runtime error.\nBecause of this, when you <em>read</em> from an optional property, you’ll have to check for <code>undefined</code> before using it.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2532\nfunction printName(obj: { first: string; last?: string }) {\n  // Error - might crash if 'obj.last' wasn't provided!\n  console.log(obj.last.toUpperCase());\n  if (obj.last !== undefined) {\n    // OK\n    console.log(obj.last.toUpperCase());\n  }\n\n  // A safe alternative using modern JavaScript syntax:\n  console.log(obj.last?.toUpperCase());\n}\n</code></pre>\n<h2 id=\"union-types\" style=\"position:relative;\"><a href=\"#union-types\" aria-label=\"union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Types</h2>\n<p>TypeScript’s type system allows you to build new types out of existing ones using a large variety of operators.\nNow that we know how to write a few types, it’s time to start <em>combining</em> them in interesting ways.</p>\n<h3 id=\"defining-a-union-type\" style=\"position:relative;\"><a href=\"#defining-a-union-type\" aria-label=\"defining a union type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining a Union Type</h3>\n<p>The first way to combine types you might see is a <em>union</em> type.\nA union type is a type formed from two or more other types, representing values that may be <em>any one</em> of those types.\nWe refer to each of these types as the union’s <em>members</em>.</p>\n<p>Let’s write a function that can operate on strings or numbers:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\nfunction printId(id: number | string) {\n  console.log(\"Your ID is: \" + id);\n}\n// OK\nprintId(101);\n// OK\nprintId(\"202\");\n// Error\nprintId({ myID: 22342 });\n</code></pre>\n<h3 id=\"working-with-union-types\" style=\"position:relative;\"><a href=\"#working-with-union-types\" aria-label=\"working with union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Union Types</h3>\n<p>It’s easy to <em>provide</em> a value matching a union type - simply provide a type matching any of the union’s members.\nIf you <em>have</em> a value of a union type, how do you work with it?</p>\n<p>TypeScript will only allow you to do things with the union if that thing is valid for <em>every</em> member of the union.\nFor example, if you have the union <code>string | number</code>, you can’t use methods that are only available on <code>string</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339\nfunction printId(id: number | string) {\n  console.log(id.toUpperCase());\n}\n</code></pre>\n<p>The solution is to <em>narrow</em> the union with code, the same as you would in JavaScript without type annotations.\n<em>Narrowing</em> occurs when TypeScript can deduce a more specific type for a value based on the structure of the code.</p>\n<p>For example, TypeScript knows that only a <code>string</code> value will have a <code>typeof</code> value <code>\"string\"</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function printId(id: number | string) {\n  if (typeof id === \"string\") {\n    // In this branch, id is of type 'string'\n    console.log(id.toUpperCase());\n  } else {\n    // Here, id is of type 'number'\n    console.log(id);\n  }\n}\n</code></pre>\n<p>Another example is to use a function like <code>Array.isArray</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function welcomePeople(x: string[] | string) {\n  if (Array.isArray(x)) {\n    // Here: 'x' is 'string[]'\n    console.log(\"Hello, \" + x.join(\" and \"));\n  } else {\n    // Here: 'x' is 'string'\n    console.log(\"Welcome lone traveler \" + x);\n  }\n}\n</code></pre>\n<p>Notice that in the <code>else</code> branch, we don’t need to do anything special - if <code>x</code> wasn’t a <code>string[]</code>, then it must have been a <code>string</code>.</p>\n<p>Sometimes you’ll have a union where all the members have something in common.\nFor example, both arrays and strings have a <code>slice</code> method.\nIf every member in a union has a property in common, you can use that property without narrowing:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Return type is inferred as number[] | string\nfunction getFirstThree(x: number[] | string) {\n  return x.slice(0, 3);\n}\n</code></pre>\n<blockquote>\n<p>It might be confusing that a <em>union</em> of types appears to have the <em>intersection</em> of those types’ properties.\nThis is not an accident - the name <em>union</em> comes from type theory.\nThe <em>union</em> <code>number | string</code> is composed by taking the union <em>of the values</em> from each type.\nNotice that given two sets with corresponding facts about each set, only the <em>intersection</em> of those facts applies to the <em>union</em> of the sets themselves.\nFor example, if we had a room of tall people wearing hats, and another room of Spanish speakers wearing hats, after combining those rooms, the only thing we know about <em>every</em> person is that they must be wearing a hat.</p>\n</blockquote>\n<h2 id=\"type-aliases\" style=\"position:relative;\"><a href=\"#type-aliases\" aria-label=\"type aliases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Aliases</h2>\n<p>We’ve been using object types and union types by writing them directly in type annotations.\nThis is convenient, but it’s common to want to use the same type more than once and refer to it by a single name.</p>\n<p>A <em>type alias</em> is exactly that - a <em>name</em> for any <em>type</em>.\nThe syntax for a type alias is:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Point = {\n  x: number;\n  y: number;\n};\n\n// Exactly the same as the earlier example\nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({ x: 100, y: 100 });\n</code></pre>\n<p>You can actually use a type alias to give a name to any type at all, not just an object type.\nFor example, a type alias can name a union type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type ID = number | string;\n</code></pre>\n<p>Note that aliases are <em>only</em> aliases - you cannot use type aliases to create different/distinct “versions” of the same type.\nWhen you use the alias, it’s exactly as if you had written the aliased type.\nIn other words, this code might <em>look</em> illegal, but is OK according to TypeScript because both types are aliases for the same type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function getInput(): string;\ndeclare function sanitize(str: string): string;\n// ---cut---\ntype UserInputSanitizedString = string;\n\nfunction sanitizeInput(str: string): UserInputSanitizedString {\n  return sanitize(str);\n}\n\n// Create a sanitized input\nlet userInput = sanitizeInput(getInput());\n\n// Can still be re-assigned with a string though\nuserInput = \"new input\";\n</code></pre>\n<h2 id=\"interfaces\" style=\"position:relative;\"><a href=\"#interfaces\" aria-label=\"interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interfaces</h2>\n<p>An <em>interface declaration</em> is another way to name an object type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Point {\n  x: number;\n  y: number;\n}\n\nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({ x: 100, y: 100 });\n</code></pre>\n<p>Just like when we used a type alias above, the example works just as if we had used an anonymous object type.\nTypeScript is only concerned with the <em>structure</em> of the value we passed to <code>printCoord</code> - it only cares that it has the expected properties.\nBeing concerned only with the structure and capabilities of types is why we call TypeScript a <em>structurally typed</em> type system.</p>\n<h3 id=\"differences-between-type-aliases-and-interfaces\" style=\"position:relative;\"><a href=\"#differences-between-type-aliases-and-interfaces\" aria-label=\"differences between type aliases and interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Differences Between Type Aliases and Interfaces</h3>\n<p>Type aliases and interfaces are very similar, and in many cases you can choose between them freely.\nAlmost all features of an <code>interface</code> are available in <code>type</code>, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.</p>\n<table class='full-width-table'>\n  <tbody>\n    <tr>\n      <th><code>Interface</code></th>\n      <th><code>Type</code></th>\n    </tr>\n    <tr>\n      <td>\n        <p>Extending an interface</p>\n        <code><pre>\ninterface Animal {\n  name: string\n}<br/>\ninterface Bear extends Animal {\n  honey: boolean\n}<br/>\nconst bear = getBear() \nbear.name\nbear.honey\n        </pre></code>\n      </td>\n      <td>\n        <p>Extending a type via intersections</p>\n        <code><pre>\ntype Animal = {\n  name: string\n}<br/>\ntype Bear = Animal & { \n  honey: Boolean \n}<br/>\nconst bear = getBear();\nbear.name;\nbear.honey;\n        </pre></code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>Adding new fields to an existing interface</p>\n        <code><pre>\ninterface Window {\n  title: string\n}<br/>\ninterface Window {\n  ts: TypeScriptAPI\n}<br/>\nconst src = 'const a = \"Hello World\"';\nwindow.ts.transpileModule(src, {});\n        </pre></code>\n      </td>\n      <td>\n        <p>A type cannot be changed after being created</p>\n        <code><pre>\ntype Window = {\n  title: string\n}<br/>\ntype Window = {\n  ts: TypeScriptAPI\n}<br/>\n<span style=\"color: #A31515\"> // Error: Duplicate identifier 'Window'.</span><br/>\n        </pre></code>\n      </td>\n    </tr>\n    </tbody>\n</table>\n<p>You’ll learn more about these concepts in later chapters, so don’t worry if you don’t understand all of these right away.</p>\n<ul>\n<li>Prior to TypeScript version 4.2, type alias names <a href=\"/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWZWhfYAjABMAMwALA+gbsVjoADqgjKESytQPxCHghAByXigYgBfr8LAsYj8aQMUASbDQcRSExCeCwFiIQh+AKfAYyBiQFgOPyIaikSGLQo0Zj-aazaY+dSaXjLDgAGXgAC9CKhDqAALxJaw2Ib2RzOISuDycLw+ImBYKQflCkWRRD2LXCw6JCxS1JCdJZHJ5RAFIbFJU8ADKC3WzEcnVZaGYE1ABpFnFOmsFhsil2uoHuzwArO9SmAAEIsSFrZB-GgAjjA5gtVN8VCEc1o1C4Q4AGlR2AwO1EsBQoAAbvB-gJ4HhPgB5aDwem-Ph1TCV3AEEirTp4ELtRbTPD4vwKjOfAuioSQHuDXBcnmgACC+eCONFEs73YAPGGZVT5cRyyhiHh7AAON7lsG3vBggB8XGV3l8-nVISOgghxoLq9i7io-AHsayRWGaFrlFauq2rg9qaIGQHwCBqChtKdgRo8TxRjeyB3o+7xAA\"><em>may</em> appear in error messages</a>, sometimes in place of the equivalent anonymous type (which may or may not be desirable). Interfaces will always be named in error messages.</li>\n<li>Type aliases may not participate <a href=\"/play?#code/PTAEEEDtQS0gXApgJwGYEMDGjSfdAIx2UQFoB7AB0UkQBMAoEUfO0Wgd1ADd0AbAK6IAzizp16ALgYM4SNFhwBZdAFtV-UAG8GoPaADmNAcMmhh8ZHAMMAvjLkoM2UCvWad+0ARL0A-GYWVpA29gyY5JAWLJAwGnxmbvGgALzauvpGkCZmAEQAjABMAMwALLkANBl6zABi6DB8okR4Jjg+iPSgABboovDk3jjo5pbW1d6+dGb5djLwAJ7UoABKiJTwjThpnpnGpqPBoTLMAJrkArj4kOTwYmycPOhW6AR8IrDQ8N04wmo4HHQCwYi2Waw2W1S6S8HX8gTGITsQA\">in declaration merging, but interfaces can</a>.</li>\n<li>Interfaces may only be used to <a href=\"/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA\">declare the shapes of object, not re-name primitives</a>.</li>\n<li>Interface names will <a href=\"/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWY2Q-YAjABMAMwALA+gbsVjNXW8yxySoAADaAA0CCaZbPh1XYqXgOIY0ZgmcK0AA0nyaLFhhGY8F4AHJmEJILCWsgZId4NNfIgGFdcIcUTVfgBlZTOWC8T7kAJ42G4eT+GS42QyRaYbCgXAEEguTzeXyCjDBSAAQSE8Ai0Xsl0K9kcziExDeiQs1lAqSE6SyOTy0AKQ2KHk4p1V6s1OuuoHuzwArMagA\"><em>always</em> appear in their original form</a> in error messages, but <em>only</em> when they are used by name.</li>\n</ul>\n<p>For the most part, you can choose based on personal preference, and TypeScript will tell you if it needs something to be the other kind of declaration. If you would like a heuristic, use <code>interface</code> until you need to use features from <code>type</code>.</p>\n<h2 id=\"type-assertions\" style=\"position:relative;\"><a href=\"#type-assertions\" aria-label=\"type assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Assertions</h2>\n<p>Sometimes you will have information about the type of a value that TypeScript can’t know about.</p>\n<p>For example, if you’re using <code>document.getElementById</code>, TypeScript only knows that this will return <em>some</em> kind of <code>HTMLElement</code>, but you might know that your page will always have an <code>HTMLCanvasElement</code> with a given ID.</p>\n<p>In this situation, you can use a <em>type assertion</em> to specify a more specific type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const myCanvas = document.getElementById(\"main_canvas\") as HTMLCanvasElement;\n</code></pre>\n<p>Like a type annotation, type assertions are removed by the compiler and won’t affect the runtime behavior of your code.</p>\n<p>You can also use the angle-bracket syntax (except if the code is in a <code>.tsx</code> file), which is equivalent:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const myCanvas = &#x3C;HTMLCanvasElement>document.getElementById(\"main_canvas\");\n</code></pre>\n<blockquote>\n<p>Reminder: Because type assertions are removed at compile-time, there is no runtime checking associated with a type assertion.\nThere won’t be an exception or <code>null</code> generated if the type assertion is wrong.</p>\n</blockquote>\n<p>TypeScript only allows type assertions which convert to a <em>more specific</em> or <em>less specific</em> version of a type.\nThis rule prevents “impossible” coercions like:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2352\nconst x = \"hello\" as number;\n</code></pre>\n<p>Sometimes this rule can be too conservative and will disallow more complex coercions that might be valid.\nIf this happens, you can use two assertions, first to <code>any</code> (or <code>unknown</code>, which we’ll introduce later), then to the desired type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare const expr: any;\ntype T = { a: 1; b: 2; c: 3 };\n// ---cut---\nconst a = (expr as any) as T;\n</code></pre>\n<h2 id=\"literal-types\" style=\"position:relative;\"><a href=\"#literal-types\" aria-label=\"literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Literal Types</h2>\n<p>In addition to the general types <code>string</code> and <code>number</code>, we can refer to <em>specific</em> strings and numbers in type positions.</p>\n<p>One way to think about this is to consider how JavaScript comes with different ways to declare a variable. Both <code>var</code> and <code>let</code> allow for changing what is held inside the variable, and <code>const</code> does not. This is reflected in how TypeScript creates types for literals.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let changingString = \"Hello World\";\nchangingString = \"Olá Mundo\";\n// Because `changingString` can represent any possible string, that\n// is how TypeScript describes it in the type system\nchangingString;\n// ^?\n\nconst constantString = \"Hello World\";\n// Because `constantString` can only represent 1 possible string, it\n// has a literal type representation\nconstantString;\n// ^?\n</code></pre>\n<p>By themselves, literal types aren’t very valuable:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nlet x: \"hello\" = \"hello\";\n// OK\nx = \"hello\";\n// ...\nx = \"howdy\";\n</code></pre>\n<p>It’s not much use to have a variable that can only have one value!</p>\n<p>But by <em>combining</em> literals into unions, you can express a much more useful concept - for example, functions that only accept a certain set of known values:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\nfunction printText(s: string, alignment: \"left\" | \"right\" | \"center\") {\n  // ...\n}\nprintText(\"Hello, world\", \"left\");\nprintText(\"G'day, mate\", \"centre\");\n</code></pre>\n<p>Numeric literal types work the same way:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function compare(a: string, b: string): -1 | 0 | 1 {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n</code></pre>\n<p>Of course, you can combine these with non-literal types:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\ninterface Options {\n  width: number;\n}\nfunction configure(x: Options | \"auto\") {\n  // ...\n}\nconfigure({ width: 100 });\nconfigure(\"auto\");\nconfigure(\"automatic\");\n</code></pre>\n<p>There’s one more kind of literal type: boolean literals.\nThere are only two boolean literal types, and as you might guess, they are the types <code>true</code> and <code>false</code>.\nThe type <code>boolean</code> itself is actually just an alias for the union <code>true | false</code>.</p>\n<h3 id=\"literal-inference\" style=\"position:relative;\"><a href=\"#literal-inference\" aria-label=\"literal inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Literal Inference</h3>\n<p>When you initialize a variable with an object, TypeScript assumes that the properties of that object might change values later.\nFor example, if you wrote code like this:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare const someCondition: boolean;\n// ---cut---\nconst obj = { counter: 0 };\nif (someCondition) {\n  obj.counter = 1;\n}\n</code></pre>\n<p>TypeScript doesn’t assume the assignment of <code>1</code> to a field which previously had <code>0</code> is an error.\nAnother way of saying this is that <code>obj.counter</code> must have the type <code>number</code>, not <code>0</code>, because types are used to determine both <em>reading</em> and <em>writing</em> behavior.</p>\n<p>The same applies to strings:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\ndeclare function handleRequest(url: string, method: \"GET\" | \"POST\"): void;\n// ---cut---\nconst req = { url: \"https://example.com\", method: \"GET\" };\nhandleRequest(req.url, req.method);\n</code></pre>\n<p>In the above example <code>req.method</code> is inferred to be <code>string</code>, not <code>\"GET\"</code>. Because code can be evaluated between the creation of <code>req</code> and the call of <code>handleRequest</code> which could assign a new string like <code>\"GUESS\"</code> to <code>req.method</code>, TypeScript considers this code to have an error.</p>\n<p>There are two ways to work around this.</p>\n<ol>\n<li>\n<p>You can change the inference by adding a type assertion in either location:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function handleRequest(url: string, method: \"GET\" | \"POST\"): void;\n// ---cut---\n// Change 1:\nconst req = { url: \"https://example.com\", method: \"GET\" as \"GET\" };\n// Change 2\nhandleRequest(req.url, req.method as \"GET\");\n</code></pre>\n<p>Change 1 means “I intend for <code>req.method</code> to always have the <em>literal type</em> <code>\"GET\"</code>”, preventing the possible assignment of <code>\"GUESS\"</code> to that field after.\nChange 2 means “I know for other reasons that <code>req.method</code> has the value <code>\"GET\"</code>“.</p>\n</li>\n<li>\n<p>You can use <code>as const</code> to convert the entire object to be type literals:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function handleRequest(url: string, method: \"GET\" | \"POST\"): void;\n// ---cut---\nconst req = { url: \"https://example.com\", method: \"GET\" } as const;\nhandleRequest(req.url, req.method);\n</code></pre>\n</li>\n</ol>\n<p>The <code>as const</code> suffix acts like <code>const</code> but for the type system, ensuring that all properties are assigned the literal type instead of a more general version like <code>string</code> or <code>number</code>.</p>\n<h2 id=\"null-and-undefined\" style=\"position:relative;\"><a href=\"#null-and-undefined\" aria-label=\"null and undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>null</code> and <code>undefined</code></h2>\n<p>JavaScript has two primitive values used to signal absent or uninitialized value: <code>null</code> and <code>undefined</code>.</p>\n<p>TypeScript has two corresponding <em>types</em> by the same names. How these types behave depends on whether you have the <code>strictNullChecks</code> option on.</p>\n<h3 id=\"strictnullchecks-off\" style=\"position:relative;\"><a href=\"#strictnullchecks-off\" aria-label=\"strictnullchecks off permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code> off</h3>\n<p>With <code>strictNullChecks</code> <em>off</em>, values that might be <code>null</code> or <code>undefined</code> can still be accessed normally, and the values <code>null</code> and <code>undefined</code> can be assigned to a property of any type.\nThis is similar to how languages without null checks (e.g. C#, Java) behave.\nThe lack of checking for these values tends to be a major source of bugs; we always recommend people turn <code>strictNullChecks</code> on if it’s practical to do so in their codebase.</p>\n<h3 id=\"strictnullchecks-on\" style=\"position:relative;\"><a href=\"#strictnullchecks-on\" aria-label=\"strictnullchecks on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code> on</h3>\n<p>With <code>strictNullChecks</code> <em>on</em>, when a value is <code>null</code> or <code>undefined</code>, you will need to test for those values before using methods or properties on that value.\nJust like checking for <code>undefined</code> before using an optional property, we can use <em>narrowing</em> to check for values that might be <code>null</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function doSomething(x: string | null) {\n  if (x === null) {\n    // do nothing\n  } else {\n    console.log(\"Hello, \" + x.toUpperCase());\n  }\n}\n</code></pre>\n<h3 id=\"non-null-assertion-operator-postfix-\" style=\"position:relative;\"><a href=\"#non-null-assertion-operator-postfix-\" aria-label=\"non null assertion operator postfix  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-null Assertion Operator (Postfix <code>!</code>)</h3>\n<p>TypeScript also has a special syntax for removing <code>null</code> and <code>undefined</code> from a type without doing any explicit checking.\nWriting <code>!</code> after any expression is effectively a type assertion that the value isn’t <code>null</code> or <code>undefined</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function liveDangerously(x?: number | null) {\n  // No error\n  console.log(x!.toFixed());\n}\n</code></pre>\n<p>Just like other type assertions, this doesn’t change the runtime behavior of your code, so it’s important to only use <code>!</code> when you know that the value <em>can’t</em> be <code>null</code> or <code>undefined</code>.</p>\n<h3 id=\"enums\" style=\"position:relative;\"><a href=\"#enums\" aria-label=\"enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enums</h3>\n<p>Enums are a feature added to JavaScript by TypeScript which allows for describing a value which could be one of a set of possible named constants. Unlike most TypeScript features, this is <em>not</em> a type-level addition to JavaScript but something added to the language and runtime. Because of this, it’s a feature which you should know exists, but maybe hold off on using unless you are sure. You can read more about enums in the <a href=\"/docs/handbook/enums.html\">Enum reference page</a>.</p>\n<h3 id=\"less-common-primitives\" style=\"position:relative;\"><a href=\"#less-common-primitives\" aria-label=\"less common primitives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Less Common Primitives</h3>\n<p>It’s worth mentioning the rest of the primitives in JavaScript which are represented in the type system.\nThough we will not go into depth here.</p>\n<h5 id=\"bigint\" style=\"position:relative;\"><a href=\"#bigint\" aria-label=\"bigint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>bigint</code></h5>\n<p>From ES2020 onwards, there is a primitive in JavaScript used for very large integers, <code>BigInt</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: es2020\n\n// Creating a bigint via the BigInt function\nconst oneHundred: bigint = BigInt(100);\n\n// Creating a BigInt via the literal syntax\nconst anotherHundred: bigint = 100n;\n</code></pre>\n<p>You can learn more about BigInt in <a href=\"/docs/handbook/release-notes/typescript-3-2.html#bigint\">the TypeScript 3.2 release notes</a>.</p>\n<h5 id=\"symbol\" style=\"position:relative;\"><a href=\"#symbol\" aria-label=\"symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>symbol</code></h5>\n<p>There is a primitive in JavaScript used to create a globally unique reference via the function <code>Symbol()</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2367\nconst firstName = Symbol(\"name\");\nconst secondName = Symbol(\"name\");\n\nif (firstName === secondName) {\n  // Can't ever happen\n}\n</code></pre>\n<p>You can learn more about them in <a href=\"/docs/handbook/symbols.html\">Symbols reference page</a>.</p>","headings":[{"value":"The primitives: string, number, and boolean","depth":2},{"value":"Arrays","depth":2},{"value":"any","depth":2},{"value":"noImplicitAny","depth":3},{"value":"Type Annotations on Variables","depth":2},{"value":"Functions","depth":2},{"value":"Parameter Type Annotations","depth":3},{"value":"Return Type Annotations","depth":3},{"value":"Anonymous Functions","depth":3},{"value":"Object Types","depth":2},{"value":"Optional Properties","depth":3},{"value":"Union Types","depth":2},{"value":"Defining a Union Type","depth":3},{"value":"Working with Union Types","depth":3},{"value":"Type Aliases","depth":2},{"value":"Interfaces","depth":2},{"value":"Differences Between Type Aliases and Interfaces","depth":3},{"value":"Type Assertions","depth":2},{"value":"Literal Types","depth":2},{"value":"Literal Inference","depth":3},{"value":"null and undefined","depth":2},{"value":"strictNullChecks off","depth":3},{"value":"strictNullChecks on","depth":3},{"value":"Non-null Assertion Operator (Postfix !)","depth":3},{"value":"Enums","depth":3},{"value":"Less Common Primitives","depth":3},{"value":"bigint","depth":5},{"value":"symbol","depth":5}],"frontmatter":{"permalink":"/docs/handbook/2/everyday-types.html","title":"Everyday Types","disable_toc":null,"handbook":null,"oneline":"The language primitives.","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"The Basics","oneline":"Step one in learning TypeScript: The basic types.","permalink":"/docs/handbook/2/basic-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Narrowing","oneline":"Understand how TypeScript uses JavaScript knowledge to reduce the amount of type syntax in your projects.","permalink":"/docs/handbook/2/narrowing.html"}}}},"pageContext":{"id":"1-everyday-types","slug":"/docs/handbook/2/everyday-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Everyday Types.md","previousID":"354f6937-985a-5dcb-9db4-7d5daf2cf26c","nextID":"02637503-46d1-5d11-b2cc-807fa5837668","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}