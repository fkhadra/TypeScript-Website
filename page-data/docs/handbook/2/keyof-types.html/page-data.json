{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/keyof-types.html","result":{"data":{"markdownRemark":{"id":"f7ceba6a-50b4-530e-818a-c4a4b304ca60","excerpt":"The keyof type operator The keyof operator takes an object type and produces a string or numeric literal union of its keys: If the type has a string or number…","html":"<h2 id=\"the-keyof-type-operator\" style=\"position:relative;\"><a href=\"#the-keyof-type-operator\" aria-label=\"the keyof type operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>keyof</code> type operator</h2>\n<p>The <code>keyof</code> operator takes an object type and produces a string or numeric literal union of its keys:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Point = { x: number; y: number };\ntype P = keyof Point;\n//   ^?\n</code></pre>\n<p>If the type has a <code>string</code> or <code>number</code> index signature, <code>keyof</code> will return those types instead:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Arrayish = { [n: number]: unknown };\ntype A = keyof Arrayish;\n//   ^?\n\ntype Mapish = { [k: string]: boolean };\ntype M = keyof Mapish;\n//   ^?\n</code></pre>\n<p>Note that in this example, <code>M</code> is <code>string | number</code> — this is because JavaScript object keys are always coerced to a string, so <code>obj[0]</code> is always the same as <code>obj[\"0\"]</code>.</p>\n<p><code>keyof</code> types become especially useful when combined with mapped types, which we’ll learn more about later.</p>","headings":[{"value":"The keyof type operator","depth":2}],"frontmatter":{"permalink":"/docs/handbook/2/keyof-types.html","title":"Keyof Type Operator","disable_toc":null,"handbook":null,"oneline":"Using the keyof operator in type contexts.","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Generics","oneline":"Types which take parameters","permalink":"/docs/handbook/2/generics.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Typeof Type Operator","oneline":"Using the typeof operator in type contexts.","permalink":"/docs/handbook/2/typeof-types.html"}}}},"pageContext":{"id":"1-keyof-type-operator","slug":"/docs/handbook/2/keyof-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Keyof Type Operator.md","previousID":"86a02afe-2ee8-5e43-ba5d-b8627ab36208","nextID":"91120abe-9a84-521e-a470-a371941ab8d3","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}