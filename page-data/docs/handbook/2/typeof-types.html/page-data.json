{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/typeof-types.html","result":{"data":{"markdownRemark":{"id":"918cd872-e49c-5ec5-a26b-96fc35c922fa","excerpt":"The typeof type operator JavaScript already has a typeof operator you can use in an expression context: TypeScript adds a typeof operator you can use in a type…","html":"<h2 id=\"the-typeof-type-operator\" style=\"position:relative;\"><a href=\"#the-typeof-type-operator\" aria-label=\"the typeof type operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>typeof</code> type operator</h2>\n<p>JavaScript already has a <code>typeof</code> operator you can use in an <em>expression</em> context:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Prints \"string\"\nconsole.log(typeof \"Hello world\");\n</code></pre>\n<p>TypeScript adds a <code>typeof</code> operator you can use in a <em>type</em> context to refer to the <em>type</em> of a variable or property:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let s = \"hello\";\nlet n: typeof s;\n//  ^?\n</code></pre>\n<p>This isn’t very useful for basic types, but combined with other type operators, you can use <code>typeof</code> to conveniently express many patterns.\nFor an example, let’s start by looking at the predefined type <code>ReturnType&#x3C;T></code>.\nIt takes a <em>function type</em> and produces its return type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type Predicate = (x: unknown) => boolean;\ntype K = ReturnType&#x3C;Predicate>;\n//   ^?\n</code></pre>\n<p>If we try to use <code>ReturnType</code> on a function name, we see an instructive error:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2749\nfunction f() {\n  return { x: 10, y: 3 };\n}\ntype P = ReturnType&#x3C;f>;\n</code></pre>\n<p>Remember that <em>values</em> and <em>types</em> aren’t the same thing.\nTo refer to the <em>type</em> that the <em>value <code>f</code></em> has, we use <code>typeof</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function f() {\n  return { x: 10, y: 3 };\n}\ntype P = ReturnType&#x3C;typeof f>;\n//   ^?\n</code></pre>\n<h3 id=\"limitations\" style=\"position:relative;\"><a href=\"#limitations\" aria-label=\"limitations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Limitations</h3>\n<p>TypeScript intentionally limits the sorts of expressions you can use <code>typeof</code> on.</p>\n<p>Specifically, it’s only legal to use <code>typeof</code> on identifiers (i.e. variable names) or their properties.\nThis helps avoid the confusing trap of writing code you think is executing, but isn’t:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 1005\ndeclare const msgbox: () => boolean;\n// type msgbox = any;\n// ---cut---\n// Meant to use = ReturnType&#x3C;typeof msgbox>\nlet shouldContinue: typeof msgbox(\"Are you sure you want to continue?\");\n</code></pre>","headings":[{"value":"The typeof type operator","depth":2},{"value":"Limitations","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/typeof-types.html","title":"Typeof Type Operator","disable_toc":null,"handbook":null,"oneline":"Using the typeof operator in type contexts.","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Keyof Type Operator","oneline":"Using the keyof operator in type contexts.","permalink":"/docs/handbook/2/keyof-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Indexed Access Types","oneline":"Using Type['a'] syntax to access a subset of a type.","permalink":"/docs/handbook/2/indexed-access-types.html"}}}},"pageContext":{"id":"1-typeof-type-operator","slug":"/docs/handbook/2/typeof-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md","previousID":"47266697-2c0f-54b5-a619-6bbebed6ae17","nextID":"bbf36692-5f42-5b37-8580-7f3c6462bcc4","lang":"en","modifiedTime":"2021-05-31T12:14:15.532Z"}},"staticQueryHashes":[]}