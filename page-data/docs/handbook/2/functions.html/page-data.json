{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/functions.html","result":{"data":{"markdownRemark":{"id":"422270df-d646-5834-9840-02d1b353d697","excerpt":"Functions are the basic building block of any application, whether they’re local functions, imported from another module, or methods on a class.\nThey’re also…","html":"<p>Functions are the basic building block of any application, whether they’re local functions, imported from another module, or methods on a class.\nThey’re also values, and just like other values, TypeScript has many ways to describe how functions can be called.\nLet’s learn about how to write types that describe functions.</p>\n<h2 id=\"function-type-expressions\" style=\"position:relative;\"><a href=\"#function-type-expressions\" aria-label=\"function type expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Type Expressions</h2>\n<p>The simplest way to describe a function is with a <em>function type expression</em>.\nThese types are syntactically similar to arrow functions:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function greeter(fn: (a: string) => void) {\n  fn(\"Hello, World\");\n}\n\nfunction printToConsole(s: string) {\n  console.log(s);\n}\n\ngreeter(printToConsole);\n</code></pre>\n<p>The syntax <code>(a: string) => void</code> means “a function with one parameter, named <code>a</code>, of type string, that doesn’t have a return value”.\nJust like with function declarations, if a parameter type isn’t specified, it’s implicitly <code>any</code>.</p>\n<blockquote>\n<p>Note that the parameter name is <strong>required</strong>. The function type <code>(string) => void</code> means “a function with a parameter named <code>string</code> of type <code>any</code>“!</p>\n</blockquote>\n<p>Of course, we can use a type alias to name a function type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type GreetFunction = (a: string) => void;\nfunction greeter(fn: GreetFunction) {\n  // ...\n}\n</code></pre>\n<h2 id=\"call-signatures\" style=\"position:relative;\"><a href=\"#call-signatures\" aria-label=\"call signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Call Signatures</h2>\n<p>In JavaScript, functions can have properties in addition to being callable.\nHowever, the function type expression syntax doesn’t allow for declaring properties.\nIf we want to describe something callable with properties, we can write a <em>call signature</em> in an object type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type DescribableFunction = {\n  description: string;\n  (someArg: number): boolean;\n};\nfunction doSomething(fn: DescribableFunction) {\n  console.log(fn.description + \" returned \" + fn(6));\n}\n</code></pre>\n<p>Note that the syntax is slightly different compared to a function type expression - use <code>:</code> between the parameter list and the return type rather than <code>=></code>.</p>\n<h2 id=\"construct-signatures\" style=\"position:relative;\"><a href=\"#construct-signatures\" aria-label=\"construct signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Construct Signatures</h2>\n<p>JavaScript functions can also be invoked with the <code>new</code> operator.\nTypeScript refers to these as <em>constructors</em> because they usually create a new object.\nYou can write a <em>construct signature</em> by adding the <code>new</code> keyword in front of a call signature:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type SomeObject = any;\n// ---cut---\ntype SomeConstructor = {\n  new (s: string): SomeObject;\n};\nfunction fn(ctor: SomeConstructor) {\n  return new ctor(\"hello\");\n}\n</code></pre>\n<p>Some objects, like JavaScript’s <code>Date</code> object, can be called with or without <code>new</code>.\nYou can combine call and construct signatures in the same type arbitrarily:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface CallOrConstruct {\n  new (s: string): Date;\n  (n?: number): number;\n}\n</code></pre>\n<h2 id=\"generic-functions\" style=\"position:relative;\"><a href=\"#generic-functions\" aria-label=\"generic functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Functions</h2>\n<p>It’s common to write a function where the types of the input relate to the type of the output, or where the types of two inputs are related in some way.\nLet’s consider for a moment a function that returns the first element of an array:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function firstElement(arr: any[]) {\n  return arr[0];\n}\n</code></pre>\n<p>This function does its job, but unfortunately has the return type <code>any</code>.\nIt’d be better if the function returned the type of the array element.</p>\n<p>In TypeScript, <em>generics</em> are used when we want to describe a correspondence between two values.\nWe do this by declaring a <em>type parameter</em> in the function signature:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function firstElement&#x3C;Type>(arr: Type[]): Type {\n  return arr[0];\n}\n</code></pre>\n<p>By adding a type parameter <code>Type</code> to this function and using it in two places, we’ve created a link between the input of the function (the array) and the output (the return value).\nNow when we call it, a more specific type comes out:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function firstElement&#x3C;Type>(arr: Type[]): Type;\n// ---cut---\n// s is of type 'string'\nconst s = firstElement([\"a\", \"b\", \"c\"]);\n// n is of type 'number'\nconst n = firstElement([1, 2, 3]);\n</code></pre>\n<h3 id=\"inference\" style=\"position:relative;\"><a href=\"#inference\" aria-label=\"inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inference</h3>\n<p>Note that we didn’t have to specify <code>Type</code> in this sample.\nThe type was <em>inferred</em> - chosen automatically - by TypeScript.</p>\n<p>We can use multiple type parameters as well.\nFor example, a standalone version of <code>map</code> would look like this:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// prettier-ignore\nfunction map&#x3C;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[] {\n  return arr.map(func);\n}\n\n// Parameter 'n' is of type 'string'\n// 'parsed' is of type 'number[]'\nconst parsed = map([\"1\", \"2\", \"3\"], (n) => parseInt(n));\n</code></pre>\n<p>Note that in this example, TypeScript could infer both the type of the <code>Input</code> type parameter (from the given <code>string</code> array), as well as the <code>Output</code> type parameter based on the return value of the function expression (<code>number</code>).</p>\n<h3 id=\"constraints\" style=\"position:relative;\"><a href=\"#constraints\" aria-label=\"constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constraints</h3>\n<p>We’ve written some generic functions that can work on <em>any</em> kind of value.\nSometimes we want to relate two values, but can only operate on a certain subset of values.\nIn this case, we can use a <em>constraint</em> to limit the kinds of types that a type parameter can accept.</p>\n<p>Let’s write a function that returns the longer of two values.\nTo do this, we need a <code>length</code> property that’s a number.\nWe <em>constrain</em> the type parameter to that type by writing an <code>extends</code> clause:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345 2322\nfunction longest&#x3C;Type extends { length: number }>(a: Type, b: Type) {\n  if (a.length >= b.length) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n// longerArray is of type 'number[]'\nconst longerArray = longest([1, 2], [1, 2, 3]);\n// longerString is of type 'string'\nconst longerString = longest(\"alice\", \"bob\");\n// Error! Numbers don't have a 'length' property\nconst notOK = longest(10, 100);\n</code></pre>\n<p>There are few interesting things to note in this example.\nWe allowed TypeScript to <em>infer</em> the return type of <code>longest</code>.\nReturn type inference also works on generic functions.</p>\n<p>Because we constrained <code>Type</code> to <code>{ length: number }</code>, we were allowed to access the <code>.length</code> property of the <code>a</code> and <code>b</code> parameters.\nWithout the type constraint, we wouldn’t be able to access those properties because the values might have been some other type without a length property.</p>\n<p>The types of <code>longerArray</code> and <code>longerString</code> were inferred based on the arguments.\nRemember, generics are all about relating two or more values with the same type!</p>\n<p>Finally, just as we’d like, the call to <code>longest(10, 100)</code> is rejected because the <code>number</code> type doesn’t have a <code>.length</code> property.</p>\n<h3 id=\"working-with-constrained-values\" style=\"position:relative;\"><a href=\"#working-with-constrained-values\" aria-label=\"working with constrained values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Constrained Values</h3>\n<p>Here’s a common error when working with generic constraints:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nfunction minimumLength&#x3C;Type extends { length: number }>(\n  obj: Type,\n  minimum: number\n): Type {\n  if (obj.length >= minimum) {\n    return obj;\n  } else {\n    return { length: minimum };\n  }\n}\n</code></pre>\n<p>It might look like this function is OK - <code>Type</code> is constrained to <code>{ length: number }</code>, and the function either returns <code>Type</code> or a value matching that constraint.\nThe problem is that the function promises to return the <em>same</em> kind of object as was passed in, not just <em>some</em> object matching the constraint.\nIf this code were legal, you could write code that definitely wouldn’t work:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function minimumLength&#x3C;Type extends { length: number }>(\n  obj: Type,\n  minimum: number\n): Type;\n// ---cut---\n// 'arr' gets value { length: 6 }\nconst arr = minimumLength([1, 2, 3], 6);\n// and crashes here because arrays have\n// a 'slice' method, but not the returned object!\nconsole.log(arr.slice(0));\n</code></pre>\n<h3 id=\"specifying-type-arguments\" style=\"position:relative;\"><a href=\"#specifying-type-arguments\" aria-label=\"specifying type arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying Type Arguments</h3>\n<p>TypeScript can usually infer the intended type arguments in a generic call, but not always.\nFor example, let’s say you wrote a function to combine two arrays:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function combine&#x3C;Type>(arr1: Type[], arr2: Type[]): Type[] {\n  return arr1.concat(arr2);\n}\n</code></pre>\n<p>Normally it would be an error to call this function with mismatched arrays:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\ndeclare function combine&#x3C;Type>(arr1: Type[], arr2: Type[]): Type[];\n// ---cut---\nconst arr = combine([1, 2, 3], [\"hello\"]);\n</code></pre>\n<p>If you intended to do this, however, you could manually specify <code>Type</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function combine&#x3C;Type>(arr1: Type[], arr2: Type[]): Type[];\n// ---cut---\nconst arr = combine&#x3C;string | number>([1, 2, 3], [\"hello\"]);\n</code></pre>\n<h3 id=\"guidelines-for-writing-good-generic-functions\" style=\"position:relative;\"><a href=\"#guidelines-for-writing-good-generic-functions\" aria-label=\"guidelines for writing good generic functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Guidelines for Writing Good Generic Functions</h3>\n<p>Writing generic functions is fun, and it can be easy to get carried away with type parameters.\nHaving too many type parameters or using constraints where they aren’t needed can make inference less successful, frustrating callers of your function.</p>\n<h4 id=\"push-type-parameters-down\" style=\"position:relative;\"><a href=\"#push-type-parameters-down\" aria-label=\"push type parameters down permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Push Type Parameters Down</h4>\n<p>Here are two ways of writing a function that appear similar:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function firstElement1&#x3C;Type>(arr: Type[]) {\n  return arr[0];\n}\n\nfunction firstElement2&#x3C;Type extends any[]>(arr: Type) {\n  return arr[0];\n}\n\n// a: number (good)\nconst a = firstElement1([1, 2, 3]);\n// b: any (bad)\nconst b = firstElement2([1, 2, 3]);\n</code></pre>\n<p>These might seem identical at first glance, but <code>firstElement1</code> is a much better way to write this function.\nIts inferred return type is <code>Type</code>, but <code>firstElement2</code>’s inferred return type is <code>any</code> because TypeScript has to resolve the <code>arr[0]</code> expression using the constraint type, rather than “waiting” to resolve the element during a call.</p>\n<blockquote>\n<p><strong>Rule</strong>: When possible, use the type parameter itself rather than constraining it</p>\n</blockquote>\n<h4 id=\"use-fewer-type-parameters\" style=\"position:relative;\"><a href=\"#use-fewer-type-parameters\" aria-label=\"use fewer type parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Fewer Type Parameters</h4>\n<p>Here’s another pair of similar functions:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function filter1&#x3C;Type>(arr: Type[], func: (arg: Type) => boolean): Type[] {\n  return arr.filter(func);\n}\n\nfunction filter2&#x3C;Type, Func extends (arg: Type) => boolean>(\n  arr: Type[],\n  func: Func\n): Type[] {\n  return arr.filter(func);\n}\n</code></pre>\n<p>We’ve created a type parameter <code>Func</code> that <em>doesn’t relate two values</em>.\nThat’s always a red flag, because it means callers wanting to specify type arguments have to manually specify an extra type argument for no reason.\n<code>Func</code> doesn’t do anything but make the function harder to read and reason about!</p>\n<blockquote>\n<p><strong>Rule</strong>: Always use as few type parameters as possible</p>\n</blockquote>\n<h4 id=\"type-parameters-should-appear-twice\" style=\"position:relative;\"><a href=\"#type-parameters-should-appear-twice\" aria-label=\"type parameters should appear twice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Parameters Should Appear Twice</h4>\n<p>Sometimes we forget that a function might not need to be generic:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function greet&#x3C;Str extends string>(s: Str) {\n  console.log(\"Hello, \" + s);\n}\n\ngreet(\"world\");\n</code></pre>\n<p>We could just as easily have written a simpler version:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function greet(s: string) {\n  console.log(\"Hello, \" + s);\n}\n</code></pre>\n<p>Remember, type parameters are for <em>relating the types of multiple values</em>.\nIf a type parameter is only used once in the function signature, it’s not relating anything.</p>\n<blockquote>\n<p><strong>Rule</strong>: If a type parameter only appears in one location, strongly reconsider if you actually need it</p>\n</blockquote>\n<h2 id=\"optional-parameters\" style=\"position:relative;\"><a href=\"#optional-parameters\" aria-label=\"optional parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Parameters</h2>\n<p>Functions in JavaScript often take a variable number of arguments.\nFor example, the <code>toFixed</code> method of <code>number</code> takes an optional digit count:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function f(n: number) {\n  console.log(n.toFixed()); // 0 arguments\n  console.log(n.toFixed(3)); // 1 argument\n}\n</code></pre>\n<p>We can model this in TypeScript by marking the parameter as <em>optional</em> with <code>?</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function f(x?: number) {\n  // ...\n}\nf(); // OK\nf(10); // OK\n</code></pre>\n<p>Although the parameter is specified as type <code>number</code>, the <code>x</code> parameter will actually have the type <code>number | undefined</code> because unspecified parameters in JavaScript get the value <code>undefined</code>.</p>\n<p>You can also provide a parameter <em>default</em>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function f(x = 10) {\n  // ...\n}\n</code></pre>\n<p>Now in the body of <code>f</code>, <code>x</code> will have type <code>number</code> because any <code>undefined</code> argument will be replaced with <code>10</code>.\nNote that when a parameter is optional, callers can always pass <code>undefined</code>, as this simply simulates a “missing” argument:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function f(x?: number): void;\n// cut\n// All OK\nf();\nf(10);\nf(undefined);\n</code></pre>\n<h3 id=\"optional-parameters-in-callbacks\" style=\"position:relative;\"><a href=\"#optional-parameters-in-callbacks\" aria-label=\"optional parameters in callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Parameters in Callbacks</h3>\n<p>Once you’ve learned about optional parameters and function type expressions, it’s very easy to make the following mistakes when writing functions that invoke callbacks:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function myForEach(arr: any[], callback: (arg: any, index?: number) => void) {\n  for (let i = 0; i &#x3C; arr.length; i++) {\n    callback(arr[i], i);\n  }\n}\n</code></pre>\n<p>What people usually intend when writing <code>index?</code> as an optional parameter is that they want both of these calls to be legal:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2532\ndeclare function myForEach(\n  arr: any[],\n  callback: (arg: any, index?: number) => void\n): void;\n// ---cut---\nmyForEach([1, 2, 3], (a) => console.log(a));\nmyForEach([1, 2, 3], (a, i) => console.log(a, i));\n</code></pre>\n<p>What this <em>actually</em> means is that <em><code>callback</code> might get invoked with one argument</em>.\nIn other words, the function definition says that the implementation might look like this:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2532\nfunction myForEach(arr: any[], callback: (arg: any, index?: number) => void) {\n  for (let i = 0; i &#x3C; arr.length; i++) {\n    // I don't feel like providing the index today\n    callback(arr[i]);\n  }\n}\n</code></pre>\n<p>In turn, TypeScript will enforce this meaning and issue errors that aren’t really possible:</p>\n<!-- prettier-ignore -->\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2532\ndeclare function myForEach(\n  arr: any[],\n  callback: (arg: any, index?: number) => void\n): void;\n// ---cut---\nmyForEach([1, 2, 3], (a, i) => {\n  console.log(i.toFixed());\n});\n</code></pre>\n<p>In JavaScript, if you call a function with more arguments than there are parameters, the extra arguments are simply ignored.\nTypeScript behaves the same way.\nFunctions with fewer parameters (of the same types) can always take the place of functions with more parameters.</p>\n<blockquote>\n<p>When writing a function type for a callback, <em>never</em> write an optional parameter unless you intend to <em>call</em> the function without passing that argument</p>\n</blockquote>\n<h2 id=\"function-overloads\" style=\"position:relative;\"><a href=\"#function-overloads\" aria-label=\"function overloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Overloads</h2>\n<p>Some JavaScript functions can be called in a variety of argument counts and types.\nFor example, you might write a function to produce a <code>Date</code> that takes either a timestamp (one argument) or a month/day/year specification (three arguments).</p>\n<p>In TypeScript, we can specify a function that can be called in different ways by writing <em>overload signatures</em>.\nTo do this, write some number of function signatures (usually two or more), followed by the body of the function:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2575\nfunction makeDate(timestamp: number): Date;\nfunction makeDate(m: number, d: number, y: number): Date;\nfunction makeDate(mOrTimestamp: number, d?: number, y?: number): Date {\n  if (d !== undefined &#x26;&#x26; y !== undefined) {\n    return new Date(y, mOrTimestamp, d);\n  } else {\n    return new Date(mOrTimestamp);\n  }\n}\nconst d1 = makeDate(12345678);\nconst d2 = makeDate(5, 5, 5);\nconst d3 = makeDate(1, 3);\n</code></pre>\n<p>In this example, we wrote two overloads: one accepting one argument, and another accepting three arguments.\nThese first two signatures are called the <em>overload signatures</em>.</p>\n<p>Then, we wrote a function implementation with a compatible signature.\nFunctions have an <em>implementation</em> signature, but this signature can’t be called directly.\nEven though we wrote a function with two optional parameters after the required one, it can’t be called with two parameters!</p>\n<h3 id=\"overload-signatures-and-the-implementation-signature\" style=\"position:relative;\"><a href=\"#overload-signatures-and-the-implementation-signature\" aria-label=\"overload signatures and the implementation signature permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overload Signatures and the Implementation Signature</h3>\n<p>This is a common source of confusion.\nOften people will write code like this and not understand why there is an error:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2554\nfunction fn(x: string): void;\nfunction fn() {\n  // ...\n}\n// Expected to be able to call with zero arguments\nfn();\n</code></pre>\n<p>Again, the signature used to write the function body can’t be “seen” from the outside.</p>\n<blockquote>\n<p>The signature of the <em>implementation</em> is not visible from the outside.\nWhen writing an overloaded function, you should always have <em>two</em> or more signatures above the implementation of the function.</p>\n</blockquote>\n<p>The implementation signature must also be <em>compatible</em> with the overload signatures.\nFor example, these functions have errors because the implementation signature doesn’t match the overloads in a correct way:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2394\nfunction fn(x: boolean): void;\n// Argument type isn't right\nfunction fn(x: string): void;\nfunction fn(x: boolean) {}\n</code></pre>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2394\nfunction fn(x: string): string;\n// Return type isn't right\nfunction fn(x: number): boolean;\nfunction fn(x: string | number) {\n  return \"oops\";\n}\n</code></pre>\n<h3 id=\"writing-good-overloads\" style=\"position:relative;\"><a href=\"#writing-good-overloads\" aria-label=\"writing good overloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Good Overloads</h3>\n<p>Like generics, there are a few guidelines you should follow when using function overloads.\nFollowing these principles will make your function easier to call, easier to understand, and easier to implement.</p>\n<p>Let’s consider a function that returns the length of a string or an array:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function len(s: string): number;\nfunction len(arr: any[]): number;\nfunction len(x: any) {\n  return x.length;\n}\n</code></pre>\n<p>This function is fine; we can invoke it with strings or arrays.\nHowever, we can’t invoke it with a value that might be a string <em>or</em> an array, because TypeScript can only resolve a function call to a single overload:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2769\ndeclare function len(s: string): number;\ndeclare function len(arr: any[]): number;\n// ---cut---\nlen(\"\"); // OK\nlen([0]); // OK\nlen(Math.random() > 0.5 ? \"hello\" : [0]);\n</code></pre>\n<p>Because both overloads have the same argument count and same return type, we can instead write a non-overloaded version of the function:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function len(x: any[] | string) {\n  return x.length;\n}\n</code></pre>\n<p>This is much better!\nCallers can invoke this with either sort of value, and as an added bonus, we don’t have to figure out a correct implementation signature.</p>\n<blockquote>\n<p>Always prefer parameters with union types instead of overloads when possible</p>\n</blockquote>\n<h3 id=\"declaring-this-in-a-function\" style=\"position:relative;\"><a href=\"#declaring-this-in-a-function\" aria-label=\"declaring this in a function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaring <code>this</code> in a Function</h3>\n<p>TypeScript will infer what the <code>this</code> should be in a function via code flow analysis, for example in the following:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const user = {\n  id: 123,\n\n  admin: false,\n  becomeAdmin: function () {\n    this.admin = true;\n  },\n};\n</code></pre>\n<p>TypeScript understands that the function <code>user.becomeAdmin</code> has a corresponding <code>this</code> which is the outer object <code>user</code>. <code>this</code>, <em>heh</em>, can be enough for a lot of cases, but there are a lot of cases where you need more control over what object <code>this</code> represents. The JavaScript specification states that you cannot have a parameter called <code>this</code>, and so TypeScript uses that syntax space to let you declare the type for <code>this</code> in the function body.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface User {\n  id: number;\n  admin: boolean;\n}\ndeclare const getDB: () => DB;\n// ---cut---\ninterface DB {\n  filterUsers(filter: (this: User) => boolean): User[];\n}\n\nconst db = getDB();\nconst admins = db.filterUsers(function (this: User) {\n  return this.admin;\n});\n</code></pre>\n<p>This pattern is common with callback-style APIs, where another object typically controls when your function is called. Note that you need to use <code>function</code> and not arrow functions to get this behavior:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7041 7017\ninterface User {\n  id: number;\n  isAdmin: boolean;\n}\ndeclare const getDB: () => DB;\n// ---cut---\ninterface DB {\n  filterUsers(filter: (this: User) => boolean): User[];\n}\n\nconst db = getDB();\nconst admins = db.filterUsers(() => this.admin);\n</code></pre>\n<h2 id=\"other-types-to-know-about\" style=\"position:relative;\"><a href=\"#other-types-to-know-about\" aria-label=\"other types to know about permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Types to Know About</h2>\n<p>There are some additional types you’ll want to recognize that appear often when working with function types.\nLike all types, you can use them everywhere, but these are especially relevant in the context of functions.</p>\n<h3 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>void</code></h3>\n<p><code>void</code> represents the return value of functions which don’t return a value.\nIt’s the inferred type any time a function doesn’t have any <code>return</code> statements, or doesn’t return any explicit value from those return statements:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// The inferred return type is void\nfunction noop() {\n  return;\n}\n</code></pre>\n<p>In JavaScript, a function that doesn’t return any value will implicitly return the value <code>undefined</code>.\nHowever, <code>void</code> and <code>undefined</code> are not the same thing in TypeScript.\nThere are further details at the end of this chapter.</p>\n<blockquote>\n<p><code>void</code> is not the same as <code>undefined</code>.</p>\n</blockquote>\n<h3 id=\"object\" style=\"position:relative;\"><a href=\"#object\" aria-label=\"object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>object</code></h3>\n<p>The special type <code>object</code> refers to any value that isn’t a primitive (<code>string</code>, <code>number</code>, <code>boolean</code>, <code>symbol</code>, <code>null</code>, or <code>undefined</code>).\nThis is different from the <em>empty object type</em> <code>{ }</code>, and also different from the global type <code>Object</code>.\nIt’s very likely you will never use <code>Object</code>.</p>\n<blockquote>\n<p><code>object</code> is not <code>Object</code>. <strong>Always</strong> use <code>object</code>!</p>\n</blockquote>\n<p>Note that in JavaScript, function values are objects: They have properties, have <code>Object.prototype</code> in their prototype chain, are <code>instanceof Object</code>, you can call <code>Object.keys</code> on them, and so on.\nFor this reason, function types are considered to be <code>object</code>s in TypeScript.</p>\n<h3 id=\"unknown\" style=\"position:relative;\"><a href=\"#unknown\" aria-label=\"unknown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>unknown</code></h3>\n<p>The <code>unknown</code> type represents <em>any</em> value.\nThis is similar to the <code>any</code> type, but is safer because it’s not legal to do anything with an <code>unknown</code> value:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2571\nfunction f1(a: any) {\n  a.b(); // OK\n}\nfunction f2(a: unknown) {\n  a.b();\n}\n</code></pre>\n<p>This is useful when describing function types because you can describe functions that accept any value without having <code>any</code> values in your function body.</p>\n<p>Conversely, you can describe a function that returns a value of unknown type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare const someRandomString: string;\n// ---cut---\nfunction safeParse(s: string): unknown {\n  return JSON.parse(s);\n}\n\n// Need to be careful with 'obj'!\nconst obj = safeParse(someRandomString);\n</code></pre>\n<h3 id=\"never\" style=\"position:relative;\"><a href=\"#never\" aria-label=\"never permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>never</code></h3>\n<p>Some functions <em>never</em> return a value:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function fail(msg: string): never {\n  throw new Error(msg);\n}\n</code></pre>\n<p>The <code>never</code> type represents values which are <em>never</em> observed.\nIn a return type, this means that the function throws an exception or terminates execution of the program.</p>\n<p><code>never</code> also appears when TypeScript determines there’s nothing left in a union.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function fn(x: string | number) {\n  if (typeof x === \"string\") {\n    // do something\n  } else if (typeof x === \"number\") {\n    // do something else\n  } else {\n    x; // has type 'never'!\n  }\n}\n</code></pre>\n<h3 id=\"function\" style=\"position:relative;\"><a href=\"#function\" aria-label=\"function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Function</code></h3>\n<p>The global type <code>Function</code> describes properties like <code>bind</code>, <code>call</code>, <code>apply</code>, and others present on all function values in JavaScript.\nIt also has the special property that values of type <code>Function</code> can always be called; these calls return <code>any</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function doSomething(f: Function) {\n  f(1, 2, 3);\n}\n</code></pre>\n<p>This is an <em>untyped function call</em> and is generally best avoided because of the unsafe <code>any</code> return type.</p>\n<p>If you need to accept an arbitrary function but don’t intend to call it, the type <code>() => void</code> is generally safer.</p>\n<h2 id=\"rest-parameters-and-arguments\" style=\"position:relative;\"><a href=\"#rest-parameters-and-arguments\" aria-label=\"rest parameters and arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest Parameters and Arguments</h2>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters'>Rest Parameters</a><br/>\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax'>Spread Syntax</a><br/>\n   </p>\n</blockquote>\n<h3 id=\"rest-parameters\" style=\"position:relative;\"><a href=\"#rest-parameters\" aria-label=\"rest parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest Parameters</h3>\n<p>In addition to using optional parameters or overloads to make functions that can accept a variety of fixed argument counts, we can also define functions that take an <em>unbounded</em> number of arguments using <em>rest parameters</em>.</p>\n<p>A rest parameter appears after all other parameters, and uses the <code>...</code> syntax:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function multiply(n: number, ...m: number[]) {\n  return m.map((x) => n * x);\n}\n// 'a' gets value [10, 20, 30, 40]\nconst a = multiply(10, 1, 2, 3, 4);\n</code></pre>\n<p>In TypeScript, the type annotation on these parameters is implicitly <code>any[]</code> instead of <code>any</code>, and any type annotation given must be of the form <code>Array&#x3C;T></code>or <code>T[]</code>, or a tuple type (which we’ll learn about later).</p>\n<h3 id=\"rest-arguments\" style=\"position:relative;\"><a href=\"#rest-arguments\" aria-label=\"rest arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest Arguments</h3>\n<p>Conversely, we can <em>provide</em> a variable number of arguments from an array using the spread syntax.\nFor example, the <code>push</code> method of arrays takes any number of arguments:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\narr1.push(...arr2);\n</code></pre>\n<p>Note that in general, TypeScript does not assume that arrays are immutable.\nThis can lead to some surprising behavior:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2556\n// Inferred type is number[] -- \"an array with zero or more numbers\",\n// not specifically two numbers\nconst args = [8, 5];\nconst angle = Math.atan2(...args);\n</code></pre>\n<p>The best fix for this situation depends a bit on your code, but in general a <code>const</code> context is the most straightforward solution:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Inferred as 2-length tuple\nconst args = [8, 5] as const;\n// OK\nconst angle = Math.atan2(...args);\n</code></pre>\n<p>Using rest arguments may require turning on <a href=\"/tsconfig/#downlevelIteration\"><code>downlevelIteration</code></a> when targeting older runtimes.</p>\n<!-- TODO link to downlevel iteration -->\n<h2 id=\"parameter-destructuring\" style=\"position:relative;\"><a href=\"#parameter-destructuring\" aria-label=\"parameter destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Destructuring</h2>\n<blockquote class='bg-reading'>\n   <p>Background Reading:<br />\n   <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment'>Destructuring Assignment</a><br/>\n   </p>\n</blockquote>\n<p>You can use parameter destructuring to conveniently unpack objects provided as an argument into one or more local variables in the function body.\nIn JavaScript, it looks like this:</p>\n<pre><code class=\"language-js\">function sum({ a, b, c }) {\n  console.log(a + b + c);\n}\nsum({ a: 10, b: 3, c: 9 });\n</code></pre>\n<p>The type annotation for the object goes after the destructuring syntax:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function sum({ a, b, c }: { a: number; b: number; c: number }) {\n  console.log(a + b + c);\n}\n</code></pre>\n<p>This can look a bit verbose, but you can use a named type here as well:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Same as prior example\ntype ABC = { a: number; b: number; c: number };\nfunction sum({ a, b, c }: ABC) {\n  console.log(a + b + c);\n}\n</code></pre>\n<h2 id=\"assignability-of-functions\" style=\"position:relative;\"><a href=\"#assignability-of-functions\" aria-label=\"assignability of functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assignability of Functions</h2>\n<h3 id=\"return-type-void\" style=\"position:relative;\"><a href=\"#return-type-void\" aria-label=\"return type void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Return type <code>void</code></h3>\n<p>The <code>void</code> return type for functions can produce some unusual, but expected behavior.</p>\n<p>Contextual typing with a return type of <code>void</code> does <strong>not</strong> force functions to <strong>not</strong> return something. Another way to say this is a contextual function type with a <code>void</code> return type (<code>type vf = () => void</code>), when implemented, can return <em>any</em> other value, but it will be ignored.</p>\n<p>Thus, the following implementations of the type <code>() => void</code> are valid:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type voidFunc = () => void;\n\nconst f1: voidFunc = () => {\n  return true;\n};\n\nconst f2: voidFunc = () => true;\n\nconst f3: voidFunc = function () {\n  return true;\n};\n</code></pre>\n<p>And when the return value of one of these functions is assigned to another variable, it will retain the type of <code>void</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type voidFunc = () => void;\n\nconst f1: voidFunc = () => {\n  return true;\n};\n\nconst f2: voidFunc = () => true;\n\nconst f3: voidFunc = function () {\n  return true;\n};\n// ---cut---\nconst v1 = f1();\n\nconst v2 = f2();\n\nconst v3 = f3();\n</code></pre>\n<p>This behavior exists so that the following code is valid even though <code>Array.prototype.push</code> returns a number and the <code>Array.prototype.forEach</code> method expects a function with a return type of <code>void</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const src = [1, 2, 3];\nconst dst = [0];\n\nsrc.forEach((el) => dst.push(el));\n</code></pre>\n<p>There is one other special case to be aware of, when a literal function definition has a <code>void</code> return type, that function must <strong>not</strong> return anything.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function f2(): void {\n  // @ts-expect-error\n  return true;\n}\n\nconst f3 = function (): void {\n  // @ts-expect-error\n  return true;\n};\n</code></pre>\n<p>For more on <code>void</code> please refer to these other documentation entries:</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#void\">v1 handbook</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#void\">v2 handbook</a></li>\n<li><a href=\"https://github.com/Microsoft/TypeScript/wiki/FAQ#why-are-functions-returning-non-void-assignable-to-function-returning-void\">FAQ - “Why are functions returning non-void assignable to function returning void?”</a></li>\n</ul>","headings":[{"value":"Function Type Expressions","depth":2},{"value":"Call Signatures","depth":2},{"value":"Construct Signatures","depth":2},{"value":"Generic Functions","depth":2},{"value":"Inference","depth":3},{"value":"Constraints","depth":3},{"value":"Working with Constrained Values","depth":3},{"value":"Specifying Type Arguments","depth":3},{"value":"Guidelines for Writing Good Generic Functions","depth":3},{"value":"Push Type Parameters Down","depth":4},{"value":"Use Fewer Type Parameters","depth":4},{"value":"Type Parameters Should Appear Twice","depth":4},{"value":"Optional Parameters","depth":2},{"value":"Optional Parameters in Callbacks","depth":3},{"value":"Function Overloads","depth":2},{"value":"Overload Signatures and the Implementation Signature","depth":3},{"value":"Writing Good Overloads","depth":3},{"value":"Declaring this in a Function","depth":3},{"value":"Other Types to Know About","depth":2},{"value":"void","depth":3},{"value":"object","depth":3},{"value":"unknown","depth":3},{"value":"never","depth":3},{"value":"Function","depth":3},{"value":"Rest Parameters and Arguments","depth":2},{"value":"Rest Parameters","depth":3},{"value":"Rest Arguments","depth":3},{"value":"Parameter Destructuring","depth":2},{"value":"Assignability of Functions","depth":2},{"value":"Return type void","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/functions.html","title":"More on Functions","disable_toc":null,"handbook":null,"oneline":"Learn about how Functions work in TypeScript.","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Narrowing","oneline":"Understand how TypeScript uses JavaScript knowledge to reduce the amount of type syntax in your projects.","permalink":"/docs/handbook/2/narrowing.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Object Types","oneline":"How TypeScript describes the shapes of JavaScript objects.","permalink":"/docs/handbook/2/objects.html"}}}},"pageContext":{"id":"1-more-on-functions","slug":"/docs/handbook/2/functions.html","repoPath":"/packages/documentation/copy/en/handbook-v2/More on Functions.md","previousID":"02637503-46d1-5d11-b2cc-807fa5837668","nextID":"cccf765e-760f-55c1-97d5-a1114863bbd7","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}