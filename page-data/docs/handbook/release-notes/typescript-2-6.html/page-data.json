{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-2-6.html","result":{"data":{"markdownRemark":{"id":"a7a52bd1-3a4f-57fb-9061-a2ba08e6da19","excerpt":"Strict function types TypeScript 2.6 introduces a new strict checking flag, --strictFunctionTypes.\nThe --strictFunctionTypes switch is part of the --strict…","html":"<h2 id=\"strict-function-types\" style=\"position:relative;\"><a href=\"#strict-function-types\" aria-label=\"strict function types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strict function types</h2>\n<p>TypeScript 2.6 introduces a new strict checking flag, <code>--strictFunctionTypes</code>.\nThe <code>--strictFunctionTypes</code> switch is part of the <code>--strict</code> family of switches, meaning that it defaults to on in <code>--strict</code> mode.\nYou can opt-out by setting <code>--strictFunctionTypes false</code> on your command line or in your tsconfig.json.</p>\n<p>Under <code>--strictFunctionTypes</code> function type parameter positions are checked <em>contravariantly</em> instead of <em>bivariantly</em>.\nFor some background on what variance means for function types check out <a href=\"https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance\">What are covariance and contravariance?</a>.</p>\n<p>The stricter checking applies to all function types, <em>except</em> those originating in method or constructor declarations.\nMethods are excluded specifically to ensure generic classes and interfaces (such as <code>Array&#x3C;T></code>) continue to mostly relate covariantly.</p>\n<p>Consider the following example in which <code>Animal</code> is the supertype of <code>Dog</code> and <code>Cat</code>:</p>\n<pre><code class=\"language-ts\">declare let f1: (x: Animal) => void;\ndeclare let f2: (x: Dog) => void;\ndeclare let f3: (x: Cat) => void;\nf1 = f2; // Error with --strictFunctionTypes\nf2 = f1; // Ok\nf2 = f3; // Error\n</code></pre>\n<p>The first assignment is permitted in default type checking mode, but flagged as an error in strict function types mode.\nIntuitively, the default mode permits the assignment because it is <em>possibly</em> sound, whereas strict function types mode makes it an error because it isn’t <em>provably</em> sound.\nIn either mode the third assignment is an error because it is <em>never</em> sound.</p>\n<p>Another way to describe the example is that the type <code>(x: T) => void</code> is <em>bivariant</em> (i.e. covariant <em>or</em> contravariant) for <code>T</code> in default type checking mode, but <em>contravariant</em> for <code>T</code> in strict function types mode.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">interface Comparer&#x3C;T> {\n  compare: (a: T, b: T) => number;\n}\n\ndeclare let animalComparer: Comparer&#x3C;Animal>;\ndeclare let dogComparer: Comparer&#x3C;Dog>;\n\nanimalComparer = dogComparer; // Error\ndogComparer = animalComparer; // Ok\n</code></pre>\n<p>The first assignment is now an error. Effectively, <code>T</code> is contravariant in <code>Comparer&#x3C;T></code> because it is used only in function type parameter positions.</p>\n<p>By the way, note that whereas some languages (e.g. C# and Scala) require variance annotations (<code>out</code>/<code>in</code> or <code>+</code>/<code>-</code>), variance emerges naturally from the actual use of a type parameter within a generic type due to TypeScript’s structural type system.</p>\n<h5 id=\"note\" style=\"position:relative;\"><a href=\"#note\" aria-label=\"note permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Note</h5>\n<p>Under <code>--strictFunctionTypes</code> the first assignment is still permitted if <code>compare</code> was declared as a method.\nEffectively, <code>T</code> is bivariant in <code>Comparer&#x3C;T></code> because it is used only in method parameter positions.</p>\n<pre><code class=\"language-ts\">interface Comparer&#x3C;T> {\n  compare(a: T, b: T): number;\n}\n\ndeclare let animalComparer: Comparer&#x3C;Animal>;\ndeclare let dogComparer: Comparer&#x3C;Dog>;\n\nanimalComparer = dogComparer; // Ok because of bivariance\ndogComparer = animalComparer; // Ok\n</code></pre>\n<p>TypeScript 2.6 also improves type inference involving contravariant positions:</p>\n<pre><code class=\"language-ts\">function combine&#x3C;T>(...funcs: ((x: T) => void)[]): (x: T) => void {\n  return x => {\n    for (const f of funcs) f(x);\n  };\n}\n\nfunction animalFunc(x: Animal) {}\nfunction dogFunc(x: Dog) {}\n\nlet combined = combine(animalFunc, dogFunc); // (x: Dog) => void\n</code></pre>\n<p>Above, all inferences for <code>T</code> originate in contravariant positions, and we therefore infer the <em>best common subtype</em> for <code>T</code>.\nThis contrasts with inferences from covariant positions, where we infer the <em>best common supertype</em>.</p>\n<h2 id=\"cache-tagged-template-objects-in-modules\" style=\"position:relative;\"><a href=\"#cache-tagged-template-objects-in-modules\" aria-label=\"cache tagged template objects in modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache tagged template objects in modules</h2>\n<p>TypeScript 2.6 fixes the tagged string template emit to align better with the ECMAScript spec.\nAs per the <a href=\"https://tc39.github.io/ecma262/#sec-gettemplateobject\">ECMAScript spec</a>, every time a template tag is evaluated, the <em>same</em> template strings object (the same <code>TemplateStringsArray</code>) should be passed as the first argument.\nBefore TypeScript 2.6, the generated output was a completely new template object each time.\nThough the string contents are the same, this emit affects libraries that use the identity of the string for cache invalidation purposes, e.g. <a href=\"https://github.com/PolymerLabs/lit-html/issues/58\">lit-html</a>.</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">export function id(x: TemplateStringsArray) {\n  return x;\n}\n\nexport function templateObjectFactory() {\n  return id`hello world`;\n}\n\nlet result = templateObjectFactory() === templateObjectFactory(); // true in TS 2.6\n</code></pre>\n<p>Results in the following generated code:</p>\n<pre><code class=\"language-js\">\"use strict\";\nvar __makeTemplateObject =\n  (this &#x26;&#x26; this.__makeTemplateObject) ||\n  function(cooked, raw) {\n    if (Object.defineProperty) {\n      Object.defineProperty(cooked, \"raw\", { value: raw });\n    } else {\n      cooked.raw = raw;\n    }\n    return cooked;\n  };\n\nfunction id(x) {\n  return x;\n}\n\nvar _a;\nfunction templateObjectFactory() {\n  return id(\n    _a || (_a = __makeTemplateObject([\"hello world\"], [\"hello world\"]))\n  );\n}\n\nvar result = templateObjectFactory() === templateObjectFactory();\n</code></pre>\n<blockquote>\n<p>Note: This change brings a new emit helper, <code>__makeTemplateObject</code>;\nif you are using <code>--importHelpers</code> with <a href=\"https://github.com/Microsoft/tslib\"><code>tslib</code></a>, an updated to version 1.8 or later.</p>\n</blockquote>\n<h2 id=\"localized-diagnostics-on-the-command-line\" style=\"position:relative;\"><a href=\"#localized-diagnostics-on-the-command-line\" aria-label=\"localized diagnostics on the command line permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Localized diagnostics on the command line</h2>\n<p>TypeScript 2.6 npm package ships with localized versions of diagnostic messages for 13 languages.\nThe localized messages are available when using <code>--locale</code> flag on the command line.</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>Error messages in Russian:</p>\n<pre><code class=\"language-sh\">c:\\ts>tsc --v\nVersion 2.6.0-dev.20171003\n\nc:\\ts>tsc --locale ru --pretty c:\\test\\a.ts\n\n../test/a.ts(1,5): error TS2322: Тип \"\"string\"\" не может быть назначен для типа \"number\".\n\n1 var x: number = \"string\";\n      ~\n</code></pre>\n<p>And help in Japanese:</p>\n<pre><code class=\"language-sh\">PS C:\\ts> tsc --v\nVersion 2.6.0-dev.20171003\n\nPS C:\\ts> tsc --locale ja-jp\nバージョン 2.6.0-dev.20171003\n構文: tsc [オプション] [ファイル ...]\n\n例:  tsc hello.ts\n    tsc --outFile file.js file.ts\n    tsc @args.txt\n\nオプション:\n -h, --help                                 このメッセージを表示します。\n --all                                      コンパイラ オプションをすべて表示します。\n -v, --version                              コンパイラのバージョンを表示します。\n --init                                     TypeScript プロジェクトを初期化して、tsconfig.json ファイルを作成します。\n -p ファイルまたはディレクトリ, --project ファイルまたはディレクトリ  構成ファイルか、'tsconfig.json' を含むフォルダーにパスが指定されたプロジェクトをコ\nンパイルします。\n --pretty                                   色とコンテキストを使用してエラーとメッセージにスタイルを適用します (試験的)。\n -w, --watch                                入力ファイルを監視します。\n -t バージョン, --target バージョン                   ECMAScript のターゲット バージョンを指定します: 'ES3' (既定)、'ES5'、'ES2015'、'ES2016'、'ES2017'、'ES\nNEXT'。\n -m 種類, --module 種類                         モジュール コード生成を指定します: 'none'、'commonjs'、'amd'、'system'、'umd'、'es2015'、'ESNext'。\n --lib                                      コンパイルに含めるライブラリ ファイルを指定します:\n                                              'es5' 'es6' 'es2015' 'es7' 'es2016' 'es2017' 'esnext' 'dom' 'dom.iterable' 'webworker' 'scripthost' 'es201\n5.core' 'es2015.collection' 'es2015.generator' 'es2015.iterable' 'es2015.promise' 'es2015.proxy' 'es2015.reflect' 'es2015.symbol' 'es2015.symbol.wellkno\nwn' 'es2016.array.include' 'es2017.object' 'es2017.sharedmemory' 'es2017.string' 'es2017.intl' 'esnext.asynciterable'\n --allowJs                                  javascript ファイルのコンパイルを許可します。\n --jsx 種類                                   JSX コード生成を指定します: 'preserve'、'react-native'、'react'。\n -d, --declaration                          対応する '.d.ts' ファイルを生成します。\n --sourceMap                                対応する '.map' ファイルを生成します。\n --outFile ファイル                             出力を連結して 1 つのファイルを生成します。\n --outDir ディレクトリ                            ディレクトリへ出力構造をリダイレクトします。\n --removeComments                           コメントを出力しないでください。\n --noEmit                                   出力しないでください。\n --strict                                   strict 型チェックのオプションをすべて有効にします。\n --noImplicitAny                            暗黙的な 'any' 型を含む式と宣言に関するエラーを発生させます。\n --strictNullChecks                         厳格な null チェックを有効にします。\n --noImplicitThis                           暗黙的な 'any' 型を持つ 'this' 式でエラーが発生します。\n --alwaysStrict                             厳格モードで解析してソース ファイルごとに \"use strict\" を生成します。\n --noUnusedLocals                           使用されていないローカルに関するエラーを報告します。\n --noUnusedParameters                       使用されていないパラメーターに関するエラーを報告します。\n --noImplicitReturns                        関数の一部のコード パスが値を返さない場合にエラーを報告します。\n --noFallthroughCasesInSwitch               switch ステートメントに case のフォールスルーがある場合にエラーを報告します。\n --types                                    コンパイルに含む型宣言ファイル。\n @&#x3C;ファイル>\n</code></pre>\n<h2 id=\"suppress-errors-in-ts-files-using--ts-ignore-comments\" style=\"position:relative;\"><a href=\"#suppress-errors-in-ts-files-using--ts-ignore-comments\" aria-label=\"suppress errors in ts files using  ts ignore comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suppress errors in .ts files using ’// @ts-ignore’ comments</h2>\n<p>TypeScript 2.6 support suppressing errors in .js files using <code>// @ts-ignore</code> comments placed above the offending lines.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">if (false) {\n  // @ts-ignore: Unreachable code error\n  console.log(\"hello\");\n}\n</code></pre>\n<p>A <code>// @ts-ignore</code> comment suppresses all errors that originate on the following line.\nIt is recommended practice to have the remainder of the comment following <code>@ts-ignore</code> explain which error is being suppressed.</p>\n<p>Please note that this comment only suppresses the error reporting, and we recommend you use this comments <em>very sparingly</em>.</p>\n<h2 id=\"faster-tsc---watch\" style=\"position:relative;\"><a href=\"#faster-tsc---watch\" aria-label=\"faster tsc   watch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faster <code>tsc --watch</code></h2>\n<p>TypeScript 2.6 brings a faster <code>--watch</code> implementation.\nThe new version optimizes code generation and checking for code bases using ES modules.\nChanges detected in a module file will result in <em>only</em> regenerating the changed module, and files that depend on it, instead of the whole project.\nProjects with large number of files should reap the most benefit from this change.</p>\n<p>The new implementation also brings performance enhancements to watching in tsserver.\nThe watcher logic has been completely rewritten to respond faster to change events.</p>\n<h2 id=\"write-only-references-now-flagged-as-unused\" style=\"position:relative;\"><a href=\"#write-only-references-now-flagged-as-unused\" aria-label=\"write only references now flagged as unused permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Write-only references now flagged as unused</h2>\n<p>TypeScript 2.6 adds revised implementation the <code>--noUnusedLocals</code> and <code>--noUnusedParameters</code> <a href=\"/docs/handbook/compiler-options.html\">compiler options</a>.\nDeclarations are only written to but never read from are now flagged as unused.</p>\n<h5 id=\"example-4\" style=\"position:relative;\"><a href=\"#example-4\" aria-label=\"example 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>Bellow both <code>n</code> and <code>m</code> will be marked as unused, because their values are never <em>read</em>. Previously TypeScript would only check whether their values were <em>referenced</em>.</p>\n<pre><code class=\"language-ts\">function f(n: number) {\n  n = 0;\n}\n\nclass C {\n  private m: number;\n  constructor() {\n    this.m = 0;\n  }\n}\n</code></pre>\n<p>Also functions that are only called within their own bodies are considered unused.</p>\n<h5 id=\"example-5\" style=\"position:relative;\"><a href=\"#example-5\" aria-label=\"example 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">function f() {\n  f(); // Error: 'f' is declared but its value is never read\n}\n</code></pre>","headings":[{"value":"Strict function types","depth":2},{"value":"Example","depth":5},{"value":"Note","depth":5},{"value":"Cache tagged template objects in modules","depth":2},{"value":"Example","depth":5},{"value":"Localized diagnostics on the command line","depth":2},{"value":"Example","depth":5},{"value":"Suppress errors in .ts files using ’// @ts-ignore’ comments","depth":2},{"value":"Example","depth":5},{"value":"Faster tsc --watch","depth":2},{"value":"Write-only references now flagged as unused","depth":2},{"value":"Example","depth":5},{"value":"Example","depth":5}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-6.html","title":"TypeScript 2.6","disable_toc":null,"handbook":null,"oneline":"TypeScript 2.6 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-2.6","slug":"/docs/handbook/release-notes/typescript-2-6.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 2.6.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.540Z"}},"staticQueryHashes":[]}