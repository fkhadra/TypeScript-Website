{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-1-5.html","result":{"data":{"markdownRemark":{"id":"9aaa9cc2-7b16-56ae-956e-3049aaa59d5f","excerpt":"ES6 Modules TypeScript 1.5 supports ECMAScript 6 (ES6) modules.\nES6 modules are effectively TypeScript external modules with a new syntax: ES6 modules are…","html":"<h2 id=\"es6-modules\" style=\"position:relative;\"><a href=\"#es6-modules\" aria-label=\"es6 modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6 Modules</h2>\n<p>TypeScript 1.5 supports ECMAScript 6 (ES6) modules.\nES6 modules are effectively TypeScript external modules with a new syntax: ES6 modules are separately loaded source files that possibly import other modules and provide a number of externally accessible exports.\nES6 modules feature several new export and import declarations.\nIt is recommended that TypeScript libraries and applications be updated to use the new syntax, but this is not a requirement.\nThe new ES6 module syntax coexists with TypeScript’s original internal and external module constructs and the constructs can be mixed and matched at will.</p>\n<h4 id=\"export-declarations\" style=\"position:relative;\"><a href=\"#export-declarations\" aria-label=\"export declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Export Declarations</h4>\n<p>In addition to the existing TypeScript support for decorating declarations with <code>export</code>, module members can also be exported using separate export declarations, optionally specifying different names for exports using <code>as</code> clauses.</p>\n<pre><code class=\"language-ts\">interface Stream { ... }\nfunction writeToStream(stream: Stream, data: string) { ... }\nexport { Stream, writeToStream as write };  // writeToStream exported as write\n</code></pre>\n<p>Import declarations, as well, can optionally use <code>as</code> clauses to specify different local names for the imports. For example:</p>\n<pre><code class=\"language-ts\">import { read, write, standardOutput as stdout } from \"./inout\";\nvar s = read(stdout);\nwrite(stdout, s);\n</code></pre>\n<p>As an alternative to individual imports, a namespace import can be used to import an entire module:</p>\n<pre><code class=\"language-ts\">import * as io from \"./inout\";\nvar s = io.read(io.standardOutput);\nio.write(io.standardOutput, s);\n</code></pre>\n<h4 id=\"re-exporting\" style=\"position:relative;\"><a href=\"#re-exporting\" aria-label=\"re exporting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Re-exporting</h4>\n<p>Using <code>from</code> clause a module can copy the exports of a given module to the current module without introducing local names.</p>\n<pre><code class=\"language-ts\">export { read, write, standardOutput as stdout } from \"./inout\";\n</code></pre>\n<p><code>export *</code> can be used to re-export all exports of another module. This is useful for creating modules that aggregate the exports of several other modules.</p>\n<pre><code class=\"language-ts\">export function transform(s: string): string { ... }\nexport * from \"./mod1\";\nexport * from \"./mod2\";\n</code></pre>\n<h4 id=\"default-export\" style=\"position:relative;\"><a href=\"#default-export\" aria-label=\"default export permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Export</h4>\n<p>An export default declaration specifies an expression that becomes the default export of a module:</p>\n<pre><code class=\"language-ts\">export default class Greeter {\n  sayHello() {\n    console.log(\"Greetings!\");\n  }\n}\n</code></pre>\n<p>Which in turn can be imported using default imports:</p>\n<pre><code class=\"language-ts\">import Greeter from \"./greeter\";\nvar g = new Greeter();\ng.sayHello();\n</code></pre>\n<h4 id=\"bare-import\" style=\"position:relative;\"><a href=\"#bare-import\" aria-label=\"bare import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bare Import</h4>\n<p>A “bare import” can be used to import a module only for its side-effects.</p>\n<pre><code class=\"language-ts\">import \"./polyfills\";\n</code></pre>\n<p>For more information about module, please see the <a href=\"https://github.com/Microsoft/TypeScript/issues/2242\">ES6 module support spec</a>.</p>\n<h2 id=\"destructuring-in-declarations-and-assignments\" style=\"position:relative;\"><a href=\"#destructuring-in-declarations-and-assignments\" aria-label=\"destructuring in declarations and assignments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Destructuring in declarations and assignments</h2>\n<p>TypeScript 1.5 adds support to ES6 destructuring declarations and assignments.</p>\n<h4 id=\"declarations\" style=\"position:relative;\"><a href=\"#declarations\" aria-label=\"declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declarations</h4>\n<p>A destructuring declaration introduces one or more named variables and initializes them with values extracted from properties of an object or elements of an array.</p>\n<p>For example, the following sample declares variables <code>x</code>, <code>y</code>, and <code>z</code>, and initializes them to <code>getSomeObject().x</code>, <code>getSomeObject().y</code> and <code>getSomeObject().z</code> respectively:</p>\n<pre><code class=\"language-ts\">var { x, y, z } = getSomeObject();\n</code></pre>\n<p>Destructuring declarations also works for extracting values from arrays:</p>\n<pre><code class=\"language-ts\">var [x, y, z = 10] = getSomeArray();\n</code></pre>\n<p>Similarly, destructuring can be used in function parameter declarations:</p>\n<pre><code class=\"language-ts\">function drawText({ text = \"\", location: [x, y] = [0, 0], bold = false }) {\n  // Draw text\n}\n\n// Call drawText with an object literal\nvar item = { text: \"someText\", location: [1, 2, 3], style: \"italics\" };\ndrawText(item);\n</code></pre>\n<h4 id=\"assignments\" style=\"position:relative;\"><a href=\"#assignments\" aria-label=\"assignments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assignments</h4>\n<p>Destructuring patterns can also be used in regular assignment expressions.\nFor instance, swapping two variables can be written as a single destructuring assignment:</p>\n<pre><code class=\"language-ts\">var x = 1;\nvar y = 2;\n[x, y] = [y, x];\n</code></pre>\n<h2 id=\"namespace-keyword\" style=\"position:relative;\"><a href=\"#namespace-keyword\" aria-label=\"namespace keyword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>namespace</code> keyword</h2>\n<p>TypeScript used the <code>module</code> keyword to define both “internal modules” and “external modules”;\nthis has been a bit of confusion for developers new to TypeScript.\n“Internal modules” are closer to what most people would call a namespace; likewise, “external modules” in JS speak really just are modules now.</p>\n<blockquote>\n<p>Note: Previous syntax defining internal modules are still supported.</p>\n</blockquote>\n<p><strong>Before</strong>:</p>\n<pre><code class=\"language-ts\">module Math {\n    export function add(x, y) { ... }\n}\n</code></pre>\n<p><strong>After</strong>:</p>\n<pre><code class=\"language-ts\">namespace Math {\n    export function add(x, y) { ... }\n}\n</code></pre>\n<h2 id=\"let-and-const-support\" style=\"position:relative;\"><a href=\"#let-and-const-support\" aria-label=\"let and const support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>let</code> and <code>const</code> support</h2>\n<p>ES6 <code>let</code> and <code>const</code> declarations are now supported when targeting ES3 and ES5.</p>\n<h4 id=\"const\" style=\"position:relative;\"><a href=\"#const\" aria-label=\"const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Const</h4>\n<pre><code class=\"language-ts\">const MAX = 100;\n\n++MAX; // Error: The operand of an increment or decrement\n//        operator cannot be a constant.\n</code></pre>\n<h4 id=\"block-scoped\" style=\"position:relative;\"><a href=\"#block-scoped\" aria-label=\"block scoped permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block scoped</h4>\n<pre><code class=\"language-ts\">if (true) {\n  let a = 4;\n  // use a\n} else {\n  let a = \"string\";\n  // use a\n}\n\nalert(a); // Error: a is not defined in this scope.\n</code></pre>\n<h2 id=\"forof-support\" style=\"position:relative;\"><a href=\"#forof-support\" aria-label=\"forof support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for..of support</h2>\n<p>TypeScript 1.5 adds support to ES6 for..of loops on arrays for ES3/ES5 as well as full support for Iterator interfaces when targeting ES6.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>The TypeScript compiler will transpile for..of arrays to idiomatic ES3/ES5 JavaScript when targeting those versions:</p>\n<pre><code class=\"language-ts\">for (var v of expr) {\n}\n</code></pre>\n<p>will be emitted as:</p>\n<pre><code class=\"language-js\">for (var _i = 0, _a = expr; _i &#x3C; _a.length; _i++) {\n  var v = _a[_i];\n}\n</code></pre>\n<h2 id=\"decorators\" style=\"position:relative;\"><a href=\"#decorators\" aria-label=\"decorators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorators</h2>\n<blockquote>\n<p>TypeScript decorators are based on the <a href=\"https://github.com/wycats/javascript-decorators\">ES7 decorator proposal</a>.</p>\n</blockquote>\n<p>A decorator is:</p>\n<ul>\n<li>an expression</li>\n<li>that evaluates to a function</li>\n<li>that takes the target, name, and property descriptor as arguments</li>\n<li>and optionally returns a property descriptor to install on the target object</li>\n</ul>\n<blockquote>\n<p>For more information, please see the <a href=\"https://github.com/Microsoft/TypeScript/issues/2249\">Decorators</a> proposal.</p>\n</blockquote>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>Decorators <code>readonly</code> and <code>enumerable(false)</code> will be applied to the property <code>method</code> before it is installed on class <code>C</code>.\nThis allows the decorator to change the implementation, and in this case, augment the descriptor to be writable: false and enumerable: false.</p>\n<pre><code class=\"language-ts\">class C {\n  @readonly\n  @enumerable(false)\n  method() { ... }\n}\n\nfunction readonly(target, key, descriptor) {\n    descriptor.writable = false;\n}\n\nfunction enumerable(value) {\n    return function (target, key, descriptor) {\n        descriptor.enumerable = value;\n    };\n}\n</code></pre>\n<h2 id=\"computed-properties\" style=\"position:relative;\"><a href=\"#computed-properties\" aria-label=\"computed properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computed properties</h2>\n<p>Initializing an object with dynamic properties can be a bit of a burden. Take the following example:</p>\n<pre><code class=\"language-ts\">type NeighborMap = { [name: string]: Node };\ntype Node = { name: string; neighbors: NeighborMap };\n\nfunction makeNode(name: string, initialNeighbor: Node): Node {\n  var neighbors: NeighborMap = {};\n  neighbors[initialNeighbor.name] = initialNeighbor;\n  return { name: name, neighbors: neighbors };\n}\n</code></pre>\n<p>Here we need to create a variable to hold on to the neighbor-map so that we can initialize it.\nWith TypeScript 1.5, we can let the compiler do the heavy lifting:</p>\n<pre><code class=\"language-ts\">function makeNode(name: string, initialNeighbor: Node): Node {\n  return {\n    name: name,\n    neighbors: {\n      [initialNeighbor.name]: initialNeighbor,\n    },\n  };\n}\n</code></pre>\n<h2 id=\"support-for-umd-and-system-module-output\" style=\"position:relative;\"><a href=\"#support-for-umd-and-system-module-output\" aria-label=\"support for umd and system module output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for <code>UMD</code> and <code>System</code> module output</h2>\n<p>In addition to <code>AMD</code> and <code>CommonJS</code> module loaders, TypeScript now supports emitting modules <code>UMD</code> (<a href=\"https://github.com/umdjs/umd\">Universal Module Definition</a>) and <a href=\"https://github.com/systemjs/systemjs\"><code>System</code></a> module formats.</p>\n<p><strong>Usage</strong>:</p>\n<blockquote>\n<p>tsc —module umd</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>tsc —module system</p>\n</blockquote>\n<h2 id=\"unicode-codepoint-escapes-in-strings\" style=\"position:relative;\"><a href=\"#unicode-codepoint-escapes-in-strings\" aria-label=\"unicode codepoint escapes in strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unicode codepoint escapes in strings</h2>\n<p>ES6 introduces escapes that allow users to represent a Unicode codepoint using just a single escape.</p>\n<p>As an example, consider the need to escape a string that contains the character ’𠮷‘.\nIn UTF-16/UCS2, ’𠮷’ is represented as a surrogate pair, meaning that it’s encoded using a pair of 16-bit code units of values, specifically <code>0xD842</code> and <code>0xDFB7</code>.\nPreviously this meant that you’d have to escape the codepoint as <code>\"\\uD842\\uDFB7\"</code>.\nThis has the major downside that it’s difficult to discern two independent characters from a surrogate pair.</p>\n<p>With ES6’s codepoint escapes, you can cleanly represent that exact character in strings and template strings with a single escape: <code>\"\\u{20bb7}\"</code>.\nTypeScript will emit the string in ES3/ES5 as <code>\"\\uD842\\uDFB7\"</code>.</p>\n<h2 id=\"tagged-template-strings-in-es3es5\" style=\"position:relative;\"><a href=\"#tagged-template-strings-in-es3es5\" aria-label=\"tagged template strings in es3es5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tagged template strings in ES3/ES5</h2>\n<p>In TypeScript 1.4, we added support for template strings for all targets, and tagged templates for just ES6.\nThanks to some considerable work done by <a href=\"https://github.com/ivogabe\">@ivogabe</a>, we bridged the gap for for tagged templates in ES3 and ES5.</p>\n<p>When targeting ES3/ES5, the following code</p>\n<pre><code class=\"language-ts\">function oddRawStrings(strs: TemplateStringsArray, n1, n2) {\n  return strs.raw.filter((raw, index) => index % 2 === 1);\n}\n\noddRawStrings`Hello \\n${123} \\t ${456}\\n world`;\n</code></pre>\n<p>will be emitted as</p>\n<pre><code class=\"language-js\">function oddRawStrings(strs, n1, n2) {\n  return strs.raw.filter(function (raw, index) {\n    return index % 2 === 1;\n  });\n}\n(_a = [\"Hello \\n\", \" \\t \", \"\\n world\"]),\n  (_a.raw = [\"Hello \\\\n\", \" \\\\t \", \"\\\\n world\"]),\n  oddRawStrings(_a, 123, 456);\nvar _a;\n</code></pre>\n<h2 id=\"amd-dependency-optional-names\" style=\"position:relative;\"><a href=\"#amd-dependency-optional-names\" aria-label=\"amd dependency optional names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AMD-dependency optional names</h2>\n<p><code>/// &#x3C;amd-dependency path=\"x\" /></code> informs the compiler about a non-TS module dependency that needs to be injected in the resulting module’s require call;\nhowever, there was no way to consume this module in the TS code.</p>\n<p>The new <code>amd-dependency name</code> property allows passing an optional name for an amd-dependency:</p>\n<pre><code class=\"language-ts\">/// &#x3C;amd-dependency path=\"legacy/moduleA\" name=\"moduleA\"/>\ndeclare var moduleA: MyType;\nmoduleA.callStuff();\n</code></pre>\n<p>Generated JS code:</p>\n<pre><code class=\"language-js\">define([\"require\", \"exports\", \"legacy/moduleA\"], function (\n  require,\n  exports,\n  moduleA\n) {\n  moduleA.callStuff();\n});\n</code></pre>\n<h2 id=\"project-support-through-tsconfigjson\" style=\"position:relative;\"><a href=\"#project-support-through-tsconfigjson\" aria-label=\"project support through tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project support through <code>tsconfig.json</code></h2>\n<p>Adding a <code>tsconfig.json</code> file in a directory indicates that the directory is the root of a TypeScript project.\nThe tsconfig.json file specifies the root files and the compiler options required to compile the project. A project is compiled in one of the following ways:</p>\n<ul>\n<li>By invoking tsc with no input files, in which case the compiler searches for the tsconfig.json file starting in the current directory and continuing up the parent directory chain.</li>\n<li>By invoking tsc with no input files and a -project (or just -p) command line option that specifies the path of a directory containing a tsconfig.json file.</li>\n</ul>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"sourceMap\": true\n  }\n}\n</code></pre>\n<p>See the <a href=\"https://github.com/Microsoft/TypeScript/wiki/tsconfig.json\">tsconfig.json wiki page</a> for more details.</p>\n<h2 id=\"--rootdir-command-line-option\" style=\"position:relative;\"><a href=\"#--rootdir-command-line-option\" aria-label=\"  rootdir command line option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--rootDir</code> command line option</h2>\n<p>Option <code>--outDir</code> duplicates the input hierarchy in the output.\nThe compiler computes the root of the input files as the longest common path of all input files;\nand then uses that to replicate all its substructure in the output.</p>\n<p>Sometimes this is not desirable, for instance inputs <code>FolderA\\FolderB\\1.ts</code> and <code>FolderA\\FolderB\\2.ts</code> would result in output structure mirroring <code>FolderA\\FolderB\\</code>.\nNow if a new file <code>FolderA\\3.ts</code> is added to the input, the output structure will pop out to mirror <code>FolderA\\</code>.</p>\n<p><code>--rootDir</code> specifies the input directory to be mirrored in output instead of computing it.</p>\n<h2 id=\"--noemithelpers-command-line-option\" style=\"position:relative;\"><a href=\"#--noemithelpers-command-line-option\" aria-label=\"  noemithelpers command line option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--noEmitHelpers</code> command line option</h2>\n<p>The TypeSript compiler emits a few helpers like <code>__extends</code> when needed.\nThe helpers are emitted in every file they are referenced in.\nIf you want to consolidate all helpers in one place, or override the default behavior, use <code>--noEmitHelpers</code> to instructs the compiler not to emit them.</p>\n<h2 id=\"--newline-command-line-option\" style=\"position:relative;\"><a href=\"#--newline-command-line-option\" aria-label=\"  newline command line option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--newLine</code> command line option</h2>\n<p>By default the output new line character is <code>\\r\\n</code> on Windows based systems and <code>\\n</code> on *nix based systems.\n<code>--newLine</code> command line flag allows overriding this behavior and specifying the new line character to be used in generated output files.</p>\n<h2 id=\"--inlinesourcemap-and-inlinesources-command-line-options\" style=\"position:relative;\"><a href=\"#--inlinesourcemap-and-inlinesources-command-line-options\" aria-label=\"  inlinesourcemap and inlinesources command line options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--inlineSourceMap</code> and <code>inlineSources</code> command line options</h2>\n<p><code>--inlineSourceMap</code> causes source map files to be written inline in the generated <code>.js</code> files instead of in a independent <code>.js.map</code> file.\n<code>--inlineSources</code> allows for additionally inlining the source <code>.ts</code> file into the <code>.js</code> file.</p>","headings":[{"value":"ES6 Modules","depth":2},{"value":"Export Declarations","depth":4},{"value":"Re-exporting","depth":4},{"value":"Default Export","depth":4},{"value":"Bare Import","depth":4},{"value":"Destructuring in declarations and assignments","depth":2},{"value":"Declarations","depth":4},{"value":"Assignments","depth":4},{"value":"namespace keyword","depth":2},{"value":"let and const support","depth":2},{"value":"Const","depth":4},{"value":"Block scoped","depth":4},{"value":"for..of support","depth":2},{"value":"Example","depth":5},{"value":"Decorators","depth":2},{"value":"Example","depth":5},{"value":"Computed properties","depth":2},{"value":"Support for UMD and System module output","depth":2},{"value":"Unicode codepoint escapes in strings","depth":2},{"value":"Tagged template strings in ES3/ES5","depth":2},{"value":"AMD-dependency optional names","depth":2},{"value":"Project support through tsconfig.json","depth":2},{"value":"Example","depth":5},{"value":"--rootDir command line option","depth":2},{"value":"--noEmitHelpers command line option","depth":2},{"value":"--newLine command line option","depth":2},{"value":"--inlineSourceMap and inlineSources command line options","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-1-5.html","title":"TypeScript 1.5","disable_toc":null,"handbook":null,"oneline":"TypeScript 1.5 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-1.5","slug":"/docs/handbook/release-notes/typescript-1-5.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 1.5.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.536Z"}},"staticQueryHashes":[]}