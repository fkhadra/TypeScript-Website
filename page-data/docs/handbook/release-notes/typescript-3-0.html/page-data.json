{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-3-0.html","result":{"data":{"markdownRemark":{"id":"ae13e8cd-7b42-5217-a013-359a8dd40362","excerpt":"Project References TypeScript 3.0 introduces a new concept of project references. Project references allow TypeScript projects to depend on other TypeScriptâ€¦","html":"<h2 id=\"project-references\" style=\"position:relative;\"><a href=\"#project-references\" aria-label=\"project references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project References</h2>\n<p>TypeScript 3.0 introduces a new concept of project references. Project references allow TypeScript projects to depend on other TypeScript projects - specifically, allowing <code>tsconfig.json</code> files to reference other <code>tsconfig.json</code> files. Specifying these dependencies makes it easier to split your code into smaller projects, since it gives TypeScript (and tools around it) a way to understand build ordering and output structure.</p>\n<p>TypeScript 3.0 also introduces a new mode for tsc, the <code>--build</code> flag, that works hand-in-hand with project references to enable faster TypeScript builds.</p>\n<p>See <a href=\"/docs/handbook/project-references.html\">Project References handbook page</a> for more documentation.</p>\n<h2 id=\"tuples-in-rest-parameters-and-spread-expressions\" style=\"position:relative;\"><a href=\"#tuples-in-rest-parameters-and-spread-expressions\" aria-label=\"tuples in rest parameters and spread expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuples in rest parameters and spread expressions</h2>\n<p>TypeScript 3.0 adds support to multiple new capabilities to interact with function parameter lists as tuple types.\nTypeScript 3.0 adds support for:</p>\n<ul>\n<li><a href=\"#rest-parameters-with-tuple-types\">Expansion of rest parameters with tuple types into discrete parameters.</a></li>\n<li><a href=\"#spread-expressions-with-tuple-types\">Expansion of spread expressions with tuple types into discrete arguments.</a></li>\n<li><a href=\"#generic-rest-parameters\">Generic rest parameters and corresponding inference of tuple types.</a></li>\n<li><a href=\"#optional-elements-in-tuple-types\">Optional elements in tuple types.</a></li>\n<li><a href=\"#rest-elements-in-tuple-types\">Rest elements in tuple types.</a></li>\n</ul>\n<p>With these features it becomes possible to strongly type a number of higher-order functions that transform functions and their parameter lists.</p>\n<h2 id=\"rest-parameters-with-tuple-types\" style=\"position:relative;\"><a href=\"#rest-parameters-with-tuple-types\" aria-label=\"rest parameters with tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest parameters with tuple types</h2>\n<p>When a rest parameter has a tuple type, the tuple type is expanded into a sequence of discrete parameters.\nFor example the following two declarations are equivalent:</p>\n<pre><code class=\"language-ts\">declare function foo(...args: [number, string, boolean]): void;\n</code></pre>\n<pre><code class=\"language-ts\">declare function foo(args_0: number, args_1: string, args_2: boolean): void;\n</code></pre>\n<h2 id=\"spread-expressions-with-tuple-types\" style=\"position:relative;\"><a href=\"#spread-expressions-with-tuple-types\" aria-label=\"spread expressions with tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spread expressions with tuple types</h2>\n<p>When a function call includes a spread expression of a tuple type as the last argument, the spread expression corresponds to a sequence of discrete arguments of the tuple element types.</p>\n<p>Thus, the following calls are equivalent:</p>\n<pre><code class=\"language-ts\">const args: [number, string, boolean] = [42, \"hello\", true];\nfoo(42, \"hello\", true);\nfoo(args[0], args[1], args[2]);\nfoo(...args);\n</code></pre>\n<h2 id=\"generic-rest-parameters\" style=\"position:relative;\"><a href=\"#generic-rest-parameters\" aria-label=\"generic rest parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic rest parameters</h2>\n<p>A rest parameter is permitted to have a generic type that is constrained to an array type, and type inference can infer tuple types for such generic rest parameters. This enables higher-order capturing and spreading of partial parameter lists:</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">declare function bind&#x3C;T, U extends any[], V>(\n  f: (x: T, ...args: U) => V,\n  x: T\n): (...args: U) => V;\n\ndeclare function f3(x: number, y: string, z: boolean): void;\n\nconst f2 = bind(f3, 42); // (y: string, z: boolean) => void\nconst f1 = bind(f2, \"hello\"); // (z: boolean) => void\nconst f0 = bind(f1, true); // () => void\n\nf3(42, \"hello\", true);\nf2(\"hello\", true);\nf1(true);\nf0();\n</code></pre>\n<p>In the declaration of <code>f2</code> above, type inference infers types <code>number</code>, <code>[string, boolean]</code> and <code>void</code> for <code>T</code>, <code>U</code> and <code>V</code> respectively.</p>\n<p>Note that when a tuple type is inferred from a sequence of parameters and later expanded into a parameter list, as is the case for <code>U</code>, the original parameter names are used in the expansion (however, the names have no semantic meaning and are not otherwise observable).</p>\n<h2 id=\"optional-elements-in-tuple-types\" style=\"position:relative;\"><a href=\"#optional-elements-in-tuple-types\" aria-label=\"optional elements in tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional elements in tuple types</h2>\n<p>Tuple types now permit a <code>?</code> postfix on element types to indicate that the element is optional:</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">let t: [number, string?, boolean?];\nt = [42, \"hello\", true];\nt = [42, \"hello\"];\nt = [42];\n</code></pre>\n<p>In <code>--strictNullChecks</code> mode, a <code>?</code> modifier automatically includes <code>undefined</code> in the element type, similar to optional parameters.</p>\n<p>A tuple type permits an element to be omitted if it has a postfix <code>?</code> modifier on its type and all elements to the right of it also have <code>?</code> modifiers.</p>\n<p>When tuple types are inferred for rest parameters, optional parameters in the source become optional tuple elements in the inferred type.</p>\n<p>The <code>length</code> property of a tuple type with optional elements is a union of numeric literal types representing the possible lengths.\nFor example, the type of the <code>length</code> property in the tuple type <code>[number, string?, boolean?]</code> is <code>1 | 2 | 3</code>.</p>\n<h3 id=\"rest-elements-in-tuple-types\" style=\"position:relative;\"><a href=\"#rest-elements-in-tuple-types\" aria-label=\"rest elements in tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rest elements in tuple types</h3>\n<p>The last element of a tuple type can be a rest element of the form <code>...X</code>, where <code>X</code> is an array type.\nA rest element indicates that the tuple type is open-ended and may have zero or more additional elements of the array element type.\nFor example, <code>[number, ...string[]]</code> means tuples with a <code>number</code> element followed by any number of <code>string</code> elements.</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">function tuple&#x3C;T extends any[]>(...args: T): T {\n  return args;\n}\n\nconst numbers: number[] = getArrayOfNumbers();\nconst t1 = tuple(\"foo\", 1, true); // [string, number, boolean]\nconst t2 = tuple(\"bar\", ...numbers); // [string, ...number[]]\n</code></pre>\n<p>The type of the <code>length</code> property of a tuple type with a rest element is <code>number</code>.</p>\n<h2 id=\"new-unknown-top-type\" style=\"position:relative;\"><a href=\"#new-unknown-top-type\" aria-label=\"new unknown top type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New <code>unknown</code> top type</h2>\n<p>TypeScript 3.0 introduces a new top type <code>unknown</code>.\n<code>unknown</code> is the type-safe counterpart of <code>any</code>.\nAnything is assignable to <code>unknown</code>, but <code>unknown</code> isnâ€™t assignable to anything but itself and <code>any</code> without a type assertion or a control flow based narrowing.\nLikewise, no operations are permitted on an <code>unknown</code> without first asserting or narrowing to a more specific type.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">// In an intersection everything absorbs unknown\n\ntype T00 = unknown &#x26; null; // null\ntype T01 = unknown &#x26; undefined; // undefined\ntype T02 = unknown &#x26; null &#x26; undefined; // null &#x26; undefined (which becomes never)\ntype T03 = unknown &#x26; string; // string\ntype T04 = unknown &#x26; string[]; // string[]\ntype T05 = unknown &#x26; unknown; // unknown\ntype T06 = unknown &#x26; any; // any\n\n// In a union an unknown absorbs everything\n\ntype T10 = unknown | null; // unknown\ntype T11 = unknown | undefined; // unknown\ntype T12 = unknown | null | undefined; // unknown\ntype T13 = unknown | string; // unknown\ntype T14 = unknown | string[]; // unknown\ntype T15 = unknown | unknown; // unknown\ntype T16 = unknown | any; // any\n\n// Type variable and unknown in union and intersection\n\ntype T20&#x3C;T> = T &#x26; {}; // T &#x26; {}\ntype T21&#x3C;T> = T | {}; // T | {}\ntype T22&#x3C;T> = T &#x26; unknown; // T\ntype T23&#x3C;T> = T | unknown; // unknown\n\n// unknown in conditional types\n\ntype T30&#x3C;T> = unknown extends T ? true : false; // Deferred\ntype T31&#x3C;T> = T extends unknown ? true : false; // Deferred (so it distributes)\ntype T32&#x3C;T> = never extends T ? true : false; // true\ntype T33&#x3C;T> = T extends never ? true : false; // Deferred\n\n// keyof unknown\n\ntype T40 = keyof any; // string | number | symbol\ntype T41 = keyof unknown; // never\n\n// Only equality operators are allowed with unknown\n\nfunction f10(x: unknown) {\n  x == 5;\n  x !== 10;\n  x >= 0; // Error\n  x + 1; // Error\n  x * 2; // Error\n  -x; // Error\n  +x; // Error\n}\n\n// No property accesses, element accesses, or function calls\n\nfunction f11(x: unknown) {\n  x.foo; // Error\n  x[5]; // Error\n  x(); // Error\n  new x(); // Error\n}\n\n// typeof, instanceof, and user defined type predicates\n\ndeclare function isFunction(x: unknown): x is Function;\n\nfunction f20(x: unknown) {\n  if (typeof x === \"string\" || typeof x === \"number\") {\n    x; // string | number\n  }\n  if (x instanceof Error) {\n    x; // Error\n  }\n  if (isFunction(x)) {\n    x; // Function\n  }\n}\n\n// Homomorphic mapped type over unknown\n\ntype T50&#x3C;T> = { [P in keyof T]: number };\ntype T51 = T50&#x3C;any>; // { [x: string]: number }\ntype T52 = T50&#x3C;unknown>; // {}\n\n// Anything is assignable to unknown\n\nfunction f21&#x3C;T>(pAny: any, pNever: never, pT: T) {\n  let x: unknown;\n  x = 123;\n  x = \"hello\";\n  x = [1, 2, 3];\n  x = new Error();\n  x = x;\n  x = pAny;\n  x = pNever;\n  x = pT;\n}\n\n// unknown assignable only to itself and any\n\nfunction f22(x: unknown) {\n  let v1: any = x;\n  let v2: unknown = x;\n  let v3: object = x; // Error\n  let v4: string = x; // Error\n  let v5: string[] = x; // Error\n  let v6: {} = x; // Error\n  let v7: {} | null | undefined = x; // Error\n}\n\n// Type parameter 'T extends unknown' not related to object\n\nfunction f23&#x3C;T extends unknown>(x: T) {\n  let y: object = x; // Error\n}\n\n// Anything but primitive assignable to { [x: string]: unknown }\n\nfunction f24(x: { [x: string]: unknown }) {\n  x = {};\n  x = { a: 5 };\n  x = [1, 2, 3];\n  x = 123; // Error\n}\n\n// Locals of type unknown always considered initialized\n\nfunction f25() {\n  let x: unknown;\n  let y = x;\n}\n\n// Spread of unknown causes result to be unknown\n\nfunction f26(x: {}, y: unknown, z: any) {\n  let o1 = { a: 42, ...x }; // { a: number }\n  let o2 = { a: 42, ...x, ...y }; // unknown\n  let o3 = { a: 42, ...x, ...y, ...z }; // any\n}\n\n// Functions with unknown return type don't need return expressions\n\nfunction f27(): unknown {}\n\n// Rest type cannot be created from unknown\n\nfunction f28(x: unknown) {\n  let { ...a } = x; // Error\n}\n\n// Class properties of type unknown don't need definite assignment\n\nclass C1 {\n  a: string; // Error\n  b: unknown;\n  c: any;\n}\n</code></pre>\n<h2 id=\"support-for-defaultprops-in-jsx\" style=\"position:relative;\"><a href=\"#support-for-defaultprops-in-jsx\" aria-label=\"support for defaultprops in jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for <code>defaultProps</code> in JSX</h2>\n<p>TypeScript 2.9 and earlier didnâ€™t leverage <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html#default-prop-values\">React <code>defaultProps</code></a> declarations inside JSX components.\nUsers would often have to declare properties optional and use non-null assertions inside of <code>render</code>, or theyâ€™d use type-assertions to fix up the type of the component before exporting it.</p>\n<p>TypeScript 3.0 adds support for a new type alias in the <code>JSX</code> namespace called <code>LibraryManagedAttributes</code>.\nThis helper type defines a transformation on the componentâ€™s <code>Props</code> type, before using to check a JSX expression targeting it; thus allowing customization like: how conflicts between provided props and inferred props are handled, how inferences are mapped, how optionality is handled, and how inferences from differing places should be combined.</p>\n<p>In short using this general type, we can model Reactâ€™s specific behavior for things like <code>defaultProps</code> and, to some extent, <code>propTypes</code>.</p>\n<pre><code class=\"language-tsx\">export interface Props {\n  name: string;\n}\n\nexport class Greet extends React.Component&#x3C;Props> {\n  render() {\n    const { name } = this.props;\n    return &#x3C;div>Hello {name.toUpperCase()}!&#x3C;/div>;\n  }\n  static defaultProps = { name: \"world\" };\n}\n\n// Type-checks! No type assertions needed!\nlet el = &#x3C;Greet />;\n</code></pre>\n<h2 id=\"caveats\" style=\"position:relative;\"><a href=\"#caveats\" aria-label=\"caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats</h2>\n<h3 id=\"explicit-types-on-defaultprops\" style=\"position:relative;\"><a href=\"#explicit-types-on-defaultprops\" aria-label=\"explicit types on defaultprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explicit types on <code>defaultProps</code></h3>\n<p>The default-ed properties are inferred from the <code>defaultProps</code> property type. If an explicit type annotation is added, e.g. <code>static defaultProps: Partial&#x3C;Props>;</code> the compiler will not be able to identify which properties have defaults (since the type of <code>defaultProps</code> include all properties of <code>Props</code>).</p>\n<p>Use <code>static defaultProps: Pick&#x3C;Props, \"name\">;</code> as an explicit type annotation instead, or do not add a type annotation as done in the example above.</p>\n<p>For function components (formerly known as SFCs) use ES2015 default initializers:</p>\n<pre><code class=\"language-tsx\">function Greet({ name = \"world\" }: Props) {\n  return &#x3C;div>Hello {name.toUpperCase()}!&#x3C;/div>;\n}\n</code></pre>\n<h4 id=\"changes-to-typesreact\" style=\"position:relative;\"><a href=\"#changes-to-typesreact\" aria-label=\"changes to typesreact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changes to <code>@types/React</code></h4>\n<p>Corresponding changes to add <code>LibraryManagedAttributes</code> definition to the <code>JSX</code> namespace in <code>@types/React</code> are still needed.\nKeep in mind that there are some limitations.</p>\n<h2 id=\"-reference-lib--reference-directives\" style=\"position:relative;\"><a href=\"#-reference-lib--reference-directives\" aria-label=\" reference lib  reference directives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference lib=\"...\" /></code> reference directives</h2>\n<p>TypeScript adds a new triple-slash-reference directive (<code>/// &#x3C;reference lib=\"name\" /></code>), allowing a file to explicitly include an existing built-in <em>lib</em> file.</p>\n<p>Built-in <em>lib</em> files are referenced in the same fashion as the <code>\"lib\"</code> compiler option in <em>tsconfig.json</em> (e.g. use <code>lib=\"es2015\"</code> and not <code>lib=\"lib.es2015.d.ts\"</code>, etc.).</p>\n<p>For declaration file authors who relay on built-in types, e.g. DOM APIs or built-in JS run-time constructors like <code>Symbol</code> or <code>Iterable</code>, triple-slash-reference lib directives are the recommended. Previously these .d.ts files had to add forward/duplicate declarations of such types.</p>\n<h5 id=\"example-4\" style=\"position:relative;\"><a href=\"#example-4\" aria-label=\"example 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>Using <code>/// &#x3C;reference lib=\"es2017.string\" /></code> to one of the files in a compilation is equivalent to compiling with <code>--lib es2017.string</code>.</p>\n<pre><code class=\"language-ts\">/// &#x3C;reference lib=\"es2017.string\" />\n\n\"foo\".padStart(4);\n</code></pre>","headings":[{"value":"Project References","depth":2},{"value":"Tuples in rest parameters and spread expressions","depth":2},{"value":"Rest parameters with tuple types","depth":2},{"value":"Spread expressions with tuple types","depth":2},{"value":"Generic rest parameters","depth":2},{"value":"Example","depth":5},{"value":"Optional elements in tuple types","depth":2},{"value":"Example","depth":5},{"value":"Rest elements in tuple types","depth":3},{"value":"Example","depth":5},{"value":"New unknown top type","depth":2},{"value":"Example","depth":5},{"value":"Support for defaultProps in JSX","depth":2},{"value":"Caveats","depth":2},{"value":"Explicit types on defaultProps","depth":3},{"value":"Changes to @types/React","depth":4},{"value":"/// <reference lib=\"...\" /> reference directives","depth":2},{"value":"Example","depth":5}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-3-0.html","title":"TypeScript 3.0","disable_toc":null,"handbook":null,"oneline":"TypeScript 3.0 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-3.0","slug":"/docs/handbook/release-notes/typescript-3-0.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 3.0.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.540Z"}},"staticQueryHashes":[]}