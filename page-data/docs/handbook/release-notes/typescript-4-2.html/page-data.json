{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-4-2.html","result":{"data":{"markdownRemark":{"id":"4bfe1e25-3be5-5248-91cf-357cbed6d0d6","excerpt":"Smarter Type Alias Preservation TypeScript has a way to declare new names for types called type aliases.\nIf you’re writing a set of functions that all work on…","html":"<h2 id=\"smarter-type-alias-preservation\" style=\"position:relative;\"><a href=\"#smarter-type-alias-preservation\" aria-label=\"smarter type alias preservation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Smarter Type Alias Preservation</h2>\n<p>TypeScript has a way to declare new names for types called type aliases.\nIf you’re writing a set of functions that all work on <code>string | number | boolean</code>, you can write a type alias to avoid repeating yourself over and over again.</p>\n<pre><code class=\"language-ts\">type BasicPrimitive = number | string | boolean;\n</code></pre>\n<p>TypeScript has always used a set of rules and guesses for when to reuse type aliases when printing out types.\nFor example, take the following code snippet.</p>\n<pre><code class=\"language-ts\">export type BasicPrimitive = number | string | boolean;\n\nexport function doStuff(value: BasicPrimitive) {\n  let x = value;\n  return x;\n}\n</code></pre>\n<p>If we hover our mouse over <code>x</code> in an editor like Visual Studio, Visual Studio Code, or <a href=\"https://www.typescriptlang.org/play?ts=4.1.3#code/KYDwDg9gTgLgBDAnmYcBCBDAzgSwMYAKUOAtjjDgG6oC8cAdgK4kBGwUcAPnFjMfQHMucFhAgAbYBnoBuAFBzQkWHABmjengoR6cACYQAyjEarVACkoZxjYAC502fEVLkqwAJRwA3nLj+4SXgQODorG2B5ALgoYBMoXRB5AF8gA\">the TypeScript Playground</a>, we’ll get a quick info panel that shows the type <code>BasicPrimitive</code>.\nLikewise, if we get the declaration file output (<code>.d.ts</code> output) for this file, TypeScript will say that <code>doStuff</code> returns <code>BasicPrimitive</code>.</p>\n<p>However, what happens if we return a <code>BasicPrimitive</code> or <code>undefined</code>?</p>\n<pre><code class=\"language-ts\">export type BasicPrimitive = number | string | boolean;\n\nexport function doStuff(value: BasicPrimitive) {\n  if (Math.random() &#x3C; 0.5) {\n    return undefined;\n  }\n\n  return value;\n}\n</code></pre>\n<p>We can see what happens <a href=\"https://www.typescriptlang.org/play?ts=4.1.3#code/KYDwDg9gTgLgBDAnmYcBCBDAzgSwMYAKUOAtjjDgG6oC8cAdgK4kBGwUcAPnFjMfQHMucFhAgAbYBnoBuALAAoRQHplcABIRqHCPTgByACYQAyjEYAzC-pHBxEAO4IIPYKgcALDPAAqyYCZ4xGDwhjhYYOIYiFhwFtAIHqhQwOZQekgoAHQqagDqqGQCHvBe1HCgKHgwwIZw5M5wYPzw2Lm5cJ2YuITEZBTl3Iz0hsAWOPS1HR0sjPBs9k5+KIHB8AAsWQBMADT18BO8UnVhEVExcG0Kqh2dTKzswrz8QtyiElJ6QyNjE1PXykUlWg8Asw2qOF0cGMZksFgAFJQMOJGMAAFzobD4IikchUYAASjgAG9FJ1yTgLHB4QBZbweLJQaTGEjwokAHjgAAYsgBWImkhTk4WdFJpPTDUbjSaGeRC4UAX0UZOFYsY6TgSJRwDlcAVQA\">in the TypeScript 4.1 playground</a>.\nWhile we might want TypeScript to display the return type of <code>doStuff</code> as <code>BasicPrimitive | undefined</code>, it instead displays <code>string | number | boolean | undefined</code>!\nWhat gives?</p>\n<p>Well this has to do with how TypeScript represents types internally.\nWhen creating a union type out of one or more union types, it will always <em>normalize</em> those types into a new flattened union type - but doing that loses information.\nThe type-checker would have to find every combination of types from <code>string | number | boolean | undefined</code> to see what type aliases could have been used, and even then, there might be multiple type aliases to <code>string | number | boolean</code>.</p>\n<p>In TypeScript 4.2, our internals are a little smarter.\nWe keep track of how types were constructed by keeping around parts of how they were originally written and constructed over time.\nWe also keep track of, and differentiate, type aliases to instances of other aliases!</p>\n<p>Being able to print back the types based on how you used them in your code means that as a TypeScript user, you can avoid some unfortunately humongous types getting displayed, and that often translates to getting better <code>.d.ts</code> file output, error messages, and in-editor type displays in quick info and signature help.\nThis can help TypeScript feel a little bit more approachable for newcomers.</p>\n<p>For more information, check out <a href=\"https://github.com/microsoft/TypeScript/pull/42149\">the first pull request that improves various cases around preserving union type aliases</a>, along with <a href=\"https://github.com/microsoft/TypeScript/pull/42284\">a second pull request that preserves indirect aliases</a>.</p>\n<h2 id=\"leadingmiddle-rest-elements-in-tuple-types\" style=\"position:relative;\"><a href=\"#leadingmiddle-rest-elements-in-tuple-types\" aria-label=\"leadingmiddle rest elements in tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Leading/Middle Rest Elements in Tuple Types</h2>\n<p>In TypeScript, tuple types are meant to model arrays with specific lengths and element types.</p>\n<pre><code class=\"language-ts\">// A tuple that stores a pair of numbers\nlet a: [number, number] = [1, 2];\n\n// A tuple that stores a string, a number, and a boolean\nlet b: [string, number, boolean] = [\"hello\", 42, true];\n</code></pre>\n<p>Over time, TypeScript’s tuple types have become more and more sophisticated, since they’re also used to model things like parameter lists in JavaScript.\nAs a result, they can have optional elements and rest elements, and can even have labels for tooling and readability.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// A tuple that has either one or two strings.\nlet c: [string, string?] = [\"hello\"];\nc = [\"hello\", \"world\"];\n\n// A labeled tuple that has either one or two strings.\nlet d: [first: string, second?: string] = [\"hello\"];\nd = [\"hello\", \"world\"];\n\n// A tuple with a *rest element* - holds at least 2 strings at the front,\n// and any number of booleans at the back.\nlet e: [string, string, ...boolean[]];\n\ne = [\"hello\", \"world\"];\ne = [\"hello\", \"world\", false];\ne = [\"hello\", \"world\", true, false, true];\n</code></pre>\n<p>In TypeScript 4.2, rest elements specifically been expanded in how they can be used.\nIn prior versions, TypeScript only allowed <code>...rest</code> elements at the very last position of a tuple type.</p>\n<p>However, now rest elements can occur <em>anywhere</em> within a tuple - with only a few restrictions.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let foo: [...string[], number];\n\nfoo = [123];\nfoo = [\"hello\", 123];\nfoo = [\"hello!\", \"hello!\", \"hello!\", 123];\n\nlet bar: [boolean, ...string[], boolean];\n\nbar = [true, false];\nbar = [true, \"some text\", false];\nbar = [true, \"some\", \"separated\", \"text\", false];\n</code></pre>\n<p>The only restriction is that a rest element can be placed anywhere in a tuple, so long as it’s not followed by another optional element or rest element.\nIn other words, only one rest element per tuple, and no optional elements after rest elements.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 1265 1266\ninterface Clown {\n  /*...*/\n}\ninterface Joker {\n  /*...*/\n}\n\nlet StealersWheel: [...Clown[], \"me\", ...Joker[]];\n\nlet StringsAndMaybeBoolean: [...string[], boolean?];\n</code></pre>\n<p>These non-trailing rest elements can be used to model functions that take any number of leading arguments, followed by a few fixed ones.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function doStuff(...args: [...names: string[], shouldCapitalize: boolean]): void;\n\ndoStuff(/*shouldCapitalize:*/ false)\ndoStuff(\"fee\", \"fi\", \"fo\", \"fum\", /*shouldCapitalize:*/ true);\n</code></pre>\n<p>Even though JavaScript doesn’t have any syntax to model leading rest parameters, we were still able to declare <code>doStuff</code> as a function that takes leading arguments by declaring the <code>...args</code> rest parameter with <em>a tuple type that uses a leading rest element</em>.\nThis can help model lots of existing JavaScript out there!</p>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/41544\">see the original pull request</a>.</p>\n<h2 id=\"stricter-checks-for-the-in-operator\" style=\"position:relative;\"><a href=\"#stricter-checks-for-the-in-operator\" aria-label=\"stricter checks for the in operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stricter Checks For The <code>in</code> Operator</h2>\n<p>In JavaScript, it is a runtime error to use a non-object type on the right side of the <code>in</code> operator.\nTypeScript 4.2 ensures this can be caught at design-time.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2361\n\"foo\" in 42;\n</code></pre>\n<p>This check is fairly conservative for the most part, so if you have received an error about this, it is likely an issue in the code.</p>\n<p>A big thanks to our external contributor <a href=\"https://github.com/jonhue\">Jonas Hübotter</a> for <a href=\"https://github.com/microsoft/TypeScript/pull/41928\">their pull request</a>!</p>\n<h2 id=\"--nopropertyaccessfromindexsignature\" style=\"position:relative;\"><a href=\"#--nopropertyaccessfromindexsignature\" aria-label=\"  nopropertyaccessfromindexsignature permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--noPropertyAccessFromIndexSignature</code></h2>\n<p>Back when TypeScript first introduced index signatures, you could only get properties declared by them with “bracketed” element access syntax like <code>person[\"name\"]</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface SomeType {\n  /** This is an index signature. */\n  [propName: string]: any;\n}\n\nfunction doStuff(value: SomeType) {\n  let x = value[\"someProperty\"];\n}\n</code></pre>\n<p>This ended up being cumbersome in situations where we need to work with objects that have arbitrary properties.\nFor example, imagine an API where it’s common to misspell a property name by adding an extra <code>s</code> character at the end.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Options {\n  /** File patterns to be excluded. */\n  exclude?: string[];\n\n  /**\n   * It handles any extra properties that we haven't declared as type 'any'.\n   */\n  [x: string]: any;\n}\n\nfunction processOptions(opts: Options) {\n  // Notice we're *intentionally* accessing `excludes`, not `exclude`\n  if (opts.excludes) {\n    console.error(\n      \"The option `excludes` is not valid. Did you mean `exclude`?\"\n    );\n  }\n}\n</code></pre>\n<p>To make these types of situations easier, a while back, TypeScript made it possible to use “dotted” property access syntax like <code>person.name</code> when a type had a string index signature.\nThis also made it easier to transition existing JavaScript code over to TypeScript.</p>\n<p>However, loosening the restriction also meant that misspelling an explicitly declared property became much easier.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Options {\n  /** File patterns to be excluded. */\n  exclude?: string[];\n\n  /**\n   * It handles any extra properties that we haven't declared as type 'any'.\n   */\n  [x: string]: any;\n}\n// ---cut---\nfunction processOptions(opts: Options) {\n  // ...\n\n  // Notice we're *accidentally* accessing `excludes` this time.\n  // Oops! Totally valid.\n  for (const excludePattern of opts.excludes) {\n    // ...\n  }\n}\n</code></pre>\n<p>In some cases, users would prefer to explicitly opt into the index signature - they would prefer to get an error message when a dotted property access doesn’t correspond to a specific property declaration.</p>\n<p>That’s why TypeScript introduces a new flag called <code>--noPropertyAccessFromIndexSignature</code>.\nUnder this mode, you’ll be opted in to TypeScript’s older behavior that issues an error.\nThis new setting is not under the <code>strict</code> family of flags, since we believe users will find it more useful on certain codebases than others.</p>\n<p>You can understand this feature in more detail by reading up on the corresponding <a href=\"https://github.com/microsoft/TypeScript/pull/40171/\">pull request</a>.\nWe’d also like to extend a big thanks to <a href=\"https://github.com/Kingwl\">Wenlu Wang</a> who sent us this pull request!</p>\n<h2 id=\"abstract-construct-signatures\" style=\"position:relative;\"><a href=\"#abstract-construct-signatures\" aria-label=\"abstract construct signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>abstract</code> Construct Signatures</h2>\n<p>TypeScript allows us to mark a class as <em>abstract</em>.\nThis tells TypeScript that the class is only meant to be extended from, and that certain members need to be filled in by any subclass to actually create an instance.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2511\nabstract class Shape {\n  abstract getArea(): number;\n}\n\nnew Shape();\n\nclass Square extends Shape {\n  #sideLength: number;\n\n  constructor(sideLength: number) {\n    super();\n    this.#sideLength = sideLength;\n  }\n\n  getArea() {\n    return this.#sideLength ** 2;\n  }\n}\n\n// Works fine.\nnew Square(42);\n</code></pre>\n<p>To make sure this restriction in <code>new</code>-ing up <code>abstract</code> classes is consistently applied, you can’t assign an <code>abstract</code> class to anything that expects a construct signature.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nabstract class Shape {\n  abstract getArea(): number;\n}\n// ---cut---\ninterface HasArea {\n  getArea(): number;\n}\n\nlet Ctor: new () => HasArea = Shape;\n</code></pre>\n<p>This does the right thing in case we intend to run code like <code>new Ctor</code>, but it’s overly-restrictive in case we want to write a subclass of <code>Ctor</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\nabstract class Shape {\n  abstract getArea(): number;\n}\n\ninterface HasArea {\n  getArea(): number;\n}\n\nfunction makeSubclassWithArea(Ctor: new () => HasArea) {\n  return class extends Ctor {\n    getArea() {\n      return 42\n    }\n  };\n}\n\nlet MyShape = makeSubclassWithArea(Shape);\n</code></pre>\n<p>It also doesn’t work well with built-in helper types like <code>InstanceType</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2344\nabstract class Shape {\n  abstract getArea(): number;\n}\n// ---cut---\ntype MyInstance = InstanceType&#x3C;typeof Shape>;\n</code></pre>\n<p>That’s why TypeScript 4.2 allows you to specify an <code>abstract</code> modifier on constructor signatures.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash {5}\">abstract class Shape {\n  abstract getArea(): number;\n}\n// ---cut---\ninterface HasArea {\n    getArea(): number;\n}\n\n// Works!\nlet Ctor: abstract new () => HasArea = Shape;\n</code></pre>\n<p>Adding the <code>abstract</code> modifier to a construct signature signals that you can pass in <code>abstract</code> constructors.\nIt doesn’t stop you from passing in other classes/constructor functions that are “concrete” - it really just signals that there’s no intent to run the constructor directly, so it’s safe to pass in either class type.</p>\n<p>This feature allows us to write <em>mixin factories</em> in a way that supports abstract classes.\nFor example, in the following code snippet, we’re able to use the mixin function <code>withStyles</code> with the <code>abstract</code> class <code>SuperClass</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">abstract class SuperClass {\n    abstract someMethod(): void;\n    badda() {}\n}\n\ntype AbstractConstructor&#x3C;T> = abstract new (...args: any[]) => T\n\nfunction withStyles&#x3C;T extends AbstractConstructor&#x3C;object>>(Ctor: T) {\n    abstract class StyledClass extends Ctor {\n        getStyles() {\n            // ...\n        }\n    }\n    return StyledClass;\n}\n\nclass SubClass extends withStyles(SuperClass) {\n    someMethod() {\n        this.someMethod()\n    }\n}\n</code></pre>\n<p>Note that <code>withStyles</code> is demonstrating a specific rule, where a class (like <code>StyledClass</code>) that extends a value that’s generic and bounded by an abstract constructor (like <code>Ctor</code>) has to also be declared <code>abstract</code>.\nThis is because there’s no way to know if a class with <em>more</em> abstract members was passed in, and so it’s impossible to know whether the subclass implements all the abstract members.</p>\n<p>You can read up more on abstract construct signatures <a href=\"https://github.com/microsoft/TypeScript/pull/36392\">on its pull request</a>.</p>\n<h2 id=\"understanding-your-project-structure-with---explainfiles\" style=\"position:relative;\"><a href=\"#understanding-your-project-structure-with---explainfiles\" aria-label=\"understanding your project structure with   explainfiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understanding Your Project Structure With <code>--explainFiles</code></h2>\n<p>A surprisingly common scenario for TypeScript users is to ask “why is TypeScript including this file?“.\nInferring the files of your program turns out to be a complicated process, and so there are lots of reasons why a specific combination of <code>lib.d.ts</code> got used, why certain files in <code>node_modules</code> are getting included, and why certain files are being included even though we thought specifying <code>exclude</code> would keep them out.</p>\n<p>That’s why TypeScript now provides an <code>--explainFiles</code> flag.</p>\n<pre><code class=\"language-sh\">tsc --explainFiles\n</code></pre>\n<p>When using this option, the TypeScript compiler will give some very verbose output about why a file ended up in your program.\nTo read it more easily, you can forward the output to a file, or pipe it to a program that can easily view it.</p>\n<pre><code class=\"language-sh\"># Forward output to a text file\ntsc --explainFiles > expanation.txt\n\n# Pipe output to a utility program like `less`, or an editor like VS Code\ntsc --explainFiles | less\n\ntsc --explainFiles | code -\n</code></pre>\n<p>Typically, the output will start out by listing out reasons for including <code>lib.d.ts</code> files, then for local files, and then <code>node_modules</code> files.</p>\n<pre><code>TS_Compiler_Directory/4.2.2/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'TS_Compiler_Directory/4.2.2/lib/lib.es2015.d.ts'\nTS_Compiler_Directory/4.2.2/lib/lib.es2015.d.ts\n  Library referenced via 'es2015' from file 'TS_Compiler_Directory/4.2.2/lib/lib.es2016.d.ts'\nTS_Compiler_Directory/4.2.2/lib/lib.es2016.d.ts\n  Library referenced via 'es2016' from file 'TS_Compiler_Directory/4.2.2/lib/lib.es2017.d.ts'\nTS_Compiler_Directory/4.2.2/lib/lib.es2017.d.ts\n  Library referenced via 'es2017' from file 'TS_Compiler_Directory/4.2.2/lib/lib.es2018.d.ts'\nTS_Compiler_Directory/4.2.2/lib/lib.es2018.d.ts\n  Library referenced via 'es2018' from file 'TS_Compiler_Directory/4.2.2/lib/lib.es2019.d.ts'\nTS_Compiler_Directory/4.2.2/lib/lib.es2019.d.ts\n  Library referenced via 'es2019' from file 'TS_Compiler_Directory/4.2.2/lib/lib.es2020.d.ts'\nTS_Compiler_Directory/4.2.2/lib/lib.es2020.d.ts\n  Library referenced via 'es2020' from file 'TS_Compiler_Directory/4.2.2/lib/lib.esnext.d.ts'\nTS_Compiler_Directory/4.2.2/lib/lib.esnext.d.ts\n  Library 'lib.esnext.d.ts' specified in compilerOptions\n\n... More Library References...\n\nfoo.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'\n</code></pre>\n<p>Right now, we make no guarantees about the output format - it might change over time.\nOn that note, we’re interested in improving this format if you have any suggestions!</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/40011\">check out the original pull request</a>!</p>\n<h2 id=\"improved-uncalled-function-checks-in-logical-expressions\" style=\"position:relative;\"><a href=\"#improved-uncalled-function-checks-in-logical-expressions\" aria-label=\"improved uncalled function checks in logical expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved Uncalled Function Checks in Logical Expressions</h2>\n<p>Thanks to further improvements from <a href=\"https://github.com/a-tarasyuk\">Alex Tarasyuk</a>, TypeScript’s uncalled function checks now apply within <code>&#x26;&#x26;</code> and <code>||</code> expressions.</p>\n<p>Under <code>--strictNullChecks</code>, the following code will now error.</p>\n<pre><code class=\"language-ts\">function shouldDisplayElement(element: Element) {\n  // ...\n  return true;\n}\n\nfunction getVisibleItems(elements: Element[]) {\n  return elements.filter((e) => shouldDisplayElement &#x26;&#x26; e.children.length);\n  //                          ~~~~~~~~~~~~~~~~~~~~\n  // This condition will always return true since the function is always defined.\n  // Did you mean to call it instead.\n}\n</code></pre>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/issues/40197\">check out the pull request here</a>.</p>\n<h2 id=\"destructured-variables-can-be-explicitly-marked-as-unused\" style=\"position:relative;\"><a href=\"#destructured-variables-can-be-explicitly-marked-as-unused\" aria-label=\"destructured variables can be explicitly marked as unused permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Destructured Variables Can Be Explicitly Marked as Unused</h2>\n<p>Thanks to another pull request from <a href=\"https://github.com/a-tarasyuk\">Alex Tarasyuk</a>, you can now mark destructured variables as unused by prefixing them with an underscore (the <code>_</code> character).</p>\n<pre><code class=\"language-ts\">let [_first, second] = getValues();\n</code></pre>\n<p>Previously, if <code>_first</code> was never used later on, TypeScript would issue an error under <code>noUnusedLocals</code>.\nNow, TypeScript will recognize that <code>_first</code> was intentionally named with an underscore because there was no intent to use it.</p>\n<p>For more details, take a look at <a href=\"https://github.com/microsoft/TypeScript/pull/41378\">the full change</a>.</p>\n<h2 id=\"relaxed-rules-between-optional-properties-and-string-index-signatures\" style=\"position:relative;\"><a href=\"#relaxed-rules-between-optional-properties-and-string-index-signatures\" aria-label=\"relaxed rules between optional properties and string index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relaxed Rules Between Optional Properties and String Index Signatures</h2>\n<p>String index signatures are a way of typing dictionary-like objects, where you want to allow access with arbitrary keys:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">const movieWatchCount: { [key: string]: number } = {};\n\nfunction watchMovie(title: string) {\n  movieWatchCount[title] = (movieWatchCount[title] ?? 0) + 1;\n}\n</code></pre>\n<p>Of course, for any movie title not yet in the dictionary, <code>movieWatchCount[title]</code> will be <code>undefined</code> (TypeScript 4.1 added the option <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#checked-indexed-accesses---nouncheckedindexedaccess\"><code>--noUncheckedIndexedAccess</code></a> to include <code>undefined</code> when reading from an index signature like this).\nEven though it’s clear that there must be some strings not present in <code>movieWatchCount</code>, previous versions of TypeScript treated optional object properties as unassignable to otherwise compatible index signatures, due to the presence of <code>undefined</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">type WesAndersonWatchCount = {\n  \"Fantastic Mr. Fox\"?: number;\n  \"The Royal Tenenbaums\"?: number;\n  \"Moonrise Kingdom\"?: number;\n  \"The Grand Budapest Hotel\"?: number;\n};\n\ndeclare const wesAndersonWatchCount: WesAndersonWatchCount;\nconst movieWatchCount: { [key: string]: number } = wesAndersonWatchCount;\n//    ~~~~~~~~~~~~~~~ error!\n// Type 'WesAndersonWatchCount' is not assignable to type '{ [key: string]: number; }'.\n//    Property '\"Fantastic Mr. Fox\"' is incompatible with index signature.\n//      Type 'number | undefined' is not assignable to type 'number'.\n//        Type 'undefined' is not assignable to type 'number'. (2322)\n</code></pre>\n<p>TypeScript 4.2 allows this assignment. However, it does <em>not</em> allow the assignment of non-optional properties with <code>undefined</code> in their types, nor does it allow writing <code>undefined</code> to a specific key:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\ntype BatmanWatchCount = {\n  \"Batman Begins\": number | undefined;\n  \"The Dark Knight\": number | undefined;\n  \"The Dark Knight Rises\": number | undefined;\n};\n\ndeclare const batmanWatchCount: BatmanWatchCount;\n\n// Still an error in TypeScript 4.2.\nconst movieWatchCount: { [key: string]: number } = batmanWatchCount;\n\n// Still an error in TypeScript 4.2.\n// Index signatures don't implicitly allow explicit `undefined`.\nmovieWatchCount[\"It's the Great Pumpkin, Charlie Brown\"] = undefined;\n</code></pre>\n<p>The new rule also does not apply to number index signatures, since they are assumed to be array-like and dense:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\ndeclare let sortOfArrayish: { [key: number]: string };\ndeclare let numberKeys: { 42?: string };\n\nsortOfArrayish = numberKeys;\n</code></pre>\n<p>You can get a better sense of this change <a href=\"https://github.com/microsoft/TypeScript/pull/41921\">by reading up on the original PR</a>.</p>\n<h2 id=\"declare-missing-helper-function\" style=\"position:relative;\"><a href=\"#declare-missing-helper-function\" aria-label=\"declare missing helper function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declare Missing Helper Function</h2>\n<p>Thanks to <a href=\"https://github.com/microsoft/TypeScript/pull/41215\">a community pull request</a> from <a href=\"https://github.com/a-tarasyuk\">Alexander Tarasyuk</a>, we now have a quick fix for declaring new functions and methods based on the call-site!</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/01/addMissingFunction-4.2.gif\" alt=\"An un-declared function &#x60;foo&#x60; being called, with a quick fix scaffolding out the new contents of the file\"></p>\n<h2 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h2>\n<p>We always strive to minimize breaking changes in a release.\nTypeScript 4.2 contains some breaking changes, but we believe they should be manageable in an upgrade.</p>\n<h3 id=\"libdts-updates\" style=\"position:relative;\"><a href=\"#libdts-updates\" aria-label=\"libdts updates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Updates</h3>\n<p>As with every TypeScript version, declarations for <code>lib.d.ts</code> (especially the declarations generated for web contexts), have changed.\nThere are various changes, though <code>Intl</code> and <code>ResizeObserver</code>’s may end up being the most disruptive.</p>\n<h3 id=\"noimplicitany-errors-apply-to-loose-yield-expressions\" style=\"position:relative;\"><a href=\"#noimplicitany-errors-apply-to-loose-yield-expressions\" aria-label=\"noimplicitany errors apply to loose yield expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitAny</code> Errors Apply to Loose <code>yield</code> Expressions</h3>\n<p>When the value of a <code>yield</code> expression is captured, but TypeScript can’t immediately figure out what type you intend for it to receive (i.e. the <code>yield</code> expression isn’t contextually typed), TypeScript will now issue an implicit <code>any</code> error.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 7057\nfunction* g1() {\n  const value = yield 1;\n}\n\nfunction* g2() {\n  // No error.\n  // The result of `yield 1` is unused.\n  yield 1;\n}\n\nfunction* g3() {\n  // No error.\n  // `yield 1` is contextually typed by 'string'.\n  const value: string = yield 1;\n}\n\nfunction* g4(): Generator&#x3C;number, void, string> {\n  // No error.\n  // TypeScript can figure out the type of `yield 1`\n  // from the explicit return type of `g4`.\n  const value = yield 1;\n}\n</code></pre>\n<p>See more details in <a href=\"https://github.com/microsoft/TypeScript/pull/41348\">the corresponding changes</a>.</p>\n<h3 id=\"expanded-uncalled-function-checks\" style=\"position:relative;\"><a href=\"#expanded-uncalled-function-checks\" aria-label=\"expanded uncalled function checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expanded Uncalled Function Checks</h3>\n<p>As described above, uncalled function checks will now operate consistently within <code>&#x26;&#x26;</code> and <code>||</code> expressions when using <code>--strictNullChecks</code>.\nThis can be a source of new breaks, but is typically an indication of a logic error in existing code.</p>\n<h3 id=\"type-arguments-in-javascript-are-not-parsed-as-type-arguments\" style=\"position:relative;\"><a href=\"#type-arguments-in-javascript-are-not-parsed-as-type-arguments\" aria-label=\"type arguments in javascript are not parsed as type arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Arguments in JavaScript Are Not Parsed as Type Arguments</h3>\n<p>Type arguments were already not allowed in JavaScript, but in TypeScript 4.2, the parser will parse them in a more spec-compliant way.\nSo when writing the following code in a JavaScript file:</p>\n<pre><code class=\"language-ts\">f&#x3C;T>(100);\n</code></pre>\n<p>TypeScript will parse it as the following JavaScript:</p>\n<pre><code class=\"language-js\">f &#x3C; T > 100;\n</code></pre>\n<p>This may impact you if you were leveraging TypeScript’s API to parse type constructs in JavaScript files, which may have occurred when trying to parse Flow files.</p>\n<p>See <a href=\"https://github.com/microsoft/TypeScript/pull/41928\">the pull request</a> for more details on what’s checked.</p>\n<h3 id=\"tuple-size-limits-for-spreads\" style=\"position:relative;\"><a href=\"#tuple-size-limits-for-spreads\" aria-label=\"tuple size limits for spreads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuple size limits for spreads</h3>\n<p>Tuple types can be made by using any sort of spread syntax (<code>...</code>) in TypeScript.</p>\n<pre><code class=\"language-ts\">// Tuple types with spread elements\ntype NumStr = [number, string];\ntype NumStrNumStr = [...NumStr, ...NumStr];\n\n// Array spread expressions\nconst numStr = [123, \"hello\"] as const;\nconst numStrNumStr = [...numStr, ...numStr] as const;\n</code></pre>\n<p>Sometimes these tuple types can accidentally grow to be huge, and that can make type-checking take a long time.\nInstead of letting the type-checking process hang (which is especially bad in editor scenarios), TypeScript has a limiter in place to avoid doing all that work.</p>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/42448\">see this pull request</a> for more details.</p>\n<h3 id=\"dts-extensions-cannot-be-used-in-import-paths\" style=\"position:relative;\"><a href=\"#dts-extensions-cannot-be-used-in-import-paths\" aria-label=\"dts extensions cannot be used in import paths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>.d.ts</code> Extensions Cannot Be Used In Import Paths</h3>\n<p>In TypeScript 4.2, it is now an error for your import paths to contain <code>.d.ts</code> in the extension.</p>\n<pre><code class=\"language-ts\">// must be changed something like\n//   - \"./foo\"\n//   - \"./foo.js\"\nimport { Foo } from \"./foo.d.ts\";\n</code></pre>\n<p>Instead, your import paths should reflect whatever your loader will do at runtime.\nAny of the following imports might be usable instead.</p>\n<pre><code class=\"language-ts\">import { Foo } from \"./foo\";\nimport { Foo } from \"./foo.js\";\nimport { Foo } from \"./foo/index.js\";\n</code></pre>\n<h3 id=\"reverting-template-literal-inference\" style=\"position:relative;\"><a href=\"#reverting-template-literal-inference\" aria-label=\"reverting template literal inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reverting Template Literal Inference</h3>\n<p>This change removed a feature from TypeScript 4.2 beta.\nIf you haven’t yet upgraded past our last stable release, you won’t be affected, but you may still be interested in the change.</p>\n<p>The beta version of TypeScript 4.2 included a change in inference to template strings.\nIn this change, template string literals would either be given template string types or simplify to multiple string literal types.\nThese types would then <em>widen</em> to <code>string</code> when assigning to mutable variables.</p>\n<pre><code class=\"language-ts\">declare const yourName: string;\n\n// 'bar' is constant.\n// It has type '`hello ${string}`'.\nconst bar = `hello ${yourName}`;\n\n// 'baz' is mutable.\n// It has type 'string'.\nlet baz = `hello ${yourName}`;\n</code></pre>\n<p>This is similar to how string literal inference works.</p>\n<pre><code class=\"language-ts\">// 'bar' has type '\"hello\"'.\nconst bar = \"hello\";\n\n// 'baz' has type 'string'.\nlet baz = \"hello\";\n</code></pre>\n<p>For that reason, we believed that making template string expressions have template string types would be “consistent”;\nhowever, from what we’ve seen and heard, that isn’t always desirable.</p>\n<p>In response, we’ve reverted this feature (and potential breaking change).\nIf you <em>do</em> want a template string expression to be given a literal-like type, you can always add <code>as const</code> to the end of it.</p>\n<pre><code class=\"language-ts\">declare const yourName: string;\n\n// 'bar' has type '`hello ${string}`'.\nconst bar = `hello ${yourName}` as const;\n//                              ^^^^^^^^\n\n// 'baz' has type 'string'.\nconst baz = `hello ${yourName}`;\n</code></pre>\n<h3 id=\"typescripts-lift-callback-in-visitnode-uses-a-different-type\" style=\"position:relative;\"><a href=\"#typescripts-lift-callback-in-visitnode-uses-a-different-type\" aria-label=\"typescripts lift callback in visitnode uses a different type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript’s <code>lift</code> Callback in <code>visitNode</code> Uses a Different Type</h3>\n<p>TypeScript has a <code>visitNode</code> function that takes a <code>lift</code> function.\n<code>lift</code> now expects a <code>readonly Node[]</code> instead of a <code>NodeArray&#x3C;Node></code>.\nThis is technically an API breaking change which you can read more on <a href=\"https://github.com/microsoft/TypeScript/pull/42000\">here</a>.</p>","headings":[{"value":"Smarter Type Alias Preservation","depth":2},{"value":"Leading/Middle Rest Elements in Tuple Types","depth":2},{"value":"Stricter Checks For The in Operator","depth":2},{"value":"--noPropertyAccessFromIndexSignature","depth":2},{"value":"abstract Construct Signatures","depth":2},{"value":"Understanding Your Project Structure With --explainFiles","depth":2},{"value":"Improved Uncalled Function Checks in Logical Expressions","depth":2},{"value":"Destructured Variables Can Be Explicitly Marked as Unused","depth":2},{"value":"Relaxed Rules Between Optional Properties and String Index Signatures","depth":2},{"value":"Declare Missing Helper Function","depth":2},{"value":"Breaking Changes","depth":2},{"value":"lib.d.ts Updates","depth":3},{"value":"noImplicitAny Errors Apply to Loose yield Expressions","depth":3},{"value":"Expanded Uncalled Function Checks","depth":3},{"value":"Type Arguments in JavaScript Are Not Parsed as Type Arguments","depth":3},{"value":"Tuple size limits for spreads","depth":3},{"value":".d.ts Extensions Cannot Be Used In Import Paths","depth":3},{"value":"Reverting Template Literal Inference","depth":3},{"value":"TypeScript’s lift Callback in visitNode Uses a Different Type","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-4-2.html","title":"TypeScript 4.2","disable_toc":null,"handbook":null,"oneline":"TypeScript 4.2 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-4.2","slug":"/docs/handbook/release-notes/typescript-4-2.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 4.2.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.544Z"}},"staticQueryHashes":[]}