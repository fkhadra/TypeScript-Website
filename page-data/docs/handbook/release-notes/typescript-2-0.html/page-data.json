{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-2-0.html","result":{"data":{"markdownRemark":{"id":"d8824c63-64b9-54a3-a2b0-27797d22c3bb","excerpt":"Null- and undefined-aware types TypeScript has two special types, Null and Undefined, that have the values null and undefined respectively.\nPreviously it was…","html":"<h2 id=\"null--and-undefined-aware-types\" style=\"position:relative;\"><a href=\"#null--and-undefined-aware-types\" aria-label=\"null  and undefined aware types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null- and undefined-aware types</h2>\n<p>TypeScript has two special types, Null and Undefined, that have the values <code>null</code> and <code>undefined</code> respectively.\nPreviously it was not possible to explicitly name these types, but <code>null</code> and <code>undefined</code> may now be used as type names regardless of type checking mode.</p>\n<p>The type checker previously considered <code>null</code> and <code>undefined</code> assignable to anything.\nEffectively, <code>null</code> and <code>undefined</code> were valid values of <em>every</em> type and it wasn’t possible to specifically exclude them (and therefore not possible to detect erroneous use of them).</p>\n<h2 id=\"--strictnullchecks\" style=\"position:relative;\"><a href=\"#--strictnullchecks\" aria-label=\"  strictnullchecks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--strictNullChecks</code></h2>\n<p><code>--strictNullChecks</code> switches to a new strict null checking mode.</p>\n<p>In strict null checking mode, the <code>null</code> and <code>undefined</code> values are <em>not</em> in the domain of every type and are only assignable to themselves and <code>any</code> (the one exception being that <code>undefined</code> is also assignable to <code>void</code>).\nSo, whereas <code>T</code> and <code>T | undefined</code> are considered synonymous in regular type checking mode (because <code>undefined</code> is considered a subtype of any <code>T</code>), they are different types in strict type checking mode, and only <code>T | undefined</code> permits <code>undefined</code> values. The same is true for the relationship of <code>T</code> to <code>T | null</code>.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">// Compiled with --strictNullChecks\nlet x: number;\nlet y: number | undefined;\nlet z: number | null | undefined;\nx = 1; // Ok\ny = 1; // Ok\nz = 1; // Ok\nx = undefined; // Error\ny = undefined; // Ok\nz = undefined; // Ok\nx = null; // Error\ny = null; // Error\nz = null; // Ok\nx = y; // Error\nx = z; // Error\ny = x; // Ok\ny = z; // Error\nz = x; // Ok\nz = y; // Ok\n</code></pre>\n<h2 id=\"assigned-before-use-checking\" style=\"position:relative;\"><a href=\"#assigned-before-use-checking\" aria-label=\"assigned before use checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assigned-before-use checking</h2>\n<p>In strict null checking mode the compiler requires every reference to a local variable of a type that doesn’t include <code>undefined</code> to be preceded by an assignment to that variable in every possible preceding code path.</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">// Compiled with --strictNullChecks\nlet x: number;\nlet y: number | null;\nlet z: number | undefined;\nx; // Error, reference not preceded by assignment\ny; // Error, reference not preceded by assignment\nz; // Ok\nx = 1;\ny = null;\nx; // Ok\ny; // Ok\n</code></pre>\n<p>The compiler checks that variables are definitely assigned by performing <em>control flow based type analysis</em>. See later for further details on this topic.</p>\n<h2 id=\"optional-parameters-and-properties\" style=\"position:relative;\"><a href=\"#optional-parameters-and-properties\" aria-label=\"optional parameters and properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional parameters and properties</h2>\n<p>Optional parameters and properties automatically have <code>undefined</code> added to their types, even when their type annotations don’t specifically include <code>undefined</code>.\nFor example, the following two types are identical:</p>\n<pre><code class=\"language-ts\">// Compiled with --strictNullChecks\ntype T1 = (x?: number) => string; // x has type number | undefined\ntype T2 = (x?: number | undefined) => string; // x has type number | undefined\n</code></pre>\n<h2 id=\"non-null-and-non-undefined-type-guards\" style=\"position:relative;\"><a href=\"#non-null-and-non-undefined-type-guards\" aria-label=\"non null and non undefined type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-null and non-undefined type guards</h2>\n<p>A property access or a function call produces a compile-time error if the object or function is of a type that includes <code>null</code> or <code>undefined</code>.\nHowever, type guards are extended to support non-null and non-undefined checks.</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">// Compiled with --strictNullChecks\ndeclare function f(x: number): string;\nlet x: number | null | undefined;\nif (x) {\n  f(x); // Ok, type of x is number here\n} else {\n  f(x); // Error, type of x is number? here\n}\nlet a = x != null ? f(x) : \"\"; // Type of a is string\nlet b = x &#x26;&#x26; f(x); // Type of b is string | 0 | null | undefined\n</code></pre>\n<p>Non-null and non-undefined type guards may use the <code>==</code>, <code>!=</code>, <code>===</code>, or <code>!==</code> operator to compare to <code>null</code> or <code>undefined</code>, as in <code>x != null</code> or <code>x === undefined</code>.\nThe effects on subject variable types accurately reflect JavaScript semantics (e.g. double-equals operators check for both values no matter which one is specified whereas triple-equals only checks for the specified value).</p>\n<h2 id=\"dotted-names-in-type-guards\" style=\"position:relative;\"><a href=\"#dotted-names-in-type-guards\" aria-label=\"dotted names in type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dotted names in type guards</h2>\n<p>Type guards previously only supported checking local variables and parameters.\nType guards now support checking “dotted names” consisting of a variable or parameter name followed one or more property accesses.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">interface Options {\n  location?: {\n    x?: number;\n    y?: number;\n  };\n}\n\nfunction foo(options?: Options) {\n  if (options &#x26;&#x26; options.location &#x26;&#x26; options.location.x) {\n    const x = options.location.x; // Type of x is number\n  }\n}\n</code></pre>\n<p>Type guards for dotted names also work with user defined type guard functions and the <code>typeof</code> and <code>instanceof</code> operators and do not depend on the <code>--strictNullChecks</code> compiler option.</p>\n<p>A type guard for a dotted name has no effect following an assignment to any part of the dotted name.\nFor example, a type guard for <code>x.y.z</code> will have no effect following an assignment to <code>x</code>, <code>x.y</code>, or <code>x.y.z</code>.</p>\n<h2 id=\"expression-operators\" style=\"position:relative;\"><a href=\"#expression-operators\" aria-label=\"expression operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expression operators</h2>\n<p>Expression operators permit operand types to include <code>null</code> and/or <code>undefined</code> but always produce values of non-null and non-undefined types.</p>\n<pre><code class=\"language-ts\">// Compiled with --strictNullChecks\nfunction sum(a: number | null, b: number | null) {\n  return a + b; // Produces value of type number\n}\n</code></pre>\n<p>The <code>&#x26;&#x26;</code> operator adds <code>null</code> and/or <code>undefined</code> to the type of the right operand depending on which are present in the type of the left operand, and the <code>||</code> operator removes both <code>null</code> and <code>undefined</code> from the type of the left operand in the resulting union type.</p>\n<pre><code class=\"language-ts\">// Compiled with --strictNullChecks\ninterface Entity {\n  name: string;\n}\nlet x: Entity | null;\nlet s = x &#x26;&#x26; x.name; // s is of type string | null\nlet y = x || { name: \"test\" }; // y is of type Entity\n</code></pre>\n<h2 id=\"type-widening\" style=\"position:relative;\"><a href=\"#type-widening\" aria-label=\"type widening permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type widening</h2>\n<p>The <code>null</code> and <code>undefined</code> types are <em>not</em> widened to <code>any</code> in strict null checking mode.</p>\n<pre><code class=\"language-ts\">let z = null; // Type of z is null\n</code></pre>\n<p>In regular type checking mode the inferred type of <code>z</code> is <code>any</code> because of widening, but in strict null checking mode the inferred type of <code>z</code> is <code>null</code> (and therefore, absent a type annotation, <code>null</code> is the only possible value for <code>z</code>).</p>\n<h2 id=\"non-null-assertion-operator\" style=\"position:relative;\"><a href=\"#non-null-assertion-operator\" aria-label=\"non null assertion operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-null assertion operator</h2>\n<p>A new <code>!</code> post-fix expression operator may be used to assert that its operand is non-null and non-undefined in contexts where the type checker is unable to conclude that fact.\nSpecifically, the operation <code>x!</code> produces a value of the type of <code>x</code> with <code>null</code> and <code>undefined</code> excluded.\nSimilar to type assertions of the forms <code>&#x3C;T>x</code> and <code>x as T</code>, the <code>!</code> non-null assertion operator is simply removed in the emitted JavaScript code.</p>\n<pre><code class=\"language-ts\">// Compiled with --strictNullChecks\nfunction validateEntity(e?: Entity) {\n  // Throw exception if e is null or invalid entity\n}\n\nfunction processEntity(e?: Entity) {\n  validateEntity(e);\n  let s = e!.name; // Assert that e is non-null and access name\n}\n</code></pre>\n<h2 id=\"compatibility\" style=\"position:relative;\"><a href=\"#compatibility\" aria-label=\"compatibility permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compatibility</h2>\n<p>The new features are designed such that they can be used in both strict null checking mode and regular type checking mode.\nIn particular, the <code>null</code> and <code>undefined</code> types are automatically erased from union types in regular type checking mode (because they are subtypes of all other types), and the <code>!</code> non-null assertion expression operator is permitted but has no effect in regular type checking mode. Thus, declaration files that are updated to use null- and undefined-aware types can still be used in regular type checking mode for backwards compatibility.</p>\n<p>In practical terms, strict null checking mode requires that all files in a compilation are null- and undefined-aware.</p>\n<h2 id=\"control-flow-based-type-analysis\" style=\"position:relative;\"><a href=\"#control-flow-based-type-analysis\" aria-label=\"control flow based type analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control flow based type analysis</h2>\n<p>TypeScript 2.0 implements a control flow-based type analysis for local variables and parameters.\nPreviously, the type analysis performed for type guards was limited to <code>if</code> statements and <code>?:</code> conditional expressions and didn’t include effects of assignments and control flow constructs such as <code>return</code> and <code>break</code> statements.\nWith TypeScript 2.0, the type checker analyses all possible flows of control in statements and expressions to produce the most specific type possible (the <em>narrowed type</em>) at any given location for a local variable or parameter that is declared to have a union type.</p>\n<h5 id=\"example-4\" style=\"position:relative;\"><a href=\"#example-4\" aria-label=\"example 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">function foo(x: string | number | boolean) {\n  if (typeof x === \"string\") {\n    x; // type of x is string here\n    x = 1;\n    x; // type of x is number here\n  }\n  x; // type of x is number | boolean here\n}\n\nfunction bar(x: string | number) {\n  if (typeof x === \"number\") {\n    return;\n  }\n  x; // type of x is string here\n}\n</code></pre>\n<p>Control flow based type analysis is particularly relevant in <code>--strictNullChecks</code> mode because nullable types are represented using union types:</p>\n<pre><code class=\"language-ts\">function test(x: string | null) {\n  if (x === null) {\n    return;\n  }\n  x; // type of x is string in remainder of function\n}\n</code></pre>\n<p>Furthermore, in <code>--strictNullChecks</code> mode, control flow based type analysis includes <em>definite assignment analysis</em> for local variables of types that don’t permit the value <code>undefined</code>.</p>\n<pre><code class=\"language-ts\">function mumble(check: boolean) {\n  let x: number; // Type doesn't permit undefined\n  x; // Error, x is undefined\n  if (check) {\n    x = 1;\n    x; // Ok\n  }\n  x; // Error, x is possibly undefined\n  x = 2;\n  x; // Ok\n}\n</code></pre>\n<h2 id=\"tagged-union-types\" style=\"position:relative;\"><a href=\"#tagged-union-types\" aria-label=\"tagged union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tagged union types</h2>\n<p>TypeScript 2.0 implements support for tagged (or discriminated) union types.\nSpecifically, the TS compiler now support type guards that narrow union types based on tests of a discriminant property and furthermore extend that capability to <code>switch</code> statements.</p>\n<h5 id=\"example-5\" style=\"position:relative;\"><a href=\"#example-5\" aria-label=\"example 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">interface Square {\n  kind: \"square\";\n  size: number;\n}\n\ninterface Rectangle {\n  kind: \"rectangle\";\n  width: number;\n  height: number;\n}\n\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ntype Shape = Square | Rectangle | Circle;\n\nfunction area(s: Shape) {\n  // In the following switch statement, the type of s is narrowed in each case clause\n  // according to the value of the discriminant property, thus allowing the other properties\n  // of that variant to be accessed without a type assertion.\n  switch (s.kind) {\n    case \"square\":\n      return s.size * s.size;\n    case \"rectangle\":\n      return s.width * s.height;\n    case \"circle\":\n      return Math.PI * s.radius * s.radius;\n  }\n}\n\nfunction test1(s: Shape) {\n  if (s.kind === \"square\") {\n    s; // Square\n  } else {\n    s; // Rectangle | Circle\n  }\n}\n\nfunction test2(s: Shape) {\n  if (s.kind === \"square\" || s.kind === \"rectangle\") {\n    return;\n  }\n  s; // Circle\n}\n</code></pre>\n<p>A <em>discriminant property type guard</em> is an expression of the form <code>x.p == v</code>, <code>x.p === v</code>, <code>x.p != v</code>, or <code>x.p !== v</code>, where <code>p</code> and <code>v</code> are a property and an expression of a string literal type or a union of string literal types.\nThe discriminant property type guard narrows the type of <code>x</code> to those constituent types of <code>x</code> that have a discriminant property <code>p</code> with one of the possible values of <code>v</code>.</p>\n<p>Note that we currently only support discriminant properties of string literal types.\nWe intend to later add support for boolean and numeric literal types.</p>\n<h2 id=\"the-never-type\" style=\"position:relative;\"><a href=\"#the-never-type\" aria-label=\"the never type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>never</code> type</h2>\n<p>TypeScript 2.0 introduces a new primitive type <code>never</code>.\nThe <code>never</code> type represents the type of values that never occur.\nSpecifically, <code>never</code> is the return type for functions that never return and <code>never</code> is the type of variables under type guards that are never true.</p>\n<p>The <code>never</code> type has the following characteristics:</p>\n<ul>\n<li><code>never</code> is a subtype of and assignable to every type.</li>\n<li>No type is a subtype of or assignable to <code>never</code> (except <code>never</code> itself).</li>\n<li>In a function expression or arrow function with no return type annotation, if the function has no <code>return</code> statements, or only <code>return</code> statements with expressions of type <code>never</code>, and if the end point of the function is not reachable (as determined by control flow analysis), the inferred return type for the function is <code>never</code>.</li>\n<li>In a function with an explicit <code>never</code> return type annotation, all <code>return</code> statements (if any) must have expressions of type <code>never</code> and the end point of the function must not be reachable.</li>\n</ul>\n<p>Because <code>never</code> is a subtype of every type, it is always omitted from union types and it is ignored in function return type inference as long as there are other types being returned.</p>\n<p>Some examples of functions returning <code>never</code>:</p>\n<pre><code class=\"language-ts\">// Function returning never must have unreachable end point\nfunction error(message: string): never {\n  throw new Error(message);\n}\n\n// Inferred return type is never\nfunction fail() {\n  return error(\"Something failed\");\n}\n\n// Function returning never must have unreachable end point\nfunction infiniteLoop(): never {\n  while (true) {}\n}\n</code></pre>\n<p>Some examples of use of functions returning <code>never</code>:</p>\n<pre><code class=\"language-ts\">// Inferred return type is number\nfunction move1(direction: \"up\" | \"down\") {\n  switch (direction) {\n    case \"up\":\n      return 1;\n    case \"down\":\n      return -1;\n  }\n  return error(\"Should never get here\");\n}\n\n// Inferred return type is number\nfunction move2(direction: \"up\" | \"down\") {\n  return direction === \"up\"\n    ? 1\n    : direction === \"down\"\n    ? -1\n    : error(\"Should never get here\");\n}\n\n// Inferred return type is T\nfunction check&#x3C;T>(x: T | undefined) {\n  return x || error(\"Undefined value\");\n}\n</code></pre>\n<p>Because <code>never</code> is assignable to every type, a function returning <code>never</code> can be used when a callback returning a more specific type is required:</p>\n<pre><code class=\"language-ts\">function test(cb: () => string) {\n  let s = cb();\n  return s;\n}\n\ntest(() => \"hello\");\ntest(() => fail());\ntest(() => {\n  throw new Error();\n});\n</code></pre>\n<h2 id=\"read-only-properties-and-index-signatures\" style=\"position:relative;\"><a href=\"#read-only-properties-and-index-signatures\" aria-label=\"read only properties and index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Read-only properties and index signatures</h2>\n<p>A property or index signature can now be declared with the <code>readonly</code> modifier is considered read-only.</p>\n<p>Read-only properties may have initializers and may be assigned to in constructors within the same class declaration, but otherwise assignments to read-only properties are disallowed.</p>\n<p>In addition, entities are <em>implicitly</em> read-only in several situations:</p>\n<ul>\n<li>A property declared with a <code>get</code> accessor and no <code>set</code> accessor is considered read-only.</li>\n<li>In the type of an enum object, enum members are considered read-only properties.</li>\n<li>In the type of a module object, exported <code>const</code> variables are considered read-only properties.</li>\n<li>An entity declared in an <code>import</code> statement is considered read-only.</li>\n<li>An entity accessed through an ES2015 namespace import is considered read-only (e.g. <code>foo.x</code> is read-only when <code>foo</code> is declared as <code>import * as foo from \"foo\"</code>).</li>\n</ul>\n<h5 id=\"example-6\" style=\"position:relative;\"><a href=\"#example-6\" aria-label=\"example 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">interface Point {\n  readonly x: number;\n  readonly y: number;\n}\n\nvar p1: Point = { x: 10, y: 20 };\np1.x = 5; // Error, p1.x is read-only\n\nvar p2 = { x: 1, y: 1 };\nvar p3: Point = p2; // Ok, read-only alias for p2\np3.x = 5; // Error, p3.x is read-only\np2.x = 5; // Ok, but also changes p3.x because of aliasing\n</code></pre>\n<pre><code class=\"language-ts\">class Foo {\n  readonly a = 1;\n  readonly b: string;\n  constructor() {\n    this.b = \"hello\"; // Assignment permitted in constructor\n  }\n}\n</code></pre>\n<pre><code class=\"language-ts\">let a: Array&#x3C;number> = [0, 1, 2, 3, 4];\nlet b: ReadonlyArray&#x3C;number> = a;\nb[5] = 5; // Error, elements are read-only\nb.push(5); // Error, no push method (because it mutates array)\nb.length = 3; // Error, length is read-only\na = b; // Error, mutating methods are missing\n</code></pre>\n<h2 id=\"specifying-the-type-of-this-for-functions\" style=\"position:relative;\"><a href=\"#specifying-the-type-of-this-for-functions\" aria-label=\"specifying the type of this for functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying the type of <code>this</code> for functions</h2>\n<p>Following up on specifying the type of <code>this</code> in a class or an interface, functions and methods can now declare the type of <code>this</code> they expect.</p>\n<p>By default the type of <code>this</code> inside a function is <code>any</code>.\nStarting with TypeScript 2.0, you can provide an explicit <code>this</code> parameter.\n<code>this</code> parameters are fake parameters that come first in the parameter list of a function:</p>\n<pre><code class=\"language-ts\">function f(this: void) {\n  // make sure `this` is unusable in this standalone function\n}\n</code></pre>\n<h2 id=\"this-parameters-in-callbacks\" style=\"position:relative;\"><a href=\"#this-parameters-in-callbacks\" aria-label=\"this parameters in callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> parameters in callbacks</h2>\n<p>Libraries can also use <code>this</code> parameters to declare how callbacks will be invoked.</p>\n<h5 id=\"example-7\" style=\"position:relative;\"><a href=\"#example-7\" aria-label=\"example 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">interface UIElement {\n  addClickListener(onclick: (this: void, e: Event) => void): void;\n}\n</code></pre>\n<p><code>this: void</code> means that <code>addClickListener</code> expects <code>onclick</code> to be a function that does not require a <code>this</code> type.</p>\n<p>Now if you annotate calling code with <code>this</code>:</p>\n<pre><code class=\"language-ts\">class Handler {\n  info: string;\n  onClickBad(this: Handler, e: Event) {\n    // oops, used this here. using this callback would crash at runtime\n    this.info = e.message;\n  }\n}\nlet h = new Handler();\nuiElement.addClickListener(h.onClickBad); // error!\n</code></pre>\n<h2 id=\"--noimplicitthis\" style=\"position:relative;\"><a href=\"#--noimplicitthis\" aria-label=\"  noimplicitthis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--noImplicitThis</code></h2>\n<p>A new flag is also added in TypeScript 2.0 to flag all uses of <code>this</code> in functions without an explicit type annotation.</p>\n<h2 id=\"glob-support-in-tsconfigjson\" style=\"position:relative;\"><a href=\"#glob-support-in-tsconfigjson\" aria-label=\"glob support in tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Glob support in <code>tsconfig.json</code></h2>\n<p>Glob support is here!! Glob support has been <a href=\"https://github.com/Microsoft/TypeScript/issues/1927\">one of the most requested features</a>.</p>\n<p>Glob-like file patterns are supported two properties <code>\"include\"</code> and <code>\"exclude\"</code>.</p>\n<h5 id=\"example-8\" style=\"position:relative;\"><a href=\"#example-8\" aria-label=\"example 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"outFile\": \"../../built/local/tsc.js\",\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/*.spec.ts\"]\n}\n</code></pre>\n<p>The supported glob wildcards are:</p>\n<ul>\n<li><code>*</code> matches zero or more characters (excluding directory separators)</li>\n<li><code>?</code> matches any one character (excluding directory separators)</li>\n<li><code>**/</code> recursively matches any subdirectory</li>\n</ul>\n<p>If a segment of a glob pattern includes only <code>*</code> or <code>.*</code>, then only files with supported extensions are included (e.g. <code>.ts</code>, <code>.tsx</code>, and <code>.d.ts</code> by default with <code>.js</code> and <code>.jsx</code> if <code>allowJs</code> is set to true).</p>\n<p>If the <code>\"files\"</code> and <code>\"include\"</code> are both left unspecified, the compiler defaults to including all TypeScript (<code>.ts</code>, <code>.d.ts</code> and <code>.tsx</code>) files in the containing directory and subdirectories except those excluded using the <code>\"exclude\"</code> property. JS files (<code>.js</code> and <code>.jsx</code>) are also included if <code>allowJs</code> is set to true.</p>\n<p>If the <code>\"files\"</code> or <code>\"include\"</code> properties are specified, the compiler will instead include the union of the files included by those two properties.\nFiles in the directory specified using the <code>\"outDir\"</code> compiler option are always excluded unless explicitly included via the <code>\"files\"</code> property (even when the ”<code>exclude</code>” property is specified).</p>\n<p>Files included using <code>\"include\"</code> can be filtered using the <code>\"exclude\"</code> property.\nHowever, files included explicitly using the <code>\"files\"</code> property are always included regardless of <code>\"exclude\"</code>.\nThe <code>\"exclude\"</code> property defaults to excluding the <code>node_modules</code>, <code>bower_components</code>, and <code>jspm_packages</code> directories when not specified.</p>\n<h2 id=\"module-resolution-enhancements-baseurl-path-mapping-rootdirs-and-tracing\" style=\"position:relative;\"><a href=\"#module-resolution-enhancements-baseurl-path-mapping-rootdirs-and-tracing\" aria-label=\"module resolution enhancements baseurl path mapping rootdirs and tracing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module resolution enhancements: BaseUrl, Path mapping, rootDirs and tracing</h2>\n<p>TypeScript 2.0 provides a set of additional module resolution knops to <em>inform</em> the compiler where to find declarations for a given module.</p>\n<p>See <a href=\"http://www.typescriptlang.org/docs/handbook/module-resolution.html\">Module Resolution</a> documentation for more details.</p>\n<h2 id=\"base-url\" style=\"position:relative;\"><a href=\"#base-url\" aria-label=\"base url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Base URL</h2>\n<p>Using a <code>baseUrl</code> is a common practice in applications using AMD module loaders where modules are “deployed” to a single folder at run-time.\nAll module imports with non-relative names are assumed to be relative to the <code>baseUrl</code>.</p>\n<h5 id=\"example-9\" style=\"position:relative;\"><a href=\"#example-9\" aria-label=\"example 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./modules\"\n  }\n}\n</code></pre>\n<p>Now imports to <code>\"moduleA\"</code> would be looked up in <code>./modules/moduleA</code></p>\n<pre><code class=\"language-ts\">import A from \"moduleA\";\n</code></pre>\n<h2 id=\"path-mapping\" style=\"position:relative;\"><a href=\"#path-mapping\" aria-label=\"path mapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Path mapping</h2>\n<p>Sometimes modules are not directly located under <em>baseUrl</em>.\nLoaders use a mapping configuration to map module names to files at run-time, see <a href=\"http://requirejs.org/docs/api.html#config-paths\">RequireJs documentation</a> and <a href=\"https://github.com/systemjs/systemjs/blob/master/docs/import-maps.md\">SystemJS documentation</a>.</p>\n<p>The TypeScript compiler supports the declaration of such mappings using <code>\"paths\"</code> property in <code>tsconfig.json</code> files.</p>\n<h5 id=\"example-10\" style=\"position:relative;\"><a href=\"#example-10\" aria-label=\"example 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>For instance, an import to a module <code>\"jquery\"</code> would be translated at runtime to <code>\"node_modules/jquery/dist/jquery.slim.min.js\"</code>.</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./node_modules\",\n    \"paths\": {\n      \"jquery\": [\"jquery/dist/jquery.slim.min\"]\n    }\n}\n</code></pre>\n<p>Using <code>\"paths\"</code> also allow for more sophisticated mappings including multiple fall back locations.\nConsider a project configuration where only some modules are available in one location, and the rest are in another.</p>\n<h2 id=\"virtual-directories-with-rootdirs\" style=\"position:relative;\"><a href=\"#virtual-directories-with-rootdirs\" aria-label=\"virtual directories with rootdirs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual Directories with <code>rootDirs</code></h2>\n<p>Using ‘rootDirs’, you can inform the compiler of the <em>roots</em> making up this “virtual” directory;\nand thus the compiler can resolve relative modules imports within these “virtual” directories <em>as if</em> they were merged together in one directory.</p>\n<h5 id=\"example-11\" style=\"position:relative;\"><a href=\"#example-11\" aria-label=\"example 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p>Given this project structure:</p>\n<pre><code class=\"language-tree\"> src\n └── views\n     └── view1.ts (imports './template1')\n     └── view2.ts\n\n generated\n └── templates\n         └── views\n             └── template1.ts (imports './view2')\n</code></pre>\n<p>A build step will copy the files in <code>/src/views</code> and <code>/generated/templates/views</code> to the same directory in the output.\nAt run-time, a view can expect its template to exist next to it, and thus should import it using a relative name as <code>\"./template\"</code>.</p>\n<p><code>\"rootDirs\"</code> specify a list of <em>roots</em> whose contents are expected to merge at run-time.\nSo following our example, the <code>tsconfig.json</code> file should look like:</p>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src/views\", \"generated/templates/views\"]\n  }\n}\n</code></pre>\n<h2 id=\"tracing-module-resolution\" style=\"position:relative;\"><a href=\"#tracing-module-resolution\" aria-label=\"tracing module resolution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tracing module resolution</h2>\n<p><code>--traceResolution</code> offers a handy way to understand how modules have been resolved by the compiler.</p>\n<pre><code class=\"language-shell\">tsc --traceResolution\n</code></pre>\n<h2 id=\"shorthand-ambient-module-declarations\" style=\"position:relative;\"><a href=\"#shorthand-ambient-module-declarations\" aria-label=\"shorthand ambient module declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shorthand ambient module declarations</h2>\n<p>If you don’t want to take the time to write out declarations before using a new module, you can now just use a shorthand declaration to get started quickly.</p>\n<h5 id=\"declarationsdts\" style=\"position:relative;\"><a href=\"#declarationsdts\" aria-label=\"declarationsdts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>declarations.d.ts</h5>\n<pre><code class=\"language-ts\">declare module \"hot-new-module\";\n</code></pre>\n<p>All imports from a shorthand module will have the any type.</p>\n<pre><code class=\"language-ts\">import x, { y } from \"hot-new-module\";\nx(y);\n</code></pre>\n<h2 id=\"wildcard-character-in-module-names\" style=\"position:relative;\"><a href=\"#wildcard-character-in-module-names\" aria-label=\"wildcard character in module names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wildcard character in module names</h2>\n<p>Importing none-code resources using module loaders extension (e.g. <a href=\"https://github.com/amdjs/amdjs-api/blob/master/LoaderPlugins.md\">AMD</a> or <a href=\"https://github.com/systemjs/systemjs/blob/master/docs/module-types.md\">SystemJS</a>) has not been easy before;\npreviously an ambient module declaration had to be defined for each resource.</p>\n<p>TypeScript 2.0 supports the use of the wildcard character (<code>*</code>) to declare a “family” of module names;\nthis way, a declaration is only required once for an extension, and not for every resource.</p>\n<h5 id=\"example-12\" style=\"position:relative;\"><a href=\"#example-12\" aria-label=\"example 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">declare module \"*!text\" {\n  const content: string;\n  export default content;\n}\n// Some do it the other way around.\ndeclare module \"json!*\" {\n  const value: any;\n  export default value;\n}\n</code></pre>\n<p>Now you can import things that match <code>\"*!text\"</code> or <code>\"json!*\"</code>.</p>\n<pre><code class=\"language-ts\">import fileContent from \"./xyz.txt!text\";\nimport data from \"json!http://example.com/data.json\";\nconsole.log(data, fileContent);\n</code></pre>\n<p>Wildcard module names can be even more useful when migrating from an un-typed code base.\nCombined with Shorthand ambient module declarations, a set of modules can be easily declared as <code>any</code>.</p>\n<h5 id=\"example-13\" style=\"position:relative;\"><a href=\"#example-13\" aria-label=\"example 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">declare module \"myLibrary/*\";\n</code></pre>\n<p>All imports to any module under <code>myLibrary</code> would be considered to have the type <code>any</code> by the compiler;\nthus, shutting down any checking on the shapes or types of these modules.</p>\n<pre><code class=\"language-ts\">import { readFile } from \"myLibrary/fileSystem/readFile`;\n\nreadFile(); // readFile is 'any'\n</code></pre>\n<h2 id=\"support-for-umd-module-definitions\" style=\"position:relative;\"><a href=\"#support-for-umd-module-definitions\" aria-label=\"support for umd module definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for UMD module definitions</h2>\n<p>Some libraries are designed to be used in many module loaders, or with no module loading (global variables).\nThese are known as <a href=\"https://github.com/umdjs/umd\">UMD</a> or <a href=\"http://isomorphic.net\">Isomorphic</a> modules.\nThese libraries can be accessed through either an import or a global variable.</p>\n<p>For example:</p>\n<h5 id=\"math-libdts\" style=\"position:relative;\"><a href=\"#math-libdts\" aria-label=\"math libdts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>math-lib.d.ts</h5>\n<pre><code class=\"language-ts\">export const isPrime(x: number): boolean;\nexport as namespace mathLib;\n</code></pre>\n<p>The library can then be used as an import within modules:</p>\n<pre><code class=\"language-ts\">import { isPrime } from \"math-lib\";\nisPrime(2);\nmathLib.isPrime(2); // ERROR: can't use the global definition from inside a module\n</code></pre>\n<p>It can also be used as a global variable, but only inside of a script.\n(A script is a file with no imports or exports.)</p>\n<pre><code class=\"language-ts\">mathLib.isPrime(2);\n</code></pre>\n<h2 id=\"optional-class-properties\" style=\"position:relative;\"><a href=\"#optional-class-properties\" aria-label=\"optional class properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional class properties</h2>\n<p>Optional properties and methods can now be declared in classes, similar to what is already permitted in interfaces.</p>\n<h5 id=\"example-14\" style=\"position:relative;\"><a href=\"#example-14\" aria-label=\"example 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">class Bar {\n  a: number;\n  b?: number;\n  f() {\n    return 1;\n  }\n  g?(): number; // Body of optional method can be omitted\n  h?() {\n    return 2;\n  }\n}\n</code></pre>\n<p>When compiled in <code>--strictNullChecks</code> mode, optional properties and methods automatically have <code>undefined</code> included in their type. Thus, the <code>b</code> property above is of type <code>number | undefined</code> and the <code>g</code> method above is of type <code>(() => number) | undefined</code>.\nType guards can be used to strip away the <code>undefined</code> part of the type:</p>\n<pre><code class=\"language-ts\">function test(x: Bar) {\n  x.a; // number\n  x.b; // number | undefined\n  x.f; // () => number\n  x.g; // (() => number) | undefined\n  let f1 = x.f(); // number\n  let g1 = x.g &#x26;&#x26; x.g(); // number | undefined\n  let g2 = x.g ? x.g() : 0; // number\n}\n</code></pre>\n<h2 id=\"private-and-protected-constructors\" style=\"position:relative;\"><a href=\"#private-and-protected-constructors\" aria-label=\"private and protected constructors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Private and Protected Constructors</h2>\n<p>A class constructor may be marked <code>private</code> or <code>protected</code>.\nA class with private constructor cannot be instantiated outside the class body, and cannot be extended.\nA class with protected constructor cannot be instantiated outside the class body, but can be extended.</p>\n<h5 id=\"example-15\" style=\"position:relative;\"><a href=\"#example-15\" aria-label=\"example 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">class Singleton {\n  private static instance: Singleton;\n\n  private constructor() {}\n\n  static getInstance() {\n    if (!Singleton.instance) {\n      Singleton.instance = new Singleton();\n    }\n    return Singleton.instance;\n  }\n}\n\nlet e = new Singleton(); // Error: constructor of 'Singleton' is private.\nlet v = Singleton.getInstance();\n</code></pre>\n<h2 id=\"abstract-properties-and-accessors\" style=\"position:relative;\"><a href=\"#abstract-properties-and-accessors\" aria-label=\"abstract properties and accessors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abstract properties and accessors</h2>\n<p>An abstract class can declare abstract properties and/or accessors.\nAny sub class will need to declare the abstract properties or be marked as abstract.\nAbstract properties cannot have an initializer.\nAbstract accessors cannot have bodies.</p>\n<h5 id=\"example-16\" style=\"position:relative;\"><a href=\"#example-16\" aria-label=\"example 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">abstract class Base {\n  abstract name: string;\n  abstract get value();\n  abstract set value(v: number);\n}\n\nclass Derived extends Base {\n  name = \"derived\";\n\n  value = 1;\n}\n</code></pre>\n<h2 id=\"implicit-index-signatures\" style=\"position:relative;\"><a href=\"#implicit-index-signatures\" aria-label=\"implicit index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implicit index signatures</h2>\n<p>An object literal type is now assignable to a type with an index signature if all known properties in the object literal are assignable to that index signature. This makes it possible to pass a variable that was initialized with an object literal as parameter to a function that expects a map or dictionary:</p>\n<pre><code class=\"language-ts\">function httpService(path: string, headers: { [x: string]: string }) {}\n\nconst headers = {\n  \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nhttpService(\"\", { \"Content-Type\": \"application/x-www-form-urlencoded\" }); // Ok\nhttpService(\"\", headers); // Now ok, previously wasn't\n</code></pre>\n<h2 id=\"including-built-in-type-declarations-with---lib\" style=\"position:relative;\"><a href=\"#including-built-in-type-declarations-with---lib\" aria-label=\"including built in type declarations with   lib permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Including built-in type declarations with <code>--lib</code></h2>\n<p>Getting to ES6/ES2015 built-in API declarations were only limited to <code>target: ES6</code>.\nEnter <code>--lib</code>; with <code>--lib</code> you can specify a list of built-in API declaration groups that you can chose to include in your project.\nFor instance, if you expect your runtime to have support for <code>Map</code>, <code>Set</code> and <code>Promise</code> (e.g. most evergreen browsers today), just include <code>--lib es2015.collection,es2015.promise</code>.\nSimilarly you can exclude declarations you do not want to include in your project, e.g. DOM if you are working on a node project using <code>--lib es5,es6</code>.</p>\n<p>Here is a list of available API groups:</p>\n<ul>\n<li>dom</li>\n<li>webworker</li>\n<li>es5</li>\n<li>es6 / es2015</li>\n<li>es2015.core</li>\n<li>es2015.collection</li>\n<li>es2015.iterable</li>\n<li>es2015.promise</li>\n<li>es2015.proxy</li>\n<li>es2015.reflect</li>\n<li>es2015.generator</li>\n<li>es2015.symbol</li>\n<li>es2015.symbol.wellknown</li>\n<li>es2016</li>\n<li>es2016.array.include</li>\n<li>es2017</li>\n<li>es2017.object</li>\n<li>es2017.sharedmemory</li>\n<li>scripthost</li>\n</ul>\n<h5 id=\"example-17\" style=\"position:relative;\"><a href=\"#example-17\" aria-label=\"example 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-bash\">tsc --target es5 --lib es5,es2015.promise\n</code></pre>\n<pre><code class=\"language-json\" data-meta=\"tsconfig\">\"compilerOptions\": {\n    \"lib\": [\"es5\", \"es2015.promise\"]\n}\n</code></pre>\n<h2 id=\"flag-unused-declarations-with---nounusedparameters-and---nounusedlocals\" style=\"position:relative;\"><a href=\"#flag-unused-declarations-with---nounusedparameters-and---nounusedlocals\" aria-label=\"flag unused declarations with   nounusedparameters and   nounusedlocals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flag unused declarations with <code>--noUnusedParameters</code> and <code>--noUnusedLocals</code></h2>\n<p>TypeScript 2.0 has two new flags to help you maintain a clean code base.\n<code>--noUnusedParameters</code> flags any unused function or method parameters errors.\n<code>--noUnusedLocals</code> flags any unused local (un-exported) declaration like variables, functions, classes, imports, etc…\nAlso, unused private members of a class would be flagged as errors under <code>--noUnusedLocals</code>.</p>\n<h5 id=\"example-18\" style=\"position:relative;\"><a href=\"#example-18\" aria-label=\"example 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">import B, { readFile } from \"./b\";\n//     ^ Error: `B` declared but never used\nreadFile();\n\nexport function write(message: string, args: string[]) {\n  //                                 ^^^^  Error: 'arg' declared but never used.\n  console.log(message);\n}\n</code></pre>\n<p>Parameters declaration with names starting with <code>_</code> are exempt from the unused parameter checking.\ne.g.:</p>\n<pre><code class=\"language-ts\">function returnNull(_a) {\n  // OK\n  return null;\n}\n</code></pre>\n<h2 id=\"module-identifiers-allow-for-js-extension\" style=\"position:relative;\"><a href=\"#module-identifiers-allow-for-js-extension\" aria-label=\"module identifiers allow for js extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module identifiers allow for <code>.js</code> extension</h2>\n<p>Before TypeScript 2.0, a module identifier was always assumed to be extension-less;\nfor instance, given an import as <code>import d from \"./moduleA.js\"</code>, the compiler looked up the definition of <code>\"moduleA.js\"</code> in <code>./moduleA.js.ts</code> or <code>./moduleA.js.d.ts</code>.\nThis made it hard to use bundling/loading tools like <a href=\"https://github.com/systemjs/systemjs\">SystemJS</a> that expect URI’s in their module identifier.</p>\n<p>With TypeScript 2.0, the compiler will look up definition of <code>\"moduleA.js\"</code> in <code>./moduleA.ts</code> or <code>./moduleA.d.t</code>.</p>\n<h2 id=\"support-target--es5-with-module-es6\" style=\"position:relative;\"><a href=\"#support-target--es5-with-module-es6\" aria-label=\"support target  es5 with module es6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support ‘target : es5’ with ‘module: es6’</h2>\n<p>Previously flagged as an invalid flag combination, <code>target: es5</code> and ‘module: es6’ is now supported.\nThis should facilitate using ES2015-based tree shakers like <a href=\"https://github.com/rollup/rollup\">rollup</a>.</p>\n<h2 id=\"trailing-commas-in-function-parameter-and-argument-lists\" style=\"position:relative;\"><a href=\"#trailing-commas-in-function-parameter-and-argument-lists\" aria-label=\"trailing commas in function parameter and argument lists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trailing commas in function parameter and argument lists</h2>\n<p>Trailing comma in function parameter and argument lists are now allowed.\nThis is an implementation for a <a href=\"https://jeffmo.github.io/es-trailing-function-commas/\">Stage-3 ECMAScript proposal</a> that emits down to valid ES3/ES5/ES6.</p>\n<h5 id=\"example-19\" style=\"position:relative;\"><a href=\"#example-19\" aria-label=\"example 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">function foo(\n  bar: Bar,\n  baz: Baz // trailing commas are OK in parameter lists\n) {\n  // Implementation...\n}\n\nfoo(\n  bar,\n  baz // and in argument lists\n);\n</code></pre>\n<h2 id=\"new---skiplibcheck\" style=\"position:relative;\"><a href=\"#new---skiplibcheck\" aria-label=\"new   skiplibcheck permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New <code>--skipLibCheck</code></h2>\n<p>TypeScript 2.0 adds a new <code>--skipLibCheck</code> compiler option that causes type checking of declaration files (files with extension <code>.d.ts</code>) to be skipped.\nWhen a program includes large declaration files, the compiler spends a lot of time type checking declarations that are already known to not contain errors, and compile times may be significantly shortened by skipping declaration file type checks.</p>\n<p>Since declarations in one file can affect type checking in other files, some errors may not be detected when <code>--skipLibCheck</code> is specified.\nFor example, if a non-declaration file augments a type declared in a declaration file, errors may result that are only reported when the declaration file is checked.\nHowever, in practice such situations are rare.</p>\n<h2 id=\"allow-duplicate-identifiers-across-declarations\" style=\"position:relative;\"><a href=\"#allow-duplicate-identifiers-across-declarations\" aria-label=\"allow duplicate identifiers across declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Allow duplicate identifiers across declarations</h2>\n<p>This has been one common source of duplicate definition errors.\nMultiple declaration files defining the same members on interfaces.</p>\n<p>TypeScript 2.0 relaxes this constraint and allows duplicate identifiers across blocks, as long as they have <em>identical</em> types.</p>\n<p>Within the same block duplicate definitions are still disallowed.</p>\n<h5 id=\"example-20\" style=\"position:relative;\"><a href=\"#example-20\" aria-label=\"example 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre><code class=\"language-ts\">interface Error {\n  stack?: string;\n}\n\ninterface Error {\n  code?: string;\n  path?: string;\n  stack?: string; // OK\n}\n</code></pre>\n<h2 id=\"new---declarationdir\" style=\"position:relative;\"><a href=\"#new---declarationdir\" aria-label=\"new   declarationdir permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New <code>--declarationDir</code></h2>\n<p><code>--declarationDir</code> allows for generating declaration files in a different location than JavaScript files.</p>","headings":[{"value":"Null- and undefined-aware types","depth":2},{"value":"--strictNullChecks","depth":2},{"value":"Example","depth":5},{"value":"Assigned-before-use checking","depth":2},{"value":"Example","depth":5},{"value":"Optional parameters and properties","depth":2},{"value":"Non-null and non-undefined type guards","depth":2},{"value":"Example","depth":5},{"value":"Dotted names in type guards","depth":2},{"value":"Example","depth":5},{"value":"Expression operators","depth":2},{"value":"Type widening","depth":2},{"value":"Non-null assertion operator","depth":2},{"value":"Compatibility","depth":2},{"value":"Control flow based type analysis","depth":2},{"value":"Example","depth":5},{"value":"Tagged union types","depth":2},{"value":"Example","depth":5},{"value":"The never type","depth":2},{"value":"Read-only properties and index signatures","depth":2},{"value":"Example","depth":5},{"value":"Specifying the type of this for functions","depth":2},{"value":"this parameters in callbacks","depth":2},{"value":"Example","depth":5},{"value":"--noImplicitThis","depth":2},{"value":"Glob support in tsconfig.json","depth":2},{"value":"Example","depth":5},{"value":"Module resolution enhancements: BaseUrl, Path mapping, rootDirs and tracing","depth":2},{"value":"Base URL","depth":2},{"value":"Example","depth":5},{"value":"Path mapping","depth":2},{"value":"Example","depth":5},{"value":"Virtual Directories with rootDirs","depth":2},{"value":"Example","depth":5},{"value":"Tracing module resolution","depth":2},{"value":"Shorthand ambient module declarations","depth":2},{"value":"declarations.d.ts","depth":5},{"value":"Wildcard character in module names","depth":2},{"value":"Example","depth":5},{"value":"Example","depth":5},{"value":"Support for UMD module definitions","depth":2},{"value":"math-lib.d.ts","depth":5},{"value":"Optional class properties","depth":2},{"value":"Example","depth":5},{"value":"Private and Protected Constructors","depth":2},{"value":"Example","depth":5},{"value":"Abstract properties and accessors","depth":2},{"value":"Example","depth":5},{"value":"Implicit index signatures","depth":2},{"value":"Including built-in type declarations with --lib","depth":2},{"value":"Example","depth":5},{"value":"Flag unused declarations with --noUnusedParameters and --noUnusedLocals","depth":2},{"value":"Example","depth":5},{"value":"Module identifiers allow for .js extension","depth":2},{"value":"Support ‘target : es5’ with ‘module: es6’","depth":2},{"value":"Trailing commas in function parameter and argument lists","depth":2},{"value":"Example","depth":5},{"value":"New --skipLibCheck","depth":2},{"value":"Allow duplicate identifiers across declarations","depth":2},{"value":"Example","depth":5},{"value":"New --declarationDir","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-0.html","title":"TypeScript 2.0","disable_toc":null,"handbook":null,"oneline":"TypeScript 2.0 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-2.0","slug":"/docs/handbook/release-notes/typescript-2-0.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 2.0.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.540Z"}},"staticQueryHashes":[]}