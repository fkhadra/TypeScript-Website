{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-1-3.html","result":{"data":{"markdownRemark":{"id":"a0ce7a5b-df29-59fe-9cec-84b4b57d10f7","excerpt":"Protected The new protected modifier in classes works like it does in familiar languages like C++, C#, and Java. A protected member of a class is visible onlyâ€¦","html":"<h2 id=\"protected\" style=\"position:relative;\"><a href=\"#protected\" aria-label=\"protected permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Protected</h2>\n<p>The new <code>protected</code> modifier in classes works like it does in familiar languages like C++, C#, and Java. A <code>protected</code> member of a class is visible only inside subclasses of the class in which it is declared:</p>\n<pre><code class=\"language-ts\">class Thing {\n  protected doSomething() {\n    /* ... */\n  }\n}\n\nclass MyThing extends Thing {\n  public myMethod() {\n    // OK, can access protected member from subclass\n    this.doSomething();\n  }\n}\nvar t = new MyThing();\nt.doSomething(); // Error, cannot call protected member from outside class\n</code></pre>\n<h2 id=\"tuple-types\" style=\"position:relative;\"><a href=\"#tuple-types\" aria-label=\"tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuple types</h2>\n<p>Tuple types express an array where the type of certain elements is known, but need not be the same. For example, you may want to represent an array with a <code>string</code> at position 0 and a <code>number</code> at position 1:</p>\n<pre><code class=\"language-ts\">// Declare a tuple type\nvar x: [string, number];\n// Initialize it\nx = [\"hello\", 10]; // OK\n// Initialize it incorrectly\nx = [10, \"hello\"]; // Error\n</code></pre>\n<p>When accessing an element with a known index, the correct type is retrieved:</p>\n<pre><code class=\"language-ts\">console.log(x[0].substr(1)); // OK\nconsole.log(x[1].substr(1)); // Error, 'number' does not have 'substr'\n</code></pre>\n<p>Note that in TypeScript 1.4, when accessing an element outside the set of known indices, a union type is used instead:</p>\n<pre><code class=\"language-ts\">x[3] = \"world\"; // OK\nconsole.log(x[5].toString()); // OK, 'string' and 'number' both have toString\nx[6] = true; // Error, boolean isn't number or string\n</code></pre>","headings":[{"value":"Protected","depth":2},{"value":"Tuple types","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-1-3.html","title":"TypeScript 1.3","disable_toc":null,"handbook":null,"oneline":"TypeScript 1.3 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"4-typescript-1.3","slug":"/docs/handbook/release-notes/typescript-1-3.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 1.3.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.536Z"}},"staticQueryHashes":[]}