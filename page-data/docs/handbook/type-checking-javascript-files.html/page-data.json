{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/type-checking-javascript-files.html","result":{"data":{"markdownRemark":{"id":"e54f8f34-62e3-59fe-b616-960923e66185","excerpt":"Here are some notable differences on how checking works in .js files compared to .ts files. Properties are inferred from assignments in class bodies ES2015 does…","html":"<p>Here are some notable differences on how checking works in <code>.js</code> files compared to <code>.ts</code> files.</p>\n<h2 id=\"properties-are-inferred-from-assignments-in-class-bodies\" style=\"position:relative;\"><a href=\"#properties-are-inferred-from-assignments-in-class-bodies\" aria-label=\"properties are inferred from assignments in class bodies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Properties are inferred from assignments in class bodies</h2>\n<p>ES2015 does not have a means for declaring properties on classes. Properties are dynamically assigned, just like object literals.</p>\n<p>In a <code>.js</code> file, the compiler infers properties from property assignments inside the class body.\nThe type of a property is the type given in the constructor, unless it’s not defined there, or the type in the constructor is undefined or null.\nIn that case, the type is the union of the types of all the right-hand values in these assignments.\nProperties defined in the constructor are always assumed to exist, whereas ones defined just in methods, getters, or setters are considered optional.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @checkJs\n// @errors: 2322\nclass C {\n  constructor() {\n    this.constructorOnly = 0;\n    this.constructorUnknown = undefined;\n  }\n  method() {\n    this.constructorOnly = false;\n    this.constructorUnknown = \"plunkbat\"; // ok, constructorUnknown is string | undefined\n    this.methodOnly = \"ok\"; // ok, but methodOnly could also be undefined\n  }\n  method2() {\n    this.methodOnly = true; // also, ok, methodOnly's type is string | boolean | undefined\n  }\n}\n</code></pre>\n<p>If properties are never set in the class body, they are considered unknown.\nIf your class has properties that are only read from, add and then annotate a declaration in the constructor with JSDoc to specify the type.\nYou don’t even have to give a value if it will be initialised later:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @checkJs\n// @errors: 2322\nclass C {\n  constructor() {\n    /** @type {number | undefined} */\n    this.prop = undefined;\n    /** @type {number | undefined} */\n    this.count;\n  }\n}\n\nlet c = new C();\nc.prop = 0; // OK\nc.count = \"string\";\n</code></pre>\n<h2 id=\"constructor-functions-are-equivalent-to-classes\" style=\"position:relative;\"><a href=\"#constructor-functions-are-equivalent-to-classes\" aria-label=\"constructor functions are equivalent to classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructor functions are equivalent to classes</h2>\n<p>Before ES2015, Javascript used constructor functions instead of classes.\nThe compiler supports this pattern and understands constructor functions as equivalent to ES2015 classes.\nThe property inference rules described above work exactly the same way.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @checkJs\n// @errors: 2683 2322\nfunction C() {\n  this.constructorOnly = 0;\n  this.constructorUnknown = undefined;\n}\nC.prototype.method = function () {\n  this.constructorOnly = false;\n  this.constructorUnknown = \"plunkbat\"; // OK, the type is string | undefined\n};\n</code></pre>\n<h2 id=\"commonjs-modules-are-supported\" style=\"position:relative;\"><a href=\"#commonjs-modules-are-supported\" aria-label=\"commonjs modules are supported permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS modules are supported</h2>\n<p>In a <code>.js</code> file, TypeScript understands the CommonJS module format.\nAssignments to <code>exports</code> and <code>module.exports</code> are recognized as export declarations.\nSimilarly, <code>require</code> function calls are recognized as module imports. For example:</p>\n<pre><code class=\"language-js\">// same as `import module \"fs\"`\nconst fs = require(\"fs\");\n\n// same as `export function readFile`\nmodule.exports.readFile = function (f) {\n  return fs.readFileSync(f);\n};\n</code></pre>\n<p>The module support in Javascript is much more syntactically forgiving than TypeScript’s module support.\nMost combinations of assignments and declarations are supported.</p>\n<h2 id=\"classes-functions-and-object-literals-are-namespaces\" style=\"position:relative;\"><a href=\"#classes-functions-and-object-literals-are-namespaces\" aria-label=\"classes functions and object literals are namespaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes, functions, and object literals are namespaces</h2>\n<p>Classes are namespaces in <code>.js</code> files.\nThis can be used to nest classes, for example:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">class C {}\nC.D = class {};\n</code></pre>\n<p>And, for pre-ES2015 code, it can be used to simulate static methods:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">function Outer() {\n  this.y = 2;\n}\n\nOuter.Inner = function () {\n  this.yy = 2;\n};\n\nOuter.Inner();\n</code></pre>\n<p>It can also be used to create simple namespaces:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">var ns = {};\nns.C = class {};\nns.func = function () {};\n\nns;\n</code></pre>\n<p>Other variants are allowed as well:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// IIFE\nvar ns = (function (n) {\n  return n || {};\n})();\nns.CONST = 1;\n\n// defaulting to global\nvar assign =\n  assign ||\n  function () {\n    // code goes here\n  };\nassign.extra = 1;\n</code></pre>\n<h2 id=\"object-literals-are-open-ended\" style=\"position:relative;\"><a href=\"#object-literals-are-open-ended\" aria-label=\"object literals are open ended permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object literals are open-ended</h2>\n<p>In a <code>.ts</code> file, an object literal that initializes a variable declaration gives its type to the declaration.\nNo new members can be added that were not specified in the original literal.\nThis rule is relaxed in a <code>.js</code> file; object literals have an open-ended type (an index signature) that allows adding and looking up properties that were not defined originally.\nFor instance:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">var obj = { a: 1 };\nobj.b = 2; // Allowed\n</code></pre>\n<p>Object literals behave as if they have an index signature <code>[x:string]: any</code> that allows them to be treated as open maps instead of closed objects.</p>\n<p>Like other special JS checking behaviors, this behavior can be changed by specifying a JSDoc type for the variable. For example:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @checkJs\n// @errors: 2339\n/** @type {{a: number}} */\nvar obj = { a: 1 };\nobj.b = 2;\n</code></pre>\n<h2 id=\"null-undefined-and-empty-array-initializers-are-of-type-any-or-any\" style=\"position:relative;\"><a href=\"#null-undefined-and-empty-array-initializers-are-of-type-any-or-any\" aria-label=\"null undefined and empty array initializers are of type any or any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null, undefined, and empty array initializers are of type any or any[]</h2>\n<p>Any variable, parameter or property that is initialized with null or undefined will have type any, even if strict null checks is turned on.\nAny variable, parameter or property that is initialized with [] will have type any[], even if strict null checks is turned on.\nThe only exception is for properties that have multiple initializers as described above.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">function Foo(i = null) {\n  if (!i) i = 1;\n  var j = undefined;\n  j = 2;\n  this.l = [];\n}\n\nvar foo = new Foo();\nfoo.l.push(foo.i);\nfoo.l.push(\"end\");\n</code></pre>\n<h2 id=\"function-parameters-are-optional-by-default\" style=\"position:relative;\"><a href=\"#function-parameters-are-optional-by-default\" aria-label=\"function parameters are optional by default permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function parameters are optional by default</h2>\n<p>Since there is no way to specify optionality on parameters in pre-ES2015 Javascript, all function parameters in <code>.js</code> file are considered optional.\nCalls with fewer arguments than the declared number of parameters are allowed.</p>\n<p>It is important to note that it is an error to call a function with too many arguments.</p>\n<p>For instance:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @checkJs\n// @strict: false\n// @errors: 7006 7006 2554\nfunction bar(a, b) {\n  console.log(a + \" \" + b);\n}\n\nbar(1); // OK, second argument considered optional\nbar(1, 2);\nbar(1, 2, 3); // Error, too many arguments\n</code></pre>\n<p>JSDoc annotated functions are excluded from this rule.\nUse JSDoc optional parameter syntax (<code>[</code> <code>]</code>) to express optionality. e.g.:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @param {string} [somebody] - Somebody's name.\n */\nfunction sayHello(somebody) {\n  if (!somebody) {\n    somebody = \"John Doe\";\n  }\n  console.log(\"Hello \" + somebody);\n}\n\nsayHello();\n</code></pre>\n<h2 id=\"var-args-parameter-declaration-inferred-from-use-of-arguments\" style=\"position:relative;\"><a href=\"#var-args-parameter-declaration-inferred-from-use-of-arguments\" aria-label=\"var args parameter declaration inferred from use of arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Var-args parameter declaration inferred from use of <code>arguments</code></h2>\n<p>A function whose body has a reference to the <code>arguments</code> reference is implicitly considered to have a var-arg parameter (i.e. <code>(...arg: any[]) => any</code>). Use JSDoc var-arg syntax to specify the type of the arguments.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @param {...number} args */\nfunction sum(/* numbers */) {\n  var total = 0;\n  for (var i = 0; i &#x3C; arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\n</code></pre>\n<h2 id=\"unspecified-type-parameters-default-to-any\" style=\"position:relative;\"><a href=\"#unspecified-type-parameters-default-to-any\" aria-label=\"unspecified type parameters default to any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unspecified type parameters default to <code>any</code></h2>\n<p>Since there is no natural syntax for specifying generic type parameters in Javascript, an unspecified type parameter defaults to <code>any</code>.</p>\n<h3 id=\"in-extends-clause\" style=\"position:relative;\"><a href=\"#in-extends-clause\" aria-label=\"in extends clause permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In extends clause</h3>\n<p>For instance, <code>React.Component</code> is defined to have two type parameters, <code>Props</code> and <code>State</code>.\nIn a <code>.js</code> file, there is no legal way to specify these in the extends clause. By default the type arguments will be <code>any</code>:</p>\n<pre><code class=\"language-js\">import { Component } from \"react\";\n\nclass MyComponent extends Component {\n  render() {\n    this.props.b; // Allowed, since this.props is of type any\n  }\n}\n</code></pre>\n<p>Use JSDoc <code>@augments</code> to specify the types explicitly. for instance:</p>\n<pre><code class=\"language-js\">import { Component } from \"react\";\n\n/**\n * @augments {Component&#x3C;{a: number}, State>}\n */\nclass MyComponent extends Component {\n  render() {\n    this.props.b; // Error: b does not exist on {a:number}\n  }\n}\n</code></pre>\n<h3 id=\"in-jsdoc-references\" style=\"position:relative;\"><a href=\"#in-jsdoc-references\" aria-label=\"in jsdoc references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In JSDoc references</h3>\n<p>An unspecified type argument in JSDoc defaults to any:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type{Array} */\nvar x = [];\n\nx.push(1); // OK\nx.push(\"string\"); // OK, x is of type Array&#x3C;any>\n\n/** @type{Array.&#x3C;number>} */\nvar y = [];\n\ny.push(1); // OK\ny.push(\"string\"); // Error, string is not assignable to number\n</code></pre>\n<h3 id=\"in-function-calls\" style=\"position:relative;\"><a href=\"#in-function-calls\" aria-label=\"in function calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In function calls</h3>\n<p>A call to a generic function uses the arguments to infer the type parameters. Sometimes this process fails to infer any types, mainly because of lack of inference sources; in these cases, the type parameters will default to <code>any</code>. For example:</p>\n<pre><code class=\"language-js\">var p = new Promise((resolve, reject) => {\n  reject();\n});\n\np; // Promise&#x3C;any>;\n</code></pre>\n<p>To learn all of the features available in JSDoc, see <a href=\"/docs/handbook/jsdoc-supported-types.html\">the reference</a>.</p>","headings":[{"value":"Properties are inferred from assignments in class bodies","depth":2},{"value":"Constructor functions are equivalent to classes","depth":2},{"value":"CommonJS modules are supported","depth":2},{"value":"Classes, functions, and object literals are namespaces","depth":2},{"value":"Object literals are open-ended","depth":2},{"value":"null, undefined, and empty array initializers are of type any or any[]","depth":2},{"value":"Function parameters are optional by default","depth":2},{"value":"Var-args parameter declaration inferred from use of arguments","depth":2},{"value":"Unspecified type parameters default to any","depth":2},{"value":"In extends clause","depth":3},{"value":"In JSDoc references","depth":3},{"value":"In function calls","depth":3}],"frontmatter":{"permalink":"/docs/handbook/type-checking-javascript-files.html","title":"Type Checking JavaScript Files","disable_toc":null,"handbook":null,"oneline":"How to add type checking to JavaScript files using TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"JS Projects Utilizing TypeScript","oneline":"How to add type checking to JavaScript files using TypeScript","permalink":"/docs/handbook/intro-to-js-ts.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"JSDoc Reference","oneline":"What JSDoc does TypeScript-powered JavaScript support?","permalink":"/docs/handbook/jsdoc-supported-types.html"}}}},"pageContext":{"id":"6-type-checking-javascript-files","slug":"/docs/handbook/type-checking-javascript-files.html","repoPath":"/packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md","previousID":"2ae8d451-c272-55d5-ba61-816453b84a6a","nextID":"d848604c-bb7a-5209-9b14-87b5d859b2fc","lang":"en","modifiedTime":"2021-05-31T12:14:15.532Z"}},"staticQueryHashes":[]}