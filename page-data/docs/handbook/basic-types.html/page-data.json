{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/basic-types.html","result":{"data":{"markdownRemark":{"id":"154f3044-4c20-51c6-ab8d-53e69fef43e1","excerpt":"For programs to be useful, we need to be able to work with some of the simplest units of data: numbers, strings, structures, boolean values, and the like.\nIn…","html":"<p>For programs to be useful, we need to be able to work with some of the simplest units of data: numbers, strings, structures, boolean values, and the like.\nIn TypeScript, we support the same types as you would expect in JavaScript, with an extra enumeration type thrown in to help things along.</p>\n<h2 id=\"boolean\" style=\"position:relative;\"><a href=\"#boolean\" aria-label=\"boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean</h2>\n<p>The most basic datatype is the simple true/false value, which JavaScript and TypeScript call a <code>boolean</code> value.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let isDone: boolean = false;\n</code></pre>\n<h2 id=\"number\" style=\"position:relative;\"><a href=\"#number\" aria-label=\"number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number</h2>\n<p>As in JavaScript, all numbers in TypeScript are either floating point values or BigIntegers.\nThese floating point numbers get the type <code>number</code>, while BigIntegers get the type <code>bigint</code>.\nIn addition to hexadecimal and decimal literals, TypeScript also supports binary and octal literals introduced in ECMAScript 2015.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @target: ES2020\nlet decimal: number = 6;\nlet hex: number = 0xf00d;\nlet binary: number = 0b1010;\nlet octal: number = 0o744;\nlet big: bigint = 100n;\n</code></pre>\n<h2 id=\"string\" style=\"position:relative;\"><a href=\"#string\" aria-label=\"string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String</h2>\n<p>Another fundamental part of creating programs in JavaScript for webpages and servers alike is working with textual data.\nAs in other languages, we use the type <code>string</code> to refer to these textual datatypes.\nJust like JavaScript, TypeScript also uses double quotes (<code>\"</code>) or single quotes (<code>'</code>) to surround string data.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let color: string = \"blue\";\n// prettier-ignore\ncolor = 'red';\n</code></pre>\n<p>You can also use <em>template strings</em>, which can span multiple lines and have embedded expressions.\nThese strings are surrounded by the backtick/backquote (<code>`</code>) character, and embedded expressions are of the form <code>${ expr }</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let fullName: string = `Bob Bobbington`;\nlet age: number = 37;\nlet sentence: string = `Hello, my name is ${fullName}.\n\nI'll be ${age + 1} years old next month.`;\n</code></pre>\n<p>This is equivalent to declaring <code>sentence</code> like so:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let fullName: string = `Bob Bobbington`;\nlet age: number = 37;\n// ---cut---\nlet sentence: string =\n  \"Hello, my name is \" +\n  fullName +\n  \".\\n\\n\" +\n  \"I'll be \" +\n  (age + 1) +\n  \" years old next month.\";\n</code></pre>\n<h2 id=\"array\" style=\"position:relative;\"><a href=\"#array\" aria-label=\"array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array</h2>\n<p>TypeScript, like JavaScript, allows you to work with arrays of values.\nArray types can be written in one of two ways.\nIn the first, you use the type of the elements followed by <code>[]</code> to denote an array of that element type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let list: number[] = [1, 2, 3];\n</code></pre>\n<p>The second way uses a generic array type, <code>Array&#x3C;elemType></code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let list: Array&#x3C;number> = [1, 2, 3];\n</code></pre>\n<h2 id=\"tuple\" style=\"position:relative;\"><a href=\"#tuple\" aria-label=\"tuple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuple</h2>\n<p>Tuple types allow you to express an array with a fixed number of elements whose types are known, but need not be the same. For example, you may want to represent a value as a pair of a <code>string</code> and a <code>number</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\n// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = [\"hello\", 10]; // OK\n// Initialize it incorrectly\nx = [10, \"hello\"]; // Error\n</code></pre>\n<p>When accessing an element with a known index, the correct type is retrieved:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339\nlet x: [string, number];\nx = [\"hello\", 10]; // OK\n/// ---cut---\n// OK\nconsole.log(x[0].substring(1));\n\nconsole.log(x[1].substring(1));\n</code></pre>\n<p>Accessing an element outside the set of known indices fails with an error:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2493 2532 2322\nlet x: [string, number];\nx = [\"hello\", 10]; // OK\n/// ---cut---\nx[3] = \"world\";\n\nconsole.log(x[5].toString());\n</code></pre>\n<h2 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum</h2>\n<p>A helpful addition to the standard set of datatypes from JavaScript is the <code>enum</code>.\nAs in languages like C#, an enum is a way of giving more friendly names to sets of numeric values.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">enum Color {\n  Red,\n  Green,\n  Blue,\n}\nlet c: Color = Color.Green;\n</code></pre>\n<p>By default, enums begin numbering their members starting at <code>0</code>.\nYou can change this by manually setting the value of one of its members.\nFor example, we can start the previous example at <code>1</code> instead of <code>0</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">enum Color {\n  Red = 1,\n  Green,\n  Blue,\n}\nlet c: Color = Color.Green;\n</code></pre>\n<p>Or, even manually set all the values in the enum:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">enum Color {\n  Red = 1,\n  Green = 2,\n  Blue = 4,\n}\nlet c: Color = Color.Green;\n</code></pre>\n<p>A handy feature of enums is that you can also go from a numeric value to the name of that value in the enum.\nFor example, if we had the value <code>2</code> but weren’t sure what that mapped to in the <code>Color</code> enum above, we could look up the corresponding name:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">enum Color {\n  Red = 1,\n  Green,\n  Blue,\n}\nlet colorName: string = Color[2];\n\n// Displays 'Green'\nconsole.log(colorName);\n</code></pre>\n<h2 id=\"unknown\" style=\"position:relative;\"><a href=\"#unknown\" aria-label=\"unknown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unknown</h2>\n<p>We may need to describe the type of variables that we do not know when we are writing an application.\nThese values may come from dynamic content – e.g. from the user – or we may want to intentionally accept all values in our API.\nIn these cases, we want to provide a type that tells the compiler and future readers that this variable could be anything, so we give it the <code>unknown</code> type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let notSure: unknown = 4;\nnotSure = \"maybe a string instead\";\n\n// OK, definitely a boolean\nnotSure = false;\n</code></pre>\n<p>If you have a variable with an unknown type, you can narrow it to something more specific by doing <code>typeof</code> checks, comparison checks, or more advanced type guards that will be discussed in a later chapter:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322 2322 2322\ndeclare const maybe: unknown;\n// 'maybe' could be a string, object, boolean, undefined, or other types\nconst aNumber: number = maybe;\n\nif (maybe === true) {\n  // TypeScript knows that maybe is a boolean now\n  const aBoolean: boolean = maybe;\n  // So, it cannot be a string\n  const aString: string = maybe;\n}\n\nif (typeof maybe === \"string\") {\n  // TypeScript knows that maybe is a string\n  const aString: string = maybe;\n  // So, it cannot be a boolean\n  const aBoolean: boolean = maybe;\n}\n</code></pre>\n<h2 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Any</h2>\n<p>In some situations, not all type information is available or its declaration would take an inappropriate amount of effort.\nThese may occur for values from code that has been written without TypeScript or a 3rd party library.\nIn these cases, we might want to opt-out of type checking.\nTo do so, we label these values with the <code>any</code> type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">declare function getValue(key: string): any;\n// OK, return value of 'getValue' is not checked\nconst str: string = getValue(\"myString\");\n</code></pre>\n<p>The <code>any</code> type is a powerful way to work with existing JavaScript, allowing you to gradually opt-in and opt-out of type checking during compilation.</p>\n<p>Unlike <code>unknown</code>, variables of type <code>any</code> allow you to access arbitrary properties, even ones that don’t exist.\nThese properties include functions and TypeScript will not check their existence or type:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2571\nlet looselyTyped: any = 4;\n// OK, ifItExists might exist at runtime\nlooselyTyped.ifItExists();\n// OK, toFixed exists (but the compiler doesn't check)\nlooselyTyped.toFixed();\n\nlet strictlyTyped: unknown = 4;\nstrictlyTyped.toFixed();\n</code></pre>\n<p>The <code>any</code> will continue to propagate through your objects:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let looselyTyped: any = {};\nlet d = looselyTyped.a.b.c.d;\n//  ^?\n</code></pre>\n<p>After all, remember that all the convenience of <code>any</code> comes at the cost of losing type safety.\nType safety is one of the main motivations for using TypeScript and you should try to avoid using <code>any</code> when not necessary.</p>\n<h2 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Void</h2>\n<p><code>void</code> is a little like the opposite of <code>any</code>: the absence of having any type at all.\nYou may commonly see this as the return type of functions that do not return a value:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function warnUser(): void {\n  console.log(\"This is my warning message\");\n}\n</code></pre>\n<p>Declaring variables of type <code>void</code> is not useful because you can only assign <code>null</code> (only if <code>--strictNullChecks</code> is not specified, see next section) or <code>undefined</code> to them:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nlet unusable: void = undefined;\n// OK if `--strictNullChecks` is not given\nunusable = null;\n</code></pre>\n<h2 id=\"null-and-undefined\" style=\"position:relative;\"><a href=\"#null-and-undefined\" aria-label=\"null and undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null and Undefined</h2>\n<p>In TypeScript, both <code>undefined</code> and <code>null</code> actually have their types named <code>undefined</code> and <code>null</code> respectively.\nMuch like <code>void</code>, they’re not extremely useful on their own:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Not much else we can assign to these variables!\nlet u: undefined = undefined;\nlet n: null = null;\n</code></pre>\n<p>By default <code>null</code> and <code>undefined</code> are subtypes of all other types.\nThat means you can assign <code>null</code> and <code>undefined</code> to something like <code>number</code>.</p>\n<p>However, when using the <code>--strictNullChecks</code> flag, <code>null</code> and <code>undefined</code> are only assignable to <code>unknown</code>, <code>any</code> and their respective types (the one exception being that <code>undefined</code> is also assignable to <code>void</code>).\nThis helps avoid <em>many</em> common errors.\nIn cases where you want to pass in either a <code>string</code> or <code>null</code> or <code>undefined</code>, you can use the union type <code>string | null | undefined</code>.</p>\n<p>Union types are an advanced topic that we’ll cover in a later chapter.</p>\n<blockquote>\n<p>As a note: we encourage the use of <code>--strictNullChecks</code> when possible, but for the purposes of this handbook, we will assume it is turned off.</p>\n</blockquote>\n<h2 id=\"never\" style=\"position:relative;\"><a href=\"#never\" aria-label=\"never permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Never</h2>\n<p>The <code>never</code> type represents the type of values that never occur.\nFor instance, <code>never</code> is the return type for a function expression or an arrow function expression that always throws an exception or one that never returns.\nVariables also acquire the type <code>never</code> when narrowed by any type guards that can never be true.</p>\n<p>The <code>never</code> type is a subtype of, and assignable to, every type; however, <em>no</em> type is a subtype of, or assignable to, <code>never</code> (except <code>never</code> itself).\nEven <code>any</code> isn’t assignable to <code>never</code>.</p>\n<p>Some examples of functions returning <code>never</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// Function returning never must not have a reachable end point\nfunction error(message: string): never {\n  throw new Error(message);\n}\n\n// Inferred return type is never\nfunction fail() {\n  return error(\"Something failed\");\n}\n\n// Function returning never must not have a reachable end point\nfunction infiniteLoop(): never {\n  while (true) {}\n}\n</code></pre>\n<h2 id=\"object\" style=\"position:relative;\"><a href=\"#object\" aria-label=\"object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object</h2>\n<p><code>object</code> is a type that represents the non-primitive type, i.e. anything that is not <code>number</code>, <code>string</code>, <code>boolean</code>, <code>bigint</code>, <code>symbol</code>, <code>null</code>, or <code>undefined</code>.</p>\n<p>With <code>object</code> type, APIs like <code>Object.create</code> can be better represented. For example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\ndeclare function create(o: object | null): void;\n\n// OK\ncreate({ prop: 0 });\ncreate(null);\ncreate(undefined); // with `--strictNullChecks` flag enabled, undefined is not a subtype of null\n\ncreate(42);\ncreate(\"string\");\ncreate(false);\n</code></pre>\n<p>Generally, you won’t need to use this.</p>\n<h2 id=\"type-assertions\" style=\"position:relative;\"><a href=\"#type-assertions\" aria-label=\"type assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type assertions</h2>\n<p>Sometimes you’ll end up in a situation where you’ll know more about a value than TypeScript does.\nUsually, this will happen when you know the type of some entity could be more specific than its current type.</p>\n<p><em>Type assertions</em> are a way to tell the compiler “trust me, I know what I’m doing.”\nA type assertion is like a type cast in other languages, but it performs no special checking or restructuring of data.\nIt has no runtime impact and is used purely by the compiler.\nTypeScript assumes that you, the programmer, have performed any special checks that you need.</p>\n<p>Type assertions have two forms.</p>\n<p>One is the <code>as</code>-syntax:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let someValue: unknown = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n</code></pre>\n<p>The other version is the “angle-bracket” syntax:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">let someValue: unknown = \"this is a string\";\n\nlet strLength: number = (&#x3C;string>someValue).length;\n</code></pre>\n<p>The two samples are equivalent.\nUsing one over the other is mostly a choice of preference; however, when using TypeScript with JSX, only <code>as</code>-style assertions are allowed.</p>\n<h2 id=\"a-note-about-let\" style=\"position:relative;\"><a href=\"#a-note-about-let\" aria-label=\"a note about let permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A note about <code>let</code></h2>\n<p>You may have noticed that so far, we’ve been using the <code>let</code> keyword instead of JavaScript’s <code>var</code> keyword which you might be more familiar with.\nThe <code>let</code> keyword is actually a newer JavaScript construct that TypeScript makes available.\nYou can read in the Handbook Reference on <a href=\"/docs/handbook/variable-declarations.html\">Variable Declarations</a> more about how <code>let</code> and <code>const</code> fix a lot of the problems with <code>var</code>.</p>\n<h2 id=\"about-number-string-boolean-symbol-and-object\" style=\"position:relative;\"><a href=\"#about-number-string-boolean-symbol-and-object\" aria-label=\"about number string boolean symbol and object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About <code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Symbol</code> and <code>Object</code></h2>\n<p>It can be tempting to think that the types <code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Symbol</code>, or <code>Object</code> are the same as the lowercase versions recommended above.\nThese types do not refer to the language primitives however, and almost never should be used as a type.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2339\nfunction reverse(s: String): String {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nreverse(\"hello world\");\n</code></pre>\n<p>Instead, use the types <code>number</code>, <code>string</code>, <code>boolean</code>, <code>object</code> and <code>symbol</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function reverse(s: string): string {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nreverse(\"hello world\");\n</code></pre>","headings":[{"value":"Boolean","depth":2},{"value":"Number","depth":2},{"value":"String","depth":2},{"value":"Array","depth":2},{"value":"Tuple","depth":2},{"value":"Enum","depth":2},{"value":"Unknown","depth":2},{"value":"Any","depth":2},{"value":"Void","depth":2},{"value":"Null and Undefined","depth":2},{"value":"Never","depth":2},{"value":"Object","depth":2},{"value":"Type assertions","depth":2},{"value":"A note about let","depth":2},{"value":"About Number, String, Boolean, Symbol and Object","depth":2}],"frontmatter":{"permalink":"/docs/handbook/basic-types.html","title":"Basic Types","disable_toc":null,"handbook":"true","oneline":"Step two in learning TypeScript: The basic types.","preamble":null,"deprecated_by":"/docs/handbook/2/everyday-types.html","deprecation_redirects":["never","/docs/handbook/2/narrowing.html#the-never-type","unknown","/docs/handbook/2/functions.html#unknown","void","/docs/handbook/2/functions.html#void"]}},"prev":null,"next":null},"pageContext":{"slug":"/docs/handbook/basic-types.html","repoPath":"/packages/documentation/copy/en/handbook-v1/Basic Types.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}