{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/classes.html","result":{"data":{"markdownRemark":{"id":"2f48090b-11ec-5cca-99a0-b6c744d33a2f","excerpt":"Traditional JavaScript uses functions and prototype-based inheritance to build up reusable components, but this may feel a bit awkward to programmers more…","html":"<p>Traditional JavaScript uses functions and prototype-based inheritance to build up reusable components, but this may feel a bit awkward to programmers more comfortable with an object-oriented approach, where classes inherit functionality and objects are built from these classes.\nStarting with ECMAScript 2015, also known as ECMAScript 6, JavaScript programmers can build their applications using this object-oriented class-based approach.\nIn TypeScript, we allow developers to use these techniques now, and compile them down to JavaScript that works across all major browsers and platforms, without having to wait for the next version of JavaScript.</p>\n<h2 id=\"classes\" style=\"position:relative;\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h2>\n<p>Let’s take a look at a simple class-based example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Greeter {\n  greeting: string;\n\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n\nlet greeter = new Greeter(\"world\");\n</code></pre>\n<p>The syntax should look familiar if you’ve used C# or Java before.\nWe declare a new class <code>Greeter</code>. This class has three members: a property called <code>greeting</code>, a constructor, and a method <code>greet</code>.</p>\n<p>You’ll notice that in the class when we refer to one of the members of the class we prepend <code>this.</code>.\nThis denotes that it’s a member access.</p>\n<p>In the last line we construct an instance of the <code>Greeter</code> class using <code>new</code>.\nThis calls into the constructor we defined earlier, creating a new object with the <code>Greeter</code> shape, and running the constructor to initialize it.</p>\n<h2 id=\"inheritance\" style=\"position:relative;\"><a href=\"#inheritance\" aria-label=\"inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inheritance</h2>\n<p>In TypeScript, we can use common object-oriented patterns.\nOne of the most fundamental patterns in class-based programming is being able to extend existing classes to create new ones using inheritance.</p>\n<p>Let’s take a look at an example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Animal {\n  move(distanceInMeters: number = 0) {\n    console.log(`Animal moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Dog extends Animal {\n  bark() {\n    console.log(\"Woof! Woof!\");\n  }\n}\n\nconst dog = new Dog();\ndog.bark();\ndog.move(10);\ndog.bark();\n</code></pre>\n<p>This example shows the most basic inheritance feature: classes inherit properties and methods from base classes.\nHere, <code>Dog</code> is a <em>derived</em> class that derives from the <code>Animal</code> <em>base</em> class using the <code>extends</code> keyword.\nDerived classes are often called <em>subclasses</em>, and base classes are often called <em>superclasses</em>.</p>\n<p>Because <code>Dog</code> extends the functionality from <code>Animal</code>, we were able to create an instance of <code>Dog</code> that could both <code>bark()</code> and <code>move()</code>.</p>\n<p>Let’s now look at a more complex example.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Animal {\n  name: string;\n  constructor(theName: string) {\n    this.name = theName;\n  }\n  move(distanceInMeters: number = 0) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Snake extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n  move(distanceInMeters = 5) {\n    console.log(\"Slithering...\");\n    super.move(distanceInMeters);\n  }\n}\n\nclass Horse extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n  move(distanceInMeters = 45) {\n    console.log(\"Galloping...\");\n    super.move(distanceInMeters);\n  }\n}\n\nlet sam = new Snake(\"Sammy the Python\");\nlet tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();\ntom.move(34);\n</code></pre>\n<p>This example covers a few other features we didn’t previously mention.\nAgain, we see the <code>extends</code> keywords used to create two new subclasses of <code>Animal</code>: <code>Horse</code> and <code>Snake</code>.</p>\n<p>One difference from the prior example is that each derived class that contains a constructor function <em>must</em> call <code>super()</code> which will execute the constructor of the base class.\nWhat’s more, before we <em>ever</em> access a property on <code>this</code> in a constructor body, we <em>have</em> to call <code>super()</code>.\nThis is an important rule that TypeScript will enforce.</p>\n<p>The example also shows how to override methods in the base class with methods that are specialized for the subclass.\nHere both <code>Snake</code> and <code>Horse</code> create a <code>move</code> method that overrides the <code>move</code> from <code>Animal</code>, giving it functionality specific to each class.\nNote that even though <code>tom</code> is declared as an <code>Animal</code>, since its value is a <code>Horse</code>, calling <code>tom.move(34)</code> will call the overriding method in <code>Horse</code>:</p>\n<pre><code>Slithering...\nSammy the Python moved 5m.\nGalloping...\nTommy the Palomino moved 34m.\n</code></pre>\n<h2 id=\"public-private-and-protected-modifiers\" style=\"position:relative;\"><a href=\"#public-private-and-protected-modifiers\" aria-label=\"public private and protected modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Public, private, and protected modifiers</h2>\n<h2 id=\"public-by-default\" style=\"position:relative;\"><a href=\"#public-by-default\" aria-label=\"public by default permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Public by default</h2>\n<p>In our examples, we’ve been able to freely access the members that we declared throughout our programs.\nIf you’re familiar with classes in other languages, you may have noticed in the above examples we haven’t had to use the word <code>public</code> to accomplish this; for instance, C# requires that each member be explicitly labeled <code>public</code> to be visible.\nIn TypeScript, each member is <code>public</code> by default.</p>\n<p>You may still mark a member <code>public</code> explicitly.\nWe could have written the <code>Animal</code> class from the previous section in the following way:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Animal {\n  public name: string;\n\n  public constructor(theName: string) {\n    this.name = theName;\n  }\n\n  public move(distanceInMeters: number) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n</code></pre>\n<h2 id=\"ecmascript-private-fields\" style=\"position:relative;\"><a href=\"#ecmascript-private-fields\" aria-label=\"ecmascript private fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript Private Fields</h2>\n<p>With TypeScript 3.8, TypeScript supports the new JavaScript syntax for private fields:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 18013\nclass Animal {\n  #name: string;\n  constructor(theName: string) {\n    this.#name = theName;\n  }\n}\n\nnew Animal(\"Cat\").#name;\n</code></pre>\n<p>This syntax is built into the JavaScript runtime and can have better guarantees about the isolation of each private field.\nRight now, the best documentation for these private fields is in the TypeScript 3.8 <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/#ecmascript-private-fields\">release notes</a>.</p>\n<h2 id=\"understanding-typescripts-private\" style=\"position:relative;\"><a href=\"#understanding-typescripts-private\" aria-label=\"understanding typescripts private permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understanding TypeScript’s <code>private</code></h2>\n<p>TypeScript also has its own way to declare a member as being marked <code>private</code>, it cannot be accessed from outside of its containing class. For example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2341\nclass Animal {\n  private name: string;\n\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nnew Animal(\"Cat\").name;\n</code></pre>\n<p>TypeScript is a structural type system.\nWhen we compare two different types, regardless of where they came from, if the types of all members are compatible, then we say the types themselves are compatible.</p>\n<p>However, when comparing types that have <code>private</code> and <code>protected</code> members, we treat these types differently.\nFor two types to be considered compatible, if one of them has a <code>private</code> member, then the other must have a <code>private</code> member that originated in the same declaration.\nThe same applies to <code>protected</code> members.</p>\n<p>Let’s look at an example to better see how this plays out in practice:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2322\nclass Animal {\n  private name: string;\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nclass Rhino extends Animal {\n  constructor() {\n    super(\"Rhino\");\n  }\n}\n\nclass Employee {\n  private name: string;\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nlet animal = new Animal(\"Goat\");\nlet rhino = new Rhino();\nlet employee = new Employee(\"Bob\");\n\nanimal = rhino;\nanimal = employee;\n</code></pre>\n<p>In this example, we have an <code>Animal</code> and a <code>Rhino</code>, with <code>Rhino</code> being a subclass of <code>Animal</code>.\nWe also have a new class <code>Employee</code> that looks identical to <code>Animal</code> in terms of shape.\nWe create some instances of these classes and then try to assign them to each other to see what will happen.\nBecause <code>Animal</code> and <code>Rhino</code> share the <code>private</code> side of their shape from the same declaration of <code>private name: string</code> in <code>Animal</code>, they are compatible. However, this is not the case for <code>Employee</code>.\nWhen we try to assign from an <code>Employee</code> to <code>Animal</code> we get an error that these types are not compatible.\nEven though <code>Employee</code> also has a <code>private</code> member called <code>name</code>, it’s not the one we declared in <code>Animal</code>.</p>\n<h2 id=\"understanding-protected\" style=\"position:relative;\"><a href=\"#understanding-protected\" aria-label=\"understanding protected permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understanding <code>protected</code></h2>\n<p>The <code>protected</code> modifier acts much like the <code>private</code> modifier with the exception that members declared <code>protected</code> can also be accessed within deriving classes. For example,</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2445\nclass Person {\n  protected name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass Employee extends Person {\n  private department: string;\n\n  constructor(name: string, department: string) {\n    super(name);\n    this.department = department;\n  }\n\n  public getElevatorPitch() {\n    return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n  }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name);\n</code></pre>\n<p>Notice that while we can’t use <code>name</code> from outside of <code>Person</code>, we can still use it from within an instance method of <code>Employee</code> because <code>Employee</code> derives from <code>Person</code>.</p>\n<p>A constructor may also be marked <code>protected</code>.\nThis means that the class cannot be instantiated outside of its containing class, but can be extended. For example,</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2674\nclass Person {\n  protected name: string;\n  protected constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\n// Employee can extend Person\nclass Employee extends Person {\n  private department: string;\n\n  constructor(name: string, department: string) {\n    super(name);\n    this.department = department;\n  }\n\n  public getElevatorPitch() {\n    return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n  }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nlet john = new Person(\"John\");\n</code></pre>\n<h2 id=\"readonly-modifier\" style=\"position:relative;\"><a href=\"#readonly-modifier\" aria-label=\"readonly modifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Readonly modifier</h2>\n<p>You can make properties readonly by using the <code>readonly</code> keyword.\nReadonly properties must be initialized at their declaration or in the constructor.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2540\nclass Octopus {\n  readonly name: string;\n  readonly numberOfLegs: number = 8;\n\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nlet dad = new Octopus(\"Man with the 8 strong legs\");\ndad.name = \"Man with the 3-piece suit\";\n</code></pre>\n<h2 id=\"parameter-properties\" style=\"position:relative;\"><a href=\"#parameter-properties\" aria-label=\"parameter properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter properties</h2>\n<p>In our last example, we had to declare a readonly member <code>name</code> and a constructor parameter <code>theName</code> in the <code>Octopus</code> class. This is needed in order to have the value of <code>theName</code> accessible after the <code>Octopus</code> constructor is executed.\n<em>Parameter properties</em> let you create and initialize a member in one place.\nHere’s a further revision of the previous <code>Octopus</code> class using a parameter property:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Octopus {\n  readonly numberOfLegs: number = 8;\n  constructor(readonly name: string) {}\n}\n\nlet dad = new Octopus(\"Man with the 8 strong legs\");\ndad.name;\n</code></pre>\n<p>Notice how we dropped <code>theName</code> altogether and just use the shortened <code>readonly name: string</code> parameter on the constructor to create and initialize the <code>name</code> member.\nWe’ve consolidated the declarations and assignment into one location.</p>\n<p>Parameter properties are declared by prefixing a constructor parameter with an accessibility modifier or <code>readonly</code>, or both.\nUsing <code>private</code> for a parameter property declares and initializes a private member; likewise, the same is done for <code>public</code>, <code>protected</code>, and <code>readonly</code>.</p>\n<h2 id=\"accessors\" style=\"position:relative;\"><a href=\"#accessors\" aria-label=\"accessors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accessors</h2>\n<p>TypeScript supports getters/setters as a way of intercepting accesses to a member of an object.\nThis gives you a way of having finer-grained control over how a member is accessed on each object.</p>\n<p>Let’s convert a simple class to use <code>get</code> and <code>set</code>.\nFirst, let’s start with an example without getters and setters.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nclass Employee {\n  fullName: string;\n}\n\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\n\nif (employee.fullName) {\n  console.log(employee.fullName);\n}\n</code></pre>\n<p>While allowing people to randomly set <code>fullName</code> directly is pretty handy, we may also want enforce some constraints when <code>fullName</code> is set.</p>\n<p>In this version, we add a setter that checks the length of the <code>newName</code> to make sure it’s compatible with the max-length of our backing database field. If it isn’t we throw an error notifying client code that something went wrong.</p>\n<p>To preserve existing functionality, we also add a simple getter that retrieves <code>fullName</code> unmodified.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nconst fullNameMaxLength = 10;\n\nclass Employee {\n  private _fullName: string = \"\";\n\n  get fullName(): string {\n    return this._fullName;\n  }\n\n  set fullName(newName: string) {\n    if (newName &#x26;&#x26; newName.length > fullNameMaxLength) {\n      throw new Error(\"fullName has a max length of \" + fullNameMaxLength);\n    }\n\n    this._fullName = newName;\n  }\n}\n\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\n\nif (employee.fullName) {\n  console.log(employee.fullName);\n}\n</code></pre>\n<p>To prove to ourselves that our accessor is now checking the length of values, we can attempt to assign a name longer than 10 characters and verify that we get an error.</p>\n<p>A couple of things to note about accessors:</p>\n<p>First, accessors require you to set the compiler to output ECMAScript 5 or higher.\nDownleveling to ECMAScript 3 is not supported.\nSecond, accessors with a <code>get</code> and no <code>set</code> are automatically inferred to be <code>readonly</code>.\nThis is helpful when generating a <code>.d.ts</code> file from your code, because users of your property can see that they can’t change it.</p>\n<h2 id=\"static-properties\" style=\"position:relative;\"><a href=\"#static-properties\" aria-label=\"static properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Properties</h2>\n<p>Up to this point, we’ve only talked about the <em>instance</em> members of the class, those that show up on the object when it’s instantiated.\nWe can also create <em>static</em> members of a class, those that are visible on the class itself rather than on the instances.\nIn this example, we use <code>static</code> on the origin, as it’s a general value for all grids.\nEach instance accesses this value through prepending the name of the class.\nSimilarly to prepending <code>this.</code> in front of instance accesses, here we prepend <code>Grid.</code> in front of static accesses.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Grid {\n  static origin = { x: 0, y: 0 };\n\n  calculateDistanceFromOrigin(point: { x: number; y: number }) {\n    let xDist = point.x - Grid.origin.x;\n    let yDist = point.y - Grid.origin.y;\n    return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\n  }\n\n  constructor(public scale: number) {}\n}\n\nlet grid1 = new Grid(1.0); // 1x scale\nlet grid2 = new Grid(5.0); // 5x scale\n\nconsole.log(grid1.calculateDistanceFromOrigin({ x: 10, y: 10 }));\nconsole.log(grid2.calculateDistanceFromOrigin({ x: 10, y: 10 }));\n</code></pre>\n<h2 id=\"abstract-classes\" style=\"position:relative;\"><a href=\"#abstract-classes\" aria-label=\"abstract classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abstract Classes</h2>\n<p>Abstract classes are base classes from which other classes may be derived.\nThey may not be instantiated directly.\nUnlike an interface, an abstract class may contain implementation details for its members.\nThe <code>abstract</code> keyword is used to define abstract classes as well as abstract methods within an abstract class.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">abstract class Animal {\n  abstract makeSound(): void;\n\n  move(): void {\n    console.log(\"roaming the earth...\");\n  }\n}\n</code></pre>\n<p>Methods within an abstract class that are marked as abstract do not contain an implementation and must be implemented in derived classes.\nAbstract methods share a similar syntax to interface methods.\nBoth define the signature of a method without including a method body.\nHowever, abstract methods must include the <code>abstract</code> keyword and may optionally include access modifiers.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2511 2339\nabstract class Department {\n  constructor(public name: string) {}\n\n  printName(): void {\n    console.log(\"Department name: \" + this.name);\n  }\n\n  abstract printMeeting(): void; // must be implemented in derived classes\n}\n\nclass AccountingDepartment extends Department {\n  constructor() {\n    super(\"Accounting and Auditing\"); // constructors in derived classes must call super()\n  }\n\n  printMeeting(): void {\n    console.log(\"The Accounting Department meets each Monday at 10am.\");\n  }\n\n  generateReports(): void {\n    console.log(\"Generating accounting reports...\");\n  }\n}\n\nlet department: Department; // ok to create a reference to an abstract type\ndepartment = new Department(); // error: cannot create an instance of an abstract class\ndepartment = new AccountingDepartment(); // ok to create and assign a non-abstract subclass\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports(); // error: department is not of type AccountingDepartment, cannot access generateReports\n</code></pre>\n<h2 id=\"advanced-techniques\" style=\"position:relative;\"><a href=\"#advanced-techniques\" aria-label=\"advanced techniques permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced Techniques</h2>\n<h2 id=\"constructor-functions\" style=\"position:relative;\"><a href=\"#constructor-functions\" aria-label=\"constructor functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructor functions</h2>\n<p>When you declare a class in TypeScript, you are actually creating multiple declarations at the same time.\nThe first is the type of the <em>instance</em> of the class.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Greeter {\n  greeting: string;\n\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet()); // \"Hello, world\"\n</code></pre>\n<p>Here, when we say <code>let greeter: Greeter</code>, we’re using <code>Greeter</code> as the type of instances of the class <code>Greeter</code>.\nThis is almost second nature to programmers from other object-oriented languages.</p>\n<p>We’re also creating another value that we call the <em>constructor function</em>.\nThis is the function that is called when we <code>new</code> up instances of the class.\nTo see what this looks like in practice, let’s take a look at the JavaScript created by the above example:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nlet Greeter = (function () {\n  function Greeter(message) {\n    this.greeting = message;\n  }\n\n  Greeter.prototype.greet = function () {\n    return \"Hello, \" + this.greeting;\n  };\n\n  return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet()); // \"Hello, world\"\n</code></pre>\n<p>Here, <code>let Greeter</code> is going to be assigned the constructor function.\nWhen we call <code>new</code> and run this function, we get an instance of the class.\nThe constructor function also contains all of the static members of the class.\nAnother way to think of each class is that there is an <em>instance</em> side and a <em>static</em> side.</p>\n<p>Let’s modify the example a bit to show this difference:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nclass Greeter {\n  static standardGreeting = \"Hello, there\";\n  greeting: string;\n  greet() {\n    if (this.greeting) {\n      return \"Hello, \" + this.greeting;\n    } else {\n      return Greeter.standardGreeting;\n    }\n  }\n}\n\nlet greeter1: Greeter;\ngreeter1 = new Greeter();\nconsole.log(greeter1.greet()); // \"Hello, there\"\n\nlet greeterMaker: typeof Greeter = Greeter;\ngreeterMaker.standardGreeting = \"Hey there!\";\n\nlet greeter2: Greeter = new greeterMaker();\nconsole.log(greeter2.greet()); // \"Hey there!\"\n\nlet greeter3: Greeter;\ngreeter3 = new Greeter();\nconsole.log(greeter3.greet()); // \"Hey there!\"\n</code></pre>\n<p>In this example, <code>greeter1</code> works similarly to before.\nWe instantiate the <code>Greeter</code> class, and use this object.\nThis we have seen before.</p>\n<p>Next, we then use the class directly.\nHere we create a new variable called <code>greeterMaker</code>.\nThis variable will hold the class itself, or said another way its constructor function.\nHere we use <code>typeof Greeter</code>, that is “give me the type of the <code>Greeter</code> class itself” rather than the instance type.\nOr, more precisely, “give me the type of the symbol called <code>Greeter</code>,” which is the type of the constructor function.\nThis type will contain all of the static members of Greeter along with the constructor that creates instances of the <code>Greeter</code> class.\nWe show this by using <code>new</code> on <code>greeterMaker</code>, creating new instances of <code>Greeter</code> and invoking them as before.\nIt is also good to mention that changing static property is frowned upon, here <code>greeter3</code> has <code>\"Hey there!\"</code> instead of <code>\"Hello, there\"</code> on <code>standardGreeting</code>.</p>\n<h2 id=\"using-a-class-as-an-interface\" style=\"position:relative;\"><a href=\"#using-a-class-as-an-interface\" aria-label=\"using a class as an interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a class as an interface</h2>\n<p>As we said in the previous section, a class declaration creates two things: a type representing instances of the class and a constructor function.\nBecause classes create types, you can use them in the same places you would be able to use interfaces.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @strict: false\nclass Point {\n  x: number;\n  y: number;\n}\n\ninterface Point3d extends Point {\n  z: number;\n}\n\nlet point3d: Point3d = { x: 1, y: 2, z: 3 };\n</code></pre>","headings":[{"value":"Classes","depth":2},{"value":"Inheritance","depth":2},{"value":"Public, private, and protected modifiers","depth":2},{"value":"Public by default","depth":2},{"value":"ECMAScript Private Fields","depth":2},{"value":"Understanding TypeScript’s private","depth":2},{"value":"Understanding protected","depth":2},{"value":"Readonly modifier","depth":2},{"value":"Parameter properties","depth":2},{"value":"Accessors","depth":2},{"value":"Static Properties","depth":2},{"value":"Abstract Classes","depth":2},{"value":"Advanced Techniques","depth":2},{"value":"Constructor functions","depth":2},{"value":"Using a class as an interface","depth":2}],"frontmatter":{"permalink":"/docs/handbook/classes.html","title":"Classes","disable_toc":null,"handbook":"true","oneline":"How classes work in TypeScript","preamble":null,"deprecated_by":"/docs/handbook/2/classes.html","deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"slug":"/docs/handbook/classes.html","repoPath":"/packages/documentation/copy/en/handbook-v1/Classes.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}