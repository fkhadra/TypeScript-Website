{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html","result":{"data":{"markdownRemark":{"id":"17a71da8-01f7-5e93-888c-02553df5dfb8","excerpt":"For example, when you want to work with JavaScript code which looks like: To handle both importing via UMD and modules:","html":"<!--\nTODO:\n\n1. Not clear why UMD is thrown in here.\n2. Give both commonjs and ES module examples.\n-->\n<p>For example, when you want to work with JavaScript code which looks like:</p>\n<pre><code class=\"language-ts\">const Greeter = require(\"super-greeter\");\n\nconst greeter = new Greeter();\ngreeter.greet();\n</code></pre>\n<p>To handle both importing via UMD and modules:</p>\n<pre><code class=\"language-ts\">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] &#x3C;[~A URL FOR YOU~]>\n\n/*~ This is the module template file for class modules.\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n// Note that ES6 modules cannot directly export class objects.\n// This file should be imported using the CommonJS-style:\n//   import x = require('[~THE MODULE~]');\n//\n// Alternatively, if --allowSyntheticDefaultImports or\n// --esModuleInterop is turned on, this file can also be\n// imported as a default import:\n//   import x from '[~THE MODULE~]';\n//\n// Refer to the TypeScript documentation at\n// https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require\n// to understand common workarounds for this limitation of ES6 modules.\n\n/*~ If this module is a UMD module that exposes a global variable 'myClassLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace \"super-greeter\";\n\n/*~ This declaration specifies that the class constructor function\n *~ is the exported object from the file\n */\nexport = Greeter;\n\n/*~ Write your module's methods and properties in this class */\ndeclare class Greeter {\n  constructor(customGreeting?: string);\n\n  greet: void;\n\n  myMethod(opts: MyClass.MyClassMethodOptions): number;\n}\n\n/*~ If you want to expose types from your module as well, you can\n *~ place them in this block.\n *~\n *~ Note that if you decide to include this namespace, the module can be\n *~ incorrectly imported as a namespace object, unless\n *~ --esModuleInterop is turned on:\n *~   import * as x from '[~THE MODULE~]'; // WRONG! DO NOT DO THIS!\n */\ndeclare namespace MyClass {\n  export interface MyClassMethodOptions {\n    width?: number;\n    height?: number;\n  }\n}\n</code></pre>","headings":[],"frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/module-class-d-ts.html","title":"Module: Class","disable_toc":null,"handbook":null,"oneline":null,"preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"5-module:-class","slug":"/docs/handbook/declaration-files/templates/module-class-d-ts.html","repoPath":"/packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}