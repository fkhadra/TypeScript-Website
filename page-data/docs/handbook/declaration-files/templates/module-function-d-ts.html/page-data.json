{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html","result":{"data":{"markdownRemark":{"id":"99fc1cb9-14a7-50f2-9f66-4ebdc20d1da6","excerpt":"For example, when you want to work with JavaScript code which looks like: To handle both importing via UMD and modules:","html":"<p>For example, when you want to work with JavaScript code which looks like:</p>\n<pre><code class=\"language-ts\">import greeter from \"super-greeter\";\n\ngreeter(2);\ngreeter(\"Hello world\");\n</code></pre>\n<p>To handle both importing via UMD and modules:</p>\n<pre><code class=\"language-ts\">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] &#x3C;[~A URL FOR YOU~]>\n\n/*~ This is the module template file for function modules.\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n// Note that ES6 modules cannot directly export class objects.\n// This file should be imported using the CommonJS-style:\n//   import x = require('[~THE MODULE~]');\n//\n// Alternatively, if --allowSyntheticDefaultImports or\n// --esModuleInterop is turned on, this file can also be\n// imported as a default import:\n//   import x from '[~THE MODULE~]';\n//\n// Refer to the TypeScript documentation at\n// https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require\n// to understand common workarounds for this limitation of ES6 modules.\n\n/*~ If this module is a UMD module that exposes a global variable 'myFuncLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myFuncLib;\n\n/*~ This declaration specifies that the function\n *~ is the exported object from the file\n */\nexport = Greeter;\n\n/*~ This example shows how to have multiple overloads for your function */\ndeclare function Greeter(name: string): Greeter.NamedReturnType;\ndeclare function Greeter(length: number): Greeter.LengthReturnType;\n\n/*~ If you want to expose types from your module as well, you can\n *~ place them in this block. Often you will want to describe the\n *~ shape of the return type of the function; that type should\n *~ be declared in here, as this example shows.\n *~\n *~ Note that if you decide to include this namespace, the module can be\n *~ incorrectly imported as a namespace object, unless\n *~ --esModuleInterop is turned on:\n *~   import * as x from '[~THE MODULE~]'; // WRONG! DO NOT DO THIS!\n */\ndeclare namespace Greeter {\n  export interface LengthReturnType {\n    width: number;\n    height: number;\n  }\n  export interface NamedReturnType {\n    firstName: string;\n    lastName: string;\n  }\n\n  /*~ If the module also has properties, declare them here. For example,\n   *~ this declaration says that this code is legal:\n   *~   import f = require('super-greeter');\n   *~   console.log(f.defaultName);\n   */\n  export const defaultName: string;\n  export let defaultLength: number;\n}\n</code></pre>","headings":[],"frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/module-function-d-ts.html","title":"Module: Function","disable_toc":null,"handbook":null,"oneline":null,"preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"5-module:-function","slug":"/docs/handbook/declaration-files/templates/module-function-d-ts.html","repoPath":"/packages/documentation/copy/en/declaration-files/templates/module-function.d.ts.md","lang":"en","modifiedTime":"2021-05-31T12:14:15.528Z"}},"staticQueryHashes":[]}