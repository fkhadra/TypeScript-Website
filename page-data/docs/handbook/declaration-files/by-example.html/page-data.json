{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/declaration-files/by-example.html","result":{"data":{"markdownRemark":{"id":"6c8cdb51-f76a-5d05-84de-e99454507c42","excerpt":"The purpose of this guide is to teach you how to write a high-quality definition file.\nThis guide is structured by showing documentation for some API, along…","html":"<p>The purpose of this guide is to teach you how to write a high-quality definition file.\nThis guide is structured by showing documentation for some API, along with sample usage of that API,\nand explaining how to write the corresponding declaration.</p>\n<p>These examples are ordered in approximately increasing order of complexity.</p>\n<h2 id=\"objects-with-properties\" style=\"position:relative;\"><a href=\"#objects-with-properties\" aria-label=\"objects with properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objects with Properties</h2>\n<p><em>Documentation</em></p>\n<blockquote>\n<p>The global variable <code>myLib</code> has a function <code>makeGreeting</code> for creating greetings,\nand a property <code>numberOfGreetings</code> indicating the number of greetings made so far.</p>\n</blockquote>\n<p><em>Code</em></p>\n<pre><code class=\"language-ts\">let result = myLib.makeGreeting(\"hello, world\");\nconsole.log(\"The computed greeting is:\" + result);\n\nlet count = myLib.numberOfGreetings;\n</code></pre>\n<p><em>Declaration</em></p>\n<p>Use <code>declare namespace</code> to describe types or values accessed by dotted notation.</p>\n<pre><code class=\"language-ts\">declare namespace myLib {\n  function makeGreeting(s: string): string;\n  let numberOfGreetings: number;\n}\n</code></pre>\n<h2 id=\"overloaded-functions\" style=\"position:relative;\"><a href=\"#overloaded-functions\" aria-label=\"overloaded functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overloaded Functions</h2>\n<p><em>Documentation</em></p>\n<p>The <code>getWidget</code> function accepts a number and returns a Widget, or accepts a string and returns a Widget array.</p>\n<p><em>Code</em></p>\n<pre><code class=\"language-ts\">let x: Widget = getWidget(43);\n\nlet arr: Widget[] = getWidget(\"all of them\");\n</code></pre>\n<p><em>Declaration</em></p>\n<pre><code class=\"language-ts\">declare function getWidget(n: number): Widget;\ndeclare function getWidget(s: string): Widget[];\n</code></pre>\n<h2 id=\"reusable-types-interfaces\" style=\"position:relative;\"><a href=\"#reusable-types-interfaces\" aria-label=\"reusable types interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reusable Types (Interfaces)</h2>\n<p><em>Documentation</em></p>\n<blockquote>\n<p>When specifying a greeting, you must pass a <code>GreetingSettings</code> object.\nThis object has the following properties:</p>\n<p>1 - greeting: Mandatory string</p>\n<p>2 - duration: Optional length of time (in milliseconds)</p>\n<p>3 - color: Optional string, e.g. ‘#ff00ff’</p>\n</blockquote>\n<p><em>Code</em></p>\n<pre><code class=\"language-ts\">greet({\n  greeting: \"hello world\",\n  duration: 4000\n});\n</code></pre>\n<p><em>Declaration</em></p>\n<p>Use an <code>interface</code> to define a type with properties.</p>\n<pre><code class=\"language-ts\">interface GreetingSettings {\n  greeting: string;\n  duration?: number;\n  color?: string;\n}\n\ndeclare function greet(setting: GreetingSettings): void;\n</code></pre>\n<h2 id=\"reusable-types-type-aliases\" style=\"position:relative;\"><a href=\"#reusable-types-type-aliases\" aria-label=\"reusable types type aliases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reusable Types (Type Aliases)</h2>\n<p><em>Documentation</em></p>\n<blockquote>\n<p>Anywhere a greeting is expected, you can provide a <code>string</code>, a function returning a <code>string</code>, or a <code>Greeter</code> instance.</p>\n</blockquote>\n<p><em>Code</em></p>\n<pre><code class=\"language-ts\">function getGreeting() {\n  return \"howdy\";\n}\nclass MyGreeter extends Greeter {}\n\ngreet(\"hello\");\ngreet(getGreeting);\ngreet(new MyGreeter());\n</code></pre>\n<p><em>Declaration</em></p>\n<p>You can use a type alias to make a shorthand for a type:</p>\n<pre><code class=\"language-ts\">type GreetingLike = string | (() => string) | MyGreeter;\n\ndeclare function greet(g: GreetingLike): void;\n</code></pre>\n<h2 id=\"organizing-types\" style=\"position:relative;\"><a href=\"#organizing-types\" aria-label=\"organizing types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Organizing Types</h2>\n<p><em>Documentation</em></p>\n<blockquote>\n<p>The <code>greeter</code> object can log to a file or display an alert.\nYou can provide LogOptions to <code>.log(...)</code> and alert options to <code>.alert(...)</code></p>\n</blockquote>\n<p><em>Code</em></p>\n<pre><code class=\"language-ts\">const g = new Greeter(\"Hello\");\ng.log({ verbose: true });\ng.alert({ modal: false, title: \"Current Greeting\" });\n</code></pre>\n<p><em>Declaration</em></p>\n<p>Use namespaces to organize types.</p>\n<pre><code class=\"language-ts\">declare namespace GreetingLib {\n  interface LogOptions {\n    verbose?: boolean;\n  }\n  interface AlertOptions {\n    modal: boolean;\n    title?: string;\n    color?: string;\n  }\n}\n</code></pre>\n<p>You can also create nested namespaces in one declaration:</p>\n<pre><code class=\"language-ts\">declare namespace GreetingLib.Options {\n  // Refer to via GreetingLib.Options.Log\n  interface Log {\n    verbose?: boolean;\n  }\n  interface Alert {\n    modal: boolean;\n    title?: string;\n    color?: string;\n  }\n}\n</code></pre>\n<h2 id=\"classes\" style=\"position:relative;\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h2>\n<p><em>Documentation</em></p>\n<blockquote>\n<p>You can create a greeter by instantiating the <code>Greeter</code> object, or create a customized greeter by extending from it.</p>\n</blockquote>\n<p><em>Code</em></p>\n<pre><code class=\"language-ts\">const myGreeter = new Greeter(\"hello, world\");\nmyGreeter.greeting = \"howdy\";\nmyGreeter.showGreeting();\n\nclass SpecialGreeter extends Greeter {\n  constructor() {\n    super(\"Very special greetings\");\n  }\n}\n</code></pre>\n<p><em>Declaration</em></p>\n<p>Use <code>declare class</code> to describe a class or class-like object.\nClasses can have properties and methods as well as a constructor.</p>\n<pre><code class=\"language-ts\">declare class Greeter {\n  constructor(greeting: string);\n\n  greeting: string;\n  showGreeting(): void;\n}\n</code></pre>\n<h2 id=\"global-variables\" style=\"position:relative;\"><a href=\"#global-variables\" aria-label=\"global variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Global Variables</h2>\n<p><em>Documentation</em></p>\n<blockquote>\n<p>The global variable <code>foo</code> contains the number of widgets present.</p>\n</blockquote>\n<p><em>Code</em></p>\n<pre><code class=\"language-ts\">console.log(\"Half the number of widgets is \" + foo / 2);\n</code></pre>\n<p><em>Declaration</em></p>\n<p>Use <code>declare var</code> to declare variables.\nIf the variable is read-only, you can use <code>declare const</code>.\nYou can also use <code>declare let</code> if the variable is block-scoped.</p>\n<pre><code class=\"language-ts\">/** The number of widgets present */\ndeclare var foo: number;\n</code></pre>\n<h2 id=\"global-functions\" style=\"position:relative;\"><a href=\"#global-functions\" aria-label=\"global functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Global Functions</h2>\n<p><em>Documentation</em></p>\n<blockquote>\n<p>You can call the function <code>greet</code> with a string to show a greeting to the user.</p>\n</blockquote>\n<p><em>Code</em></p>\n<pre><code class=\"language-ts\">greet(\"hello, world\");\n</code></pre>\n<p><em>Declaration</em></p>\n<p>Use <code>declare function</code> to declare functions.</p>\n<pre><code class=\"language-ts\">declare function greet(greeting: string): void;\n</code></pre>","headings":[{"value":"Objects with Properties","depth":2},{"value":"Overloaded Functions","depth":2},{"value":"Reusable Types (Interfaces)","depth":2},{"value":"Reusable Types (Type Aliases)","depth":2},{"value":"Organizing Types","depth":2},{"value":"Classes","depth":2},{"value":"Global Variables","depth":2},{"value":"Global Functions","depth":2}],"frontmatter":{"permalink":"/docs/handbook/declaration-files/by-example.html","title":"Declaration Reference","disable_toc":null,"handbook":null,"oneline":"How to create a d.ts file for a module","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Introduction","oneline":"How to write a high-quality TypeScript Declaration (d.ts) file","permalink":"/docs/handbook/declaration-files/introduction.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Library Structures","oneline":"How to structure your d.ts files","permalink":"/docs/handbook/declaration-files/library-structures.html"}}}},"pageContext":{"id":"5-declaration-reference","slug":"/docs/handbook/declaration-files/by-example.html","repoPath":"/packages/documentation/copy/en/declaration-files/By Example.md","previousID":"a05eedab-5fe5-5f2e-989e-bc61a530c325","nextID":"2679d163-523f-5c50-8cd1-d46766bfd732","lang":"en","modifiedTime":"2021-05-31T12:14:15.524Z"}},"staticQueryHashes":[]}