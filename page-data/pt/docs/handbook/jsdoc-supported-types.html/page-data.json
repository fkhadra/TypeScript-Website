{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/jsdoc-supported-types.html","result":{"data":{"markdownRemark":{"id":"57e1dd31-1163-5321-a451-3ff6cec6b2cb","excerpt":"A lista abaixo mostra quais construtores são atualmente suportados\nquando se usa anotações JSDoc para prover informações de tipo em arquivos Javascript. Note…","html":"<p>A lista abaixo mostra quais construtores são atualmente suportados\nquando se usa anotações JSDoc para prover informações de tipo em arquivos Javascript.</p>\n<p>Note que tags que não estão explicitamente listadas abaixo (tais como <code>@async</code>) ainda não são suportadas.</p>\n<ul>\n<li><code>@type</code></li>\n<li><code>@param</code> (ou <code>@arg</code> ou <code>@argument</code>)</li>\n<li><code>@returns</code> (ou <code>@return</code>)</li>\n<li><code>@typedef</code></li>\n<li><code>@callback</code></li>\n<li><code>@template</code></li>\n<li><code>@class</code> (ou <code>@constructor</code>)</li>\n<li><code>@this</code></li>\n<li><code>@extends</code> (ou <code>@augments</code>)</li>\n<li><code>@enum</code></li>\n</ul>\n<h4 id=\"extensões-class\" style=\"position:relative;\"><a href=\"#extens%C3%B5es-class\" aria-label=\"extensões class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extensões <code>class</code></h4>\n<ul>\n<li><a href=\"#jsdoc-property-modifiers\">Modificadores de Propriedades</a> <code>@public</code>, <code>@private</code>, <code>@protected</code>, <code>@readonly</code></li>\n</ul>\n<p>O significado é usualmente o mesmo, ou um superconjunto, do significado da tag descrito em <a href=\"https://jsdoc.app\">jsdoc.app</a>.\nO código abaixo descreve as diferenças e demonstra em exemplos a usagem de cada tag.</p>\n<p><strong>Nota:</strong> Você pode usar <a href=\"/play?useJavaScript=truee=4#example/jsdoc-support\">o playground para explorar o suporte a JSDoc</a>.</p>\n<h2 id=\"type\" style=\"position:relative;\"><a href=\"#type\" aria-label=\"type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@type</code></h2>\n<p>Você pode usar a tag “@type” para referenciar o nome de um tipo (seja ele primitivo, definido em uma declaração Typescript ou em uma tag JSDoc “@typedef”)\nVocê pode usar a maioria dos tipos JSDoc e qualquer tipo do Typescript, desde <a href=\"/docs/handbook/basic-types.html\">o mais básico como <code>string</code></a> até <a href=\"/docs/handbook/advanced-types.html\">o mais avançado, como tipos condicionais</a>.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {string}\n */\nvar s;\n\n/** @type {Window} */\nvar win;\n\n/** @type {PromiseLike&#x3C;string>} */\nvar promisedString;\n\n// Você pode especificar um Elemento HTML com propriedades da DOM\n/** @type {HTMLElement} */\nvar myElement = document.querySelector(selector);\nelement.dataset.myData = \"\";\n</code></pre>\n<p><code>@type</code> pode especificar uma união — por exemplo, algo pode ser uma string ou um booleano.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {(string | boolean)}\n */\nvar sb;\n</code></pre>\n<p>Note que parênteses são opcionais para uniões</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {string | boolean}\n */\nvar sb;\n</code></pre>\n<p>Você pode especificar tipos de vetores usando uma variedade de sintaxes:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type {number[]} */\nvar ns;\n/** @type {Array.&#x3C;number>} */\nvar nds;\n/** @type {Array&#x3C;number>} */\nvar nas;\n</code></pre>\n<p>Você também pode especificar tipos de objetos literais.\nPor exemplo, um objeto com propriedades ‘a’ (string) e ‘b’ (número) usa a seguinte sintaxe:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type {{ a: string, b: number }} */\nvar var9;\n</code></pre>\n<p>Você pode especificar objetos semelhantes a maps e semelhantes a vetores usando string e assinaturas de índice numérico, usando sintaxe JSDoc padrão ou sintaxe Typescript.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * Um objeto semelhante a um map que mapeia propriedades `string` arbitrárias para `number`s.\n *\n * @type {Object.&#x3C;string, number>}\n */\nvar stringToNumber;\n\n/** @type {Object.&#x3C;number, object>} */\nvar arrayLike;\n</code></pre>\n<p>Os dois tipos precedentes são equivalentes aos tipos <code>{ [x: string]: number }</code> e <code>{ [x: number]: any }</code> do Typescript.\nO compilador entende ambas as sintaxes.</p>\n<p>Você pode especificar tipos de funções usando sintaxe Typescript ou sintaxe Closure\nYou can specify function types using either TypeScript or Closure syntax:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type {function(string, boolean): number} sintaxe Closure */\nvar sbn;\n/** @type {(s: string, b: boolean) => number} sintaxe TypeScript */\nvar sbn2;\n</code></pre>\n<p>Ou você pode usar o tipo não especificado <code>Function</code>:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @type {Function} */\nvar fn7;\n/** @type {function} */\nvar fn6;\n</code></pre>\n<p>Outros tipos de Closure também são aceitos:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {*} - pode ser o tipo 'any'\n */\nvar star;\n/**\n * @type {?} - tipo desconhecido (o mesmo que 'any')\n */\nvar question;\n</code></pre>\n<h3 id=\"conversões\" style=\"position:relative;\"><a href=\"#convers%C3%B5es\" aria-label=\"conversões permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conversões</h3>\n<p>Typescript pega emprestada a sintaxe de conversão de Closure.\nIsso possibilita que você converta um tipo para outro adicionando a tag <code>@type</code> antes de qualquer expressão com parênteses.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {number | string}\n */\nvar numberOrString = Math.random() &#x3C; 0.5 ? \"hello\" : 100;\nvar typeAssertedNumber = /** @type {number} */ (numberOrString);\n</code></pre>\n<h3 id=\"importando-tipos\" style=\"position:relative;\"><a href=\"#importando-tipos\" aria-label=\"importando tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importando tipos</h3>\n<p>Você também pode importar declarações de tipos a partir de outros arquivos usando importação de tipos\nEssa sintaxe é especifica do Typescript e difere do uso de JSDoc padrão:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: types.d.ts\nexport type Pet = {\n  name: string,\n};\n\n// @filename: main.js\n/**\n * @param p { import(\"./types\").Pet }\n */\nfunction walk(p) {\n  console.log(`Walking ${p.name}...`);\n}\n</code></pre>\n<p>importação de tipos também pode ser usada em declaração de apelidos de tipos:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: types.d.ts\nexport type Pet = {\n  name: string,\n};\n// @filename: main.js\n// ---cut---\n/**\n * @typedef { import(\"./types\").Pet } Pet\n */\n\n/**\n * @type {Pet}\n */\nvar myPet;\nmyPet.name;\n</code></pre>\n<p>importação de tipos pode ser usada para descobrir o tipo de um valor de um módulo se você ainda não sabe o tipo dele, ou se for um tipo longo que é irritante de se digitar:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @filename: accounts.d.ts\nexport const userAccount = {\n  name: \"Name\",\n  address: \"An address\",\n  postalCode: \"\",\n  country: \"\",\n  planet: \"\",\n  system: \"\",\n  galaxy: \"\",\n  universe: \"\",\n};\n// @filename: main.js\n// ---cut---\n/**\n * @type {typeof import(\"./accounts\").userAccount }\n */\nvar x = require(\"./accounts\").userAccount;\n</code></pre>\n<h2 id=\"param-e-returns\" style=\"position:relative;\"><a href=\"#param-e-returns\" aria-label=\"param e returns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@param</code> e <code>@returns</code></h2>\n<p><code>@param</code> usa a mesma sintaxe que a tag <code>@type</code>, porém é adicionado o nome do parâmetro.\nO parâmetro também pode ser declarado como opcional se for envolvido em colchetes:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// Parâmetros podem ser declarados numa variedade de formas sintáticas\n/**\n * @param {string}  p1 - Um parâmetro do tipo string.\n * @param {string=} p2 - Um parâmetro opcional (sintaxe Closure)\n * @param {string} [p3] - Outro parâmetro opcional (sintaxe JSDoc).\n * @param {string} [p4=\"test\"] - Um parâmetro opcional com um valor padrão\n * @return {string} Este é o resultado\n */\nfunction stringsStringStrings(p1, p2, p3, p4) {\n  // TODO\n}\n</code></pre>\n<p>Da mesma forma para o retorno de uma função:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @return {PromiseLike&#x3C;string>}\n */\nfunction ps() {}\n\n/**\n * @returns {{ a: string, b: number }} - Pode ser usado '@returns' ou '@return'\n */\nfunction ab() {}\n</code></pre>\n<h2 id=\"typedef-callback-e-param\" style=\"position:relative;\"><a href=\"#typedef-callback-e-param\" aria-label=\"typedef callback e param permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@typedef</code>, <code>@callback</code>, e <code>@param</code></h2>\n<p><code>@typedef</code> pode ser usado para definir tipos complexos.\nUma sintaxe similar funciona para <code>@param</code></p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @typedef {Object} SpecialType - cria um novo tipo chamado 'SpecialType'\n * @property {string} prop1 - uma propriedade string de SpecialType\n * @property {number} prop2 - uma propriedade numérica de SpecialType\n * @property {number=} prop3 - uma propriedade numérica opcional de SpecialType (sintaxe Closure)\n * @prop {number} [prop4] - uma propriedade numérica opcional de SpecialType (sintaxe JSDoc)\n * @prop {number} [prop5=42] - uma propriedade numérica opcional e com valor padrão de SpecialType\n */\n\n/** @type {SpecialType} */\nvar specialTypeObject;\nspecialTypeObject.prop3;\n</code></pre>\n<p>Na primeira linha, pode se usar tanto <code>object</code> como <code>Object</code>.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @typedef {object} SpecialType1 - cria um novo tipo chamado 'SpecialType'\n * @property {string} prop1 - uma propriedade string de SpecialType\n * @property {number} prop2 - uma propriedade numérica de SpecialType\n * @property {number=} prop3 - uma propriedade numérica opcional de SpecialType (sintaxe Closure)\n */\n\n/** @type {SpecialType1} */\nvar specialTypeObject1;\n</code></pre>\n<p><code>@param</code> permite uma sintaxe similar para especificações de tipo únicas.\nNote que os nomes das propriedades aninhadas têm que serem prefixadas com o nome do parâmetro:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @param {Object} options - O mesmo objecto SpecialType acima\n * @param {string} options.prop1\n * @param {number} options.prop2\n * @param {number=} options.prop3\n * @param {number} [options.prop4]\n * @param {number} [options.prop5=42]\n */\nfunction special(options) {\n  return (options.prop4 || 1001) + options.prop5;\n}\n</code></pre>\n<p><code>@callback</code> é similar a <code>@typedef</code>, mas especifica um tipo de uma função ao invés de um tipo de objeto:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @callback Predicate\n * @param {string} data\n * @param {number} [index]\n * @returns {boolean}\n */\n\n/** @type {Predicate} */\nconst ok = (s) => !(s.length % 2);\n</code></pre>\n<p>E é claro, qualquer um desses tipos podem ser declarados usando a sintaxe Typescript em apenas uma linha de <code>@typedef</code>:</p>\n<pre><code class=\"language-js\">/** @typedef {{ prop1: string, prop2: string, prop3?: number }} SpecialType */\n/** @typedef {(data: string, index?: number) => boolean} Predicate */\n</code></pre>\n<h2 id=\"template\" style=\"position:relative;\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@template</code></h2>\n<p>Você pode declarar funções genéricas com a tag <code>@template</code>:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @template T\n * @param {T} x - Um parâmetro genérico que flui até o tipo de retorno\n * @return {T}\n */\nfunction id(x) {\n  return x;\n}\n\nconst a = id(\"string\");\nconst b = id(123);\nconst c = id({});\n</code></pre>\n<p>Use vírgula ou múltiplas tags para declarar múltiplos parâmetros de tipo:</p>\n<pre><code class=\"language-js\">/**\n * @template T,U,V\n * @template W,X\n */\n</code></pre>\n<p>Você também pode especificar uma restrição de tipo antes do nome do parâmetro.\nApenas o primeiro parâmetro em uma lista sofre a restrição.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @template {string} K - K tem de ser do tipo string\n * @template {{ serious(): string }} Seriousalizable - tem de ter um método serious()\n * @param {K} key\n * @param {Seriousalizable} object\n */\nfunction seriousalize(key, object) {\n  // ????\n}\n</code></pre>\n<p>Declarar classes ou tipos genéricos não é suportado.</p>\n<h2 id=\"classes\" style=\"position:relative;\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h2>\n<p>Classes podem ser declaradas como Classes ES6.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">class C {\n  /**\n   * @param {number} data\n   */\n  constructor(data) {\n    // Tipos de propriedades podem ser inferidos\n    this.name = \"foo\";\n\n    // ou definidos explicitamente\n    /** @type {string | null} */\n    this.title = null;\n\n    // ou simplesmente anotados, se a variável for preenchida mais tarde\n    /** @type {number} */\n    this.size;\n\n    this.initialize(data); // Erro, initialize espera uma string como parâmetro\n  }\n  /**\n   * @param {string} s\n   */\n  initialize = function (s) {\n    this.size = s.length;\n  };\n}\n\nvar c = new C(0);\n\n// C should only be called with new, but\n// because it is JavaScript, this is allowed and\n// considered an 'any'.\nvar result = C(1);\n</code></pre>\n<p>Ou elas podem também ser declaradas como funções construtoras, como descrito nan próxima seção:</p>\n<h2 id=\"constructor\" style=\"position:relative;\"><a href=\"#constructor\" aria-label=\"constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@constructor</code></h2>\n<p>O compilador infere funções construtoras baseado nas atribuições da propriedade this, mas você pode fazer com que a checagem seja mais estrita e sugestões sejam melhores se você adicionar a tag <code>@constructor</code>:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @checkJs\n// @errors: 2345 2348\n/**\n * @constructor\n * @param {number} data\n */\nfunction C(data) {\n  // Tipos de propriedades podem ser inferidos\n  this.name = \"foo\";\n\n  // ou definidos explicitamente\n  /** @type {string | null} */\n  this.title = null;\n\n  // ou simplesmente anotados, se a variável for preenchida mais tarde\n  /** @type {number} */\n  this.size;\n\n  this.initialize(data);\n}\n/**\n * @param {string} s\n */\nC.prototype.initialize = function (s) {\n  this.size = s.length;\n};\n\nvar c = new C(0);\nc.size;\n\nvar result = C(1);\n</code></pre>\n<blockquote>\n<p>Nota: Mensagens de erro só serão exibidas em bases de código JS com <a href=\"/docs/handbook/tsconfig-json.html\">um JSConfig</a> e <a href=\"/tsconfig#checkJs\"><code>checkJs</code></a> habilitado.</p>\n</blockquote>\n<p>Com <code>@constructor</code>, o <code>this</code> é checado dentro da função construtora <code>C</code>, então você terá sugestões para o método <code>initialize</code> e verá um erro se passar um número para ele. Seu editor pode exibir um warning se você apenas chamar <code>C</code> ao invés de usá-lá como construtor.</p>\n<p>Infelizmente, isso significa que funções construtoras que também podem ser chamadas não podem usar <code>@constructor</code>.</p>\n<h2 id=\"this\" style=\"position:relative;\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@this</code></h2>\n<p>O compilador usualmente consegue inferir o tipo do <code>this</code> quando tem algum contexto para isso. Quando ele não puder, você pode especificar explicitamente o tipo do <code>this</code> com <code>@this</code>:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @this {HTMLElement}\n * @param {*} e\n */\nfunction callbackForLater(e) {\n  this.clientHeight = parseInt(e); // Deve estar ok!\n}\n</code></pre>\n<h2 id=\"extends\" style=\"position:relative;\"><a href=\"#extends\" aria-label=\"extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@extends</code></h2>\n<p>Quando classes Javascript extendem uma classe base genérica, não há lugar para especificar o que o parâmetro de tipo deveria ser. A tag <code>@extends</code> provém um lugar para aquele parâmetro de tipo:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @template T\n * @extends {Set&#x3C;T>}\n */\nclass SortableSet extends Set {\n  // ...\n}\n</code></pre>\n<p>Note que <code>@extends</code> funciona apenas com classes. Atualmente, não há forma para uma função construtora extender uma classe.</p>\n<h2 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@enum</code></h2>\n<p>A tag <code>@enum</code> permite que você crie um objeto literal cujos membros são todos de um tipo especificado. Diferentemente de outros objetos literais em Javascript, ela não permite outros membros.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @enum {number} */\nconst JSDocState = {\n  BeginningOfLine: 0,\n  SawAsterisk: 1,\n  SavingComments: 2,\n};\n\nJSDocState.SawAsterisk;\n</code></pre>\n<p>Note que a tag <code>@enum</code> é bem diferente e mais simples que a <code>enum</code> do TypeScript. Porém, diferentemente das enums do Typescript, <code>@enum</code> pode ter qualquer tipo:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/** @enum {function(number): number} */\nconst MathFuncs = {\n  add1: (n) => n + 1,\n  id: (n) => -n,\n  sub1: (n) => n - 1,\n};\n\nMathFuncs.add1;\n</code></pre>\n<h2 id=\"mais-exemplos\" style=\"position:relative;\"><a href=\"#mais-exemplos\" aria-label=\"mais exemplos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mais exemplos</h2>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">class Foo {}\n// ---cut---\nvar someObj = {\n  /**\n   * @param {string} param1 - Documentos em atribuições de propriedades funcionam\n   */\n  x: function (param1) {},\n};\n\n/**\n * Assim como documentos em atribuições de variáveis\n * @return {Window}\n */\nlet someFunc = function () {};\n\n/**\n * E métodos de classes\n * @param {string} greeting O cumprimento a ser usado\n */\nFoo.prototype.sayHi = (greeting) => console.log(\"Hi!\");\n\n/**\n * E expressões de arrow functions\n * @param {number} x - Um multiplicador\n */\nlet myArrow = (x) => x * x;\n\n/**\n * O que significa que também funciona para componentes funcionais stateless em JSX também\n * @param {{a: string, b: number}} test - Algum parâmetro\n */\nvar sfc = (test) => &#x3C;div>{test.a.charAt(0)}&#x3C;/div>;\n\n/**\n * Um parâmetro pode ser um construtor de classe, usando sintaxe Closure.\n *\n * @param {{new(...args: any[]): object}} C - A classe para ser registrada\n */\nfunction registerClass(C) {}\n\n/**\n * @param {...string} p1 - Um argumento 'rest' (vetor) de strings. (tratado como 'any')\n */\nfunction fn10(p1) {}\n\n/**\n * @param {...string} p1 - Um argumento 'rest' (vetor) de strings. (tratado como 'any')\n */\nfunction fn9(p1) {\n  return p1.join();\n}\n</code></pre>\n<h2 id=\"padrões-que-são-conhecidos-por-não-serem-suportados\" style=\"position:relative;\"><a href=\"#padr%C3%B5es-que-s%C3%A3o-conhecidos-por-n%C3%A3o-serem-suportados\" aria-label=\"padrões que são conhecidos por não serem suportados permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Padrões que são conhecidos por NÃO serem suportados</h2>\n<p>Referir-se a objetos no espaço de valor como tipo não funciona a não ser que o objeto também crie um tipo, como uma função construtora.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">function aNormalFunction() {}\n/**\n * @type {aNormalFunction}\n */\nvar wrong;\n/**\n * Use 'typeof' ao invés da sintaxe anterior:\n * @type {typeof aNormalFunction}\n */\nvar right;\n</code></pre>\n<p>Sinais de igual posteriores a um tipo de propriedade de um objeto literal não especifica uma propriedade opcional:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {{ a: string, b: number= }}\n */\nvar wrong;\n/**\n * Use o ponto de interrogação como abaixo para especificar uma propriedade opcional\n * @type {{ a: string, b?: number }}\n */\nvar right;\n</code></pre>\n<p>Tipos anuláveis só tem significado se a opção <code>strictNullChecks</code> estiver habilitada:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {?number}\n * Com strictNullChecks: true  -- number | null\n * Com strictNullChecks: false -- number\n */\nvar nullable;\n</code></pre>\n<p>Você também pode usar uma união:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {number | null}\n * Com strictNullChecks: true  -- number | null\n * Com strictNullChecks: false -- number\n */\nvar unionNullable;\n</code></pre>\n<p>Tipos não-anuláveis não tem significado e são tratados apenas como seu tipo original:</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">/**\n * @type {!number}\n * Tem apenas tipo number\n */\nvar normal;\n</code></pre>\n<p>Diferentemente de qualquer sistema de tipo JSDoc, Typescript permite apenas você marcar tipos contendo null ou não.\nNão há não nulidade — se strictNullChecks está habilitada, então <code>number</code> não é anulável.\nSe está desabilitada, então <code>number</code> é anulável.</p>\n<h3 id=\"tags-não-suportadas\" style=\"position:relative;\"><a href=\"#tags-n%C3%A3o-suportadas\" aria-label=\"tags não suportadas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tags não suportadas</h3>\n<p>Typescript ignora qualquer tag JSDoc não suportada.</p>\n<p>As tags seguintes têm issues abertas para serem suportadas:</p>\n<ul>\n<li><code>@const</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/19672\">issue #19672</a>)</li>\n<li><code>@inheritdoc</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23215\">issue #23215</a>)</li>\n<li><code>@memberof</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/7237\">issue #7237</a>)</li>\n<li><code>@yields</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23857\">issue #23857</a>)</li>\n<li><code>{@link …}</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/35524\">issue #35524</a>)</li>\n</ul>\n<h2 id=\"extensões-de-classes-js\" style=\"position:relative;\"><a href=\"#extens%C3%B5es-de-classes-js\" aria-label=\"extensões de classes js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extensões de Classes JS</h2>\n<h3 id=\"modificadores-de-propriedades-jsdoc\" style=\"position:relative;\"><a href=\"#modificadores-de-propriedades-jsdoc\" aria-label=\"modificadores de propriedades jsdoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modificadores de propriedades JSDoc</h3>\n<p>From TypeScript 3.8 onwards, you can use JSDoc to modify the properties in a class. First are the accessibility modifiers: <code>@public</code>, <code>@private</code>, and <code>@protected</code>.\nDo Typescript 3.8 para frente, você pode usar JSDoc para modificar as propriedades em uma classe. Primeiramente, apresentamos os modificadores: <code>@public</code>, <code>@private</code>, and <code>@protected</code>.\nEssas tags funcionam exatamente como <code>public</code>, <code>private</code>, e <code>protected</code> em Typescript, respectivamente.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @errors: 2341\n// @ts-check\n\nclass Car {\n  constructor() {\n    /** @private */\n    this.identifier = 100;\n  }\n\n  printIdentifier() {\n    console.log(this.identifier);\n  }\n}\n\nconst c = new Car();\nconsole.log(c.identifier);\n</code></pre>\n<ul>\n<li><code>@public</code> é sempre inferida e pode não ser especificada, mas significa que uma propriedade pode ser alcançada de qualquer lugar.</li>\n<li><code>@private</code> siginifica que a propriedade só pode ser usada dentro da classe que a contém.</li>\n<li><code>@protected</code> means that a property can only be used within the containing class, and all derived subclasses, but not on dissimilar instances of the containing class.</li>\n<li><code>@protected</code> siginifica que a propriedade só pode ser usada dentro da classe que a contém, e todas as subclasses derivadas, mas não em classes dissimilares da classe que a contém.</li>\n</ul>\n<p>Depois, também adicionamos o modificador <code>@readonly</code> para garantir que a propriedade só recebe uma atribuição durante a sua inicialização.</p>\n<pre><code class=\"language-js\" data-meta=\"twoslash\">// @errors: 2540\n// @ts-check\n\nclass Car {\n  constructor() {\n    /** @readonly */\n    this.identifier = 100;\n  }\n\n  printIdentifier() {\n    console.log(this.identifier);\n  }\n}\n\nconst c = new Car();\nconsole.log(c.identifier);\n</code></pre>","headings":[{"value":"Extensões class","depth":4},{"value":"@type","depth":2},{"value":"Conversões","depth":3},{"value":"Importando tipos","depth":3},{"value":"@param e @returns","depth":2},{"value":"@typedef, @callback, e @param","depth":2},{"value":"@template","depth":2},{"value":"Classes","depth":2},{"value":"@constructor","depth":2},{"value":"@this","depth":2},{"value":"@extends","depth":2},{"value":"@enum","depth":2},{"value":"Mais exemplos","depth":2},{"value":"Padrões que são conhecidos por NÃO serem suportados","depth":2},{"value":"Tags não suportadas","depth":3},{"value":"Extensões de Classes JS","depth":2},{"value":"Modificadores de propriedades JSDoc","depth":3}],"frontmatter":{"permalink":"/pt/docs/handbook/jsdoc-supported-types.html","title":"Referência JSDoc","disable_toc":null,"handbook":null,"oneline":"Quais JSDoc Javascript baseado em Typescript suporta?","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Checando tipos de arquivos JavaScript","oneline":"Como adicionar checagem de tipos a arquivos JavaScript usando Typescript","permalink":"/pt/docs/handbook/type-checking-javascript-files.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Criação de arquivos .d.ts a partir de arquivos .js","oneline":"Como adicionar geração d.ts a projetos JavaScript","permalink":"/pt/docs/handbook/declaration-files/dts-from-js.html"}}}},"pageContext":{"id":"6-referência-jsdoc","slug":"/pt/docs/handbook/jsdoc-supported-types.html","repoPath":"/packages/documentation/copy/pt/javascript/JSDoc Reference.md","previousID":"ef1f43c1-d5cc-58b2-a621-03641103bce0","nextID":"1dd4b6ec-8b7d-53ef-94db-9f9b51d0003d","lang":"pt","modifiedTime":"2021-05-31T12:18:20.879Z"}},"staticQueryHashes":[]}