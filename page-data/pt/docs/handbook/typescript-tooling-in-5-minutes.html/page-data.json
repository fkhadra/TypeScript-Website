{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html","result":{"data":{"markdownRemark":{"id":"ea94028a-68aa-5c12-9489-79dcc9099b77","excerpt":"Vamos começar criando um aplicativo da web simples com TypeScript. Instalando TypeScript Existem duas maneiras principais de obter o TypeScript disponível para…","html":"<p>Vamos começar criando um aplicativo da web simples com TypeScript.</p>\n<h2 id=\"instalando-typescript\" style=\"position:relative;\"><a href=\"#instalando-typescript\" aria-label=\"instalando typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Instalando TypeScript</h2>\n<p>Existem duas maneiras principais de obter o TypeScript disponível para o seu projeto:</p>\n<ul>\n<li>Via npm (o gerenciador de pacotes Node.js)</li>\n<li>Instalando os plugins do Visual Studio do TypeScript</li>\n</ul>\n<p>O Visual Studio 2017 e o Visual Studio 2015 Update 3 incluem TypeScript por padrão.\nSe você não instalou o TypeScript com o Visual Studio, ainda pode <a href=\"/download\">baixá-lo</a>.</p>\n<p>Para usuários npm:</p>\n<pre><code class=\"language-shell\">> npm install -g typescript\n</code></pre>\n<h2 id=\"construindo-seu-primeiro-arquivo-typescript\" style=\"position:relative;\"><a href=\"#construindo-seu-primeiro-arquivo-typescript\" aria-label=\"construindo seu primeiro arquivo typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Construindo seu primeiro arquivo TypeScript</h2>\n<p>Em seu editor, digite o seguinte código JavaScript em <code>greeter.ts</code>:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @noImplicitAny: false\nfunction greeter(person) {\n  return \"Hello, \" + person;\n}\n\nlet user = \"Jane User\";\n\ndocument.body.textContent = greeter(user);\n</code></pre>\n<h2 id=\"compilando-seu-código\" style=\"position:relative;\"><a href=\"#compilando-seu-c%C3%B3digo\" aria-label=\"compilando seu código permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compilando seu código</h2>\n<p>Usamos uma extensão <code>.ts</code>, mas este código é apenas JavaScript.\nVocê poderia ter copiado / colado diretamente de um aplicativo JavaScript existente.</p>\n<p>Na linha de comando, execute o compilador TypeScript:</p>\n<pre><code class=\"language-shell\">tsc greeter.ts\n</code></pre>\n<p>O resultado será um arquivo <code>greeter.js</code> que contém o mesmo JavaScript que você alimentou.\nEstamos funcionando usando o TypeScript em nosso aplicativo JavaScript!</p>\n<p>Agora podemos começar a tirar proveito de algumas das novas ferramentas que o TypeScript oferece.\nAdicione uma anotação do tipo <code>: string</code> ao argumento da função ‘pessoa’ conforme mostrado aqui:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">function greeter(person: string) {\n  return \"Hello, \" + person;\n}\n\nlet user = \"Jane User\";\n\ndocument.body.textContent = greeter(user);\n</code></pre>\n<h2 id=\"digite-anotações\" style=\"position:relative;\"><a href=\"#digite-anota%C3%A7%C3%B5es\" aria-label=\"digite anotações permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Digite anotações</h2>\n<p>As anotações de tipo no TypeScript são maneiras leves de registrar o contrato pretendido da função ou variável.\nNeste caso, pretendemos que a função greeter seja chamada com um único parâmetro de string.\nPodemos tentar alterar a chamada de greeter para passar uma matriz em vez disso:</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">// @errors: 2345\nfunction greeter(person: string) {\n  return \"Hello, \" + person;\n}\n\nlet user = [0, 1, 2];\n\ndocument.body.textContent = greeter(user);\n</code></pre>\n<p>Recompilando, você verá um erro:</p>\n<pre><code class=\"language-shell\">error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'string'.\n</code></pre>\n<p>Da mesma forma, tente remover todos os argumentos para a chamada de greeter.\nO TypeScript permitirá que você saiba que você chamou esta função com um número inesperado de parâmetros.\nEm ambos os casos, o TypeScript pode oferecer análise estática com base na estrutura do seu código e nas anotações de tipo fornecidas.</p>\n<p>Observe que embora tenha havido erros, o arquivo <code>greeter.js</code> ainda é criado.\nVocê pode usar o TypeScript mesmo se houver erros no seu código. Mas, neste caso, o TypeScript está avisando que seu código provavelmente não será executado conforme o esperado.</p>\n<h2 id=\"interfaces\" style=\"position:relative;\"><a href=\"#interfaces\" aria-label=\"interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interfaces</h2>\n<p>Vamos desenvolver ainda mais nosso exemplo. Aqui, usamos uma interface que descreve objetos que possuem um campo firstName e lastName.\nNo TypeScript, dois tipos são compatíveis se sua estrutura interna for compatível.\nIsso nos permite implementar uma interface apenas tendo a forma que a interface requer, sem uma cláusula <code>implements</code> explícita.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">interface Person {\n  firstName: string;\n  lastName: string;\n}\n\nfunction greeter(person: Person) {\n  return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n\nlet user = { firstName: \"Jane\", lastName: \"User\" };\n\ndocument.body.textContent = greeter(user);\n</code></pre>\n<h2 id=\"classes\" style=\"position:relative;\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h2>\n<p>Finalmente, vamos estender o exemplo uma última vez com as aulas.\nTypeScript oferece suporte a novos recursos em JavaScript, como suporte para programação orientada a objetos baseada em classes.</p>\n<p>Aqui, criaremos uma classe <code>Student</code> com um construtor e alguns campos públicos.\nObserve que as classes e as interfaces funcionam bem juntas, permitindo que o programador decida sobre o nível certo de abstração.</p>\n<p>Também digno de nota, o uso de <code>public</code> em argumentos para o construtor é uma forma abreviada que nos permite criar propriedades automaticamente com aquele nome.</p>\n<pre><code class=\"language-ts\" data-meta=\"twoslash\">class Student {\n  fullName: string;\n  constructor(\n    public firstName: string,\n    public middleInitial: string,\n    public lastName: string\n  ) {\n    this.fullName = firstName + \" \" + middleInitial + \" \" + lastName;\n  }\n}\n\ninterface Person {\n  firstName: string;\n  lastName: string;\n}\n\nfunction greeter(person: Person) {\n  return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n\nlet user = new Student(\"Jane\", \"M.\", \"User\");\n\ndocument.body.textContent = greeter(user);\n</code></pre>\n<p>Execute novamente <code>tsc greeter.ts</code> e você verá que o JavaScript gerado é o mesmo do código anterior.\nAs classes em TypeScript são apenas uma abreviatura para o mesmo OO baseado em protótipo que é freqüentemente usado em JavaScript.</p>\n<h2 id=\"executando-seu-aplicativo-da-web-typescript\" style=\"position:relative;\"><a href=\"#executando-seu-aplicativo-da-web-typescript\" aria-label=\"executando seu aplicativo da web typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Executando seu aplicativo da web TypeScript</h2>\n<p>Agora digite o seguinte em <code>greeter.html</code>:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;title>TypeScript Greeter&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;script src=\"greeter.js\">&#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>Abra <code>greeter.html</code> no navegador para executar seu primeiro aplicativo da Web TypeScript simples!</p>\n<p>Opcional: Abra <code>greeter.ts</code> no Visual Studio ou copie o código para o playground do TypeScript.\nVocê pode passar o mouse sobre os identificadores para ver seus tipos.\nObserve que, em alguns casos, esses tipos são inferidos automaticamente para você.\nDigite novamente a última linha e veja as listas de completamento e a ajuda de parâmetros com base nos tipos de elementos DOM.\nColoque o cursor sobre a referência da função greeter e pressione F12 para ir para sua definição.\nObserve também que você pode clicar com o botão direito em um símbolo e usar a refatoração para renomeá-lo.</p>\n<p>As informações de tipo fornecidas funcionam em conjunto com as ferramentas para trabalhar com JavaScript na escala do aplicativo.\nPara obter mais exemplos do que é possível no TypeScript, consulte a seção Amostras do site.</p>\n<p><img src=\"/images/docs/greet_person.png\" alt=\"Visual Studio picture\"></p>","headings":[{"value":"Instalando TypeScript","depth":2},{"value":"Construindo seu primeiro arquivo TypeScript","depth":2},{"value":"Compilando seu código","depth":2},{"value":"Digite anotações","depth":2},{"value":"Interfaces","depth":2},{"value":"Classes","depth":2},{"value":"Executando seu aplicativo da web TypeScript","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html","title":"Ferramentas TypeScript em 5 minutos","disable_toc":null,"handbook":null,"oneline":"Um tutorial para entender como criar um pequeno site com TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null}},"prev":null,"next":null},"pageContext":{"id":"0-ferramentas-typescript-em-5-minutos","slug":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html","repoPath":"/packages/documentation/copy/pt/tutorials/TypeScript Tooling in 5 minutes.md","lang":"pt","modifiedTime":"2021-05-31T12:18:20.883Z"}},"staticQueryHashes":[]}