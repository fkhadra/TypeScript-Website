{"version":3,"sources":["webpack://typescriptlang-org/../node_modules/babel-loader/lib/node_modules/shiki-twoslash/dist/dom.js","webpack://typescriptlang-org/./src/templates/glossary.tsx"],"names":["exports","resetHover","globalPopover","document","getElementById","style","display","getRootRect","element","nodeName","toLowerCase","getBoundingClientRect","parentElement","hover","event","hovered","target","bodyRect","elemRect","message","getAttribute","position","body","top","left","tooltip","createElement","id","appendChild","txt","innerHTML","textContent","value","rootRect","relativeLeft","x","maxWidth","width","blocks","querySelectorAll","forEach","code","addEventListener","removeEventListener","GlossaryTemplateComponent","props","i","createInternational","useIntl","post","data","markdownRemark","console","log","JSON","stringify","useEffect","setupTwoslashHovers","meta","pageContext","languageMeta","title","description","lang","locale","className","padding","textAlign","terms","map","t","key","href","dangerouslySetInnerHTML","__html","html"],"mappings":"2HAGAA,EAAQ,OAAsB,EAE9B,IAYIC,EAAa,WACf,IAAIC,EAAgBC,SAASC,eAAe,6BACxCF,IAAeA,EAAcG,MAAMC,QAAU,SAiB/CC,EAAc,SAASA,EAAYC,GACrC,MAAuC,QAAnCA,EAAQC,SAASC,cACZF,EAAQG,wBAGVJ,EAAYC,EAAQI,gBAIzBC,EAAQ,SAAeC,GACzB,IAAIC,EAAUD,EAAME,OACpB,GAAyB,aAArBD,EAAQN,SAAyB,OAAOR,IAC5C,IA3CyDO,EACrDS,EACAC,EAiBAhB,EAwBAiB,EAAUJ,EAAQK,aAAa,OAC/BC,GA5CqDb,EA4CpBO,EA3CjCE,EAAWd,SAASmB,KAAKX,wBAItB,CACLY,KAJEL,EAAWV,EAAQG,yBACJY,IAAMN,EAASM,IAIhCC,KAHSN,EAASM,KAAOP,EAASO,OA0ChCC,IA3BAvB,EAAgBC,SAASC,eAAe,iCAG1CF,EAAgBC,SAASuB,cAAc,QACzBrB,MAAMgB,SAAW,WAC/BnB,EAAcyB,GAAK,4BACnBxB,SAASmB,KAAKM,YAAY1B,IAGrBA,GAoBH2B,EAAM1B,SAASuB,cAAc,YACjCG,EAAIC,UAAYX,EAChBM,EAAQM,YAAcF,EAAIG,MAG1BP,EAAQpB,MAAMC,QAAU,QACxBmB,EAAQpB,MAAMkB,IAAMF,EAASE,IAFf,GAE+B,KAC7CE,EAAQpB,MAAMmB,KAAOH,EAASG,KAAO,KAErC,IAAIS,EAAW1B,EAAYQ,GACvBmB,EAAeb,EAASG,KAAOS,EAASE,EAC5CV,EAAQpB,MAAM+B,SAAWH,EAASI,MAAQH,EAAe,MAoC3DlC,EAAQ,EAdkB,WACxB,IAAIsC,EAASnC,SAASoC,iBAAiB,mCAKvC,OAJAD,EAAOE,SAAQ,SAAUC,GACvBA,EAAKC,iBAAiB,YAAa7B,GACnC4B,EAAKC,iBAAiB,WAAYzC,MAE7B,WACLqC,EAAOE,SAAQ,SAAUC,GACvBA,EAAKE,oBAAoB,YAAa9B,GACtC4B,EAAKE,oBAAoB,WAAY1C,S,yHC9ErC2C,EAA4B,SAACC,GACjC,IAAMC,GAAIC,QAAqCC,UAEzCC,EAAOJ,EAAMK,KAAKC,eACxB,IAAKF,EAEH,OADAG,EAAQC,IAAI,oBAAqBC,KAAKC,UAAUV,IACzC,+BAGTW,gBAAU,YACRC,WACC,IAEH,IAAMC,EAAOb,EAAMc,YAAYC,aAC/B,OACE,kBAAC,IAAD,CAAQC,MAAOf,EAAE,kBAAmBgB,YAAahB,EAAE,wBAAyBiB,KAAMlB,EAAMc,YAAYK,QAClG,yBAAKrC,GAAG,YACN,yBAAKsC,UAAU,2DAA2D5D,MAAO,CAAE6D,QAAS,OAAQC,UAAW,WAA/G,4DAEA,wBAAIF,UAAU,4CAEVP,EAAKU,MAAMC,KAAI,SAAAC,GAAC,OAAI,wBAAIC,IAAKD,EAAE3C,IAAI,uBAAG6C,KAAM,IAAMF,EAAE3C,IAAK2C,EAAEhE,cAG/D,yBAAKmE,wBAAyB,CAAEC,OAAQzB,EAAK0B,WAkBrD,mBAAgB9B,GAAD,OAAkB,kBAAC,IAAD,CAAMmB,OAAQnB,EAAMc,YAAYK,QAAQ,kBAACpB,EAA8BC","file":"component---src-templates-glossary-tsx-4216805a0479ec989a07.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.setupTwoslashHovers = void 0; // Gets the position of an element relative to the whole page\n\nvar getAbsoluteElementPos = function getAbsoluteElementPos(element) {\n  var bodyRect = document.body.getBoundingClientRect();\n  var elemRect = element.getBoundingClientRect();\n  var top = elemRect.top - bodyRect.top;\n  var left = elemRect.left - bodyRect.left;\n  return {\n    top: top,\n    left: left\n  };\n}; // Hide it\n\n\nvar resetHover = function resetHover() {\n  var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n  if (globalPopover) globalPopover.style.display = \"none\";\n}; // Get it\n\n\nvar findOrCreateTooltip = function findOrCreateTooltip() {\n  var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n\n  if (!globalPopover) {\n    globalPopover = document.createElement(\"div\");\n    globalPopover.style.position = \"absolute\";\n    globalPopover.id = \"twoslash-mouse-hover-info\";\n    document.body.appendChild(globalPopover);\n  }\n\n  return globalPopover;\n};\n\nvar getRootRect = function getRootRect(element) {\n  if (element.nodeName.toLowerCase() === \"pre\") {\n    return element.getBoundingClientRect();\n  }\n\n  return getRootRect(element.parentElement);\n}; // Gets triggered on the spans inside the codeblocks\n\n\nvar hover = function hover(event) {\n  var hovered = event.target;\n  if (hovered.nodeName !== \"DATA-LSP\") return resetHover();\n  var message = hovered.getAttribute(\"lsp\");\n  var position = getAbsoluteElementPos(hovered); // Create or re-use the current hover div\n\n  var tooltip = findOrCreateTooltip(); // Use a textarea to un-htmlencode for presenting to the user\n\n  var txt = document.createElement(\"textarea\");\n  txt.innerHTML = message;\n  tooltip.textContent = txt.value; // Offset it a bit from the mouse and present it at an absolute position\n\n  var yOffset = 20;\n  tooltip.style.display = \"block\";\n  tooltip.style.top = position.top + yOffset + \"px\";\n  tooltip.style.left = position.left + \"px\"; // limit the width of the tooltip to the outer container (pre)\n\n  var rootRect = getRootRect(hovered);\n  var relativeLeft = position.left - rootRect.x;\n  tooltip.style.maxWidth = rootRect.width - relativeLeft + \"px\";\n};\n/**\n * Creates the main mouse over popup for LSP info using the DOM API.\n * It is expected to be run inside a `useEffect` block inside your main\n * exported component in Gatsby.\n *\n * @example\n * import React, { useEffect } from \"react\"\n * import { setupTwoslashHovers } from \"shiki-twoslash/dom\";\n *\n * export default () => {\n *   // Add a the hovers\n *   useEffect(setupTwoslashHovers)\n *\n *   // Normal JSX\n *   return </>\n * }\n *\n */\n\n\nvar setupTwoslashHovers = function setupTwoslashHovers() {\n  var blocks = document.querySelectorAll(\".shiki.lsp .code-container code\");\n  blocks.forEach(function (code) {\n    code.addEventListener(\"mouseover\", hover);\n    code.addEventListener(\"mouseout\", resetHover);\n  });\n  return function () {\n    blocks.forEach(function (code) {\n      code.removeEventListener(\"mouseover\", hover);\n      code.removeEventListener(\"mouseout\", resetHover);\n    });\n  };\n};\n\nexports.setupTwoslashHovers = setupTwoslashHovers;","import React, { useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./glossary.scss\"\n\nimport { setupTwoslashHovers } from \"shiki-twoslash/dist/dom\"\n\ntype Props = { pageContext: any, data: GatsbyTypes.TSConfigReferenceTemplateQuery, path: string }\n\nconst GlossaryTemplateComponent = (props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    setupTwoslashHovers()\n  }, [])\n\n  const meta = props.pageContext.languageMeta as typeof import(\"../../../glossary/output/en.json\")\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n      <div id=\"glossary\">\n        <div className=\"whitespace raised content main-content-block subheadline\" style={{ padding: \"1rem\", textAlign: \"center\" }}>This page is a work in progress, congrats on finding it!</div>\n\n        <ul className=\"filterable-quicklinks main-content-block\">\n          {\n            meta.terms.map(t => <li key={t.id}><a href={\"#\" + t.id}>{t.display}</a></li>)\n          }\n        </ul>\n        <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query GlossaryTemplate($glossaryPath: String!) {\n    markdownRemark(fileAbsolutePath: {eq: $glossaryPath} ) {\n      id\n      html\n      frontmatter {\n        permalink\n      }\n    }\n  }\n`\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><GlossaryTemplateComponent {...props} /></Intl>\n"],"sourceRoot":""}